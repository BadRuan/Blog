{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/2024-02-17/Snipaste_2024-02-18_20-01-57.png","path":"images/2024-02-17/Snipaste_2024-02-18_20-01-57.png","modified":1,"renderable":0},{"_id":"source/images/2024-02-17/Snipaste_2024-02-18_20-05-03.png","path":"images/2024-02-17/Snipaste_2024-02-18_20-05-03.png","modified":1,"renderable":0},{"_id":"source/images/2024-02-18/Snipaste_2024-02-18_22-06-50.png","path":"images/2024-02-18/Snipaste_2024-02-18_22-06-50.png","modified":1,"renderable":0},{"_id":"source/images/2024-02-18/wsl-home-command.png","path":"images/2024-02-18/wsl-home-command.png","modified":1,"renderable":0},{"_id":"source/images/2024-02-18/wsl-list.png","path":"images/2024-02-18/wsl-list.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"f84a962b0bbfea0c5a255e4e1ab0795dc1688928","modified":1708259164811},{"_id":"source/categories/index.md","hash":"afe0601ff640c910d7e52e0c3474d2edd84ae2e6","modified":1708259919761},{"_id":"source/_posts/2015/11/第一篇博文.md","hash":"ddc4d589640133ca6cc592ae733b3bb863a5d702","modified":1708261571641},{"_id":"source/_posts/2015/11/自习的意义.md","hash":"046574ac8d7b7296220959d344389cfcf0fef042","modified":1708261589111},{"_id":"source/_posts/2015/11/谈自律.md","hash":"6777a407dc0e722b30be8aa092e64ff437514aad","modified":1708261570751},{"_id":"source/_posts/2015/12/随笔.md","hash":"e46dbba375d077285b95ad76337344fccf607753","modified":1708261560421},{"_id":"source/_posts/2016/03/随笔.md","hash":"a0e1187766839409257217eb730d8080ac569daf","modified":1708261705811},{"_id":"source/_posts/2016/04/说说.md","hash":"d4563387779135b3578d797657611bd15c521f1a","modified":1708261698231},{"_id":"source/_posts/2019/07/Python虚拟环境：virtualenv.md","hash":"f38e5fbf6755314614d974e9c2c0a3ed8fb6f889","modified":1708261634361},{"_id":"source/_posts/2024/02/Linux安装Node.md","hash":"aeb9f23e478c6d57b99a25fcfe77d31375b0ef65","modified":1708260033041},{"_id":"source/_posts/2024/02/WSL-在Windows下得到睥睨原生的Linux.md","hash":"9da31edee4b9005815d12b03e466b85b86e779f3","modified":1708265385221},{"_id":"source/_posts/2024/02/专注和思考很重要.md","hash":"91b31f041f7c565d42793e5db26e89eba386261a","modified":1708260056481},{"_id":"source/_posts/2024/03/命令行的艺术.md","hash":"7c107a51c667ebdb6fe8a50e27e4f00fdfebe727","modified":1709377345996},{"_id":"source/images/2024-02-17/Snipaste_2024-02-18_20-05-03.png","hash":"136ee0f782bb3352be1a369295023476dbee1472","modified":1708257906018},{"_id":"source/images/2024-02-18/wsl-home-command.png","hash":"b73d779f523752b39697f33696ca88276f1ca4ad","modified":1708265080681},{"_id":"source/images/2024-02-18/wsl-list.png","hash":"ff7246f379ee6dae78cb29701676cfed963ccb19","modified":1708264712861},{"_id":"source/images/2024-02-17/Snipaste_2024-02-18_20-01-57.png","hash":"5a1e057a0788eb39758b9cec27aeb3a953a70847","modified":1708257726493},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1708174836869},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1708174836869},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1708174836869},{"_id":"themes/next/.stylelintrc","hash":"9346cca6a24256a79f433670da634e8329f9a2a9","modified":1708174836869},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1708174836869},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1708174836869},{"_id":"themes/next/_vendors.yml","hash":"7f22d93ab17a2aa066d0e1a10dc346fca8eac11d","modified":1708174836869},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1708174836869},{"_id":"themes/next/package.json","hash":"0f192f307394832d65a8f15fb193f17d8f23024f","modified":1708174836869},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1708174836869},{"_id":"themes/next/README.md","hash":"d6820f46d03a93bd6dc8b10f49f58aec82ad2b06","modified":1708174836869},{"_id":"themes/next/.githooks/install.js","hash":"0977cb57c8b91ea166b5bbc481e4ddeaf77e9b18","modified":1708174836869},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1708174836869},{"_id":"source/images/2024-02-18/Snipaste_2024-02-18_22-06-50.png","hash":"8a68c96e0baf2f28e678446aa22fccfcb7a3afc7","modified":1708265217751},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"fa76760856429b6421abc54e63b2d3c815372900","modified":1708174836869},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1708174836869},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"e78ec4eb6ce49a44ec321c49424ee0a0c1846537","modified":1708174836869},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1708174836869},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"5fd78aaaf3e6bb4811abde0cc5d75a3174ce4882","modified":1708174836869},{"_id":"themes/next/.github/labeler.yml","hash":"b7f67daa031c535940be82ea96f0fb9db59e1022","modified":1708174836869},{"_id":"themes/next/_config.yml","hash":"52d58ad8116d6357b4d34000c77fc76994d942c0","modified":1708260259231},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1708174836869},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1708174836869},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1708174836869},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1708174836869},{"_id":"themes/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1708174836869},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1708174836869},{"_id":"themes/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1708174836869},{"_id":"themes/next/languages/default.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1708174836869},{"_id":"themes/next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1708174836869},{"_id":"themes/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1708174836869},{"_id":"themes/next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1708174836869},{"_id":"themes/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1708174836869},{"_id":"themes/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1708174836869},{"_id":"themes/next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1708174836869},{"_id":"themes/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1708174836869},{"_id":"themes/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1708174836869},{"_id":"themes/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1708174836869},{"_id":"themes/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1708174836869},{"_id":"themes/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1708174836869},{"_id":"themes/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1708174836869},{"_id":"themes/next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1708174836869},{"_id":"themes/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1708174836869},{"_id":"themes/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1708174836869},{"_id":"themes/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1708174836869},{"_id":"themes/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1708174836869},{"_id":"themes/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1708174836869},{"_id":"themes/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1708174836869},{"_id":"themes/next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1708174836869},{"_id":"themes/next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1708174836869},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1708174836869},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1708174836869},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1708174836869},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1708174836869},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1708174836869},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1708174836869},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1708174836869},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1708174836869},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1708174836879},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1708174836869},{"_id":"themes/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1708174836869},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1708174836869},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1708174836869},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44eb8b9706b31a4917cacddde2b3aca4ff82955b","modified":1708174836869},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"3ad29997b83aceddb771992cc31228808216b888","modified":1708174836869},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"48e6e1e1406705379112766f4fd8388e1c53b281","modified":1708174836869},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1708174836869},{"_id":"themes/next/.github/workflows/linter.yml","hash":"1d3d8fe53e9350e35d8349a19f65664789665e54","modified":1708174836869},{"_id":"themes/next/.github/workflows/lock.yml","hash":"275650a678684523f37187d0532f96aa0f49ce00","modified":1708174836869},{"_id":"themes/next/.github/workflows/tester.yml","hash":"5cf17546afd6be2371b46e72f3901045d4ad803e","modified":1708174836869},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1708174836869},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1708174836869},{"_id":"themes/next/docs/ru/README.md","hash":"29c89a41b371f893e56c87ea61adabc444ec58cc","modified":1708174836869},{"_id":"themes/next/docs/zh-CN/README.md","hash":"12a3e96581964a22b474cc739675d52ef93ff932","modified":1708174836869},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1708174836869},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1708174836869},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1708174836869},{"_id":"themes/next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1708174836869},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1708174836869},{"_id":"themes/next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1708174836869},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1708174836869},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1708174836869},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1708174836869},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1708174836869},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1708174836869},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1708174836869},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1708174836869},{"_id":"themes/next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1708174836869},{"_id":"themes/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1708174836869},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1708174836869},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1708174836869},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1708174836869},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1708174836869},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1708174836869},{"_id":"themes/next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1708174836869},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1708174836869},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1708174836869},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1708174836869},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"ce6bd4054653a4066b19869819a17b568eeee915","modified":1708174836869},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1708174836869},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1708174836879},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1708174836869},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1708174836879},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1708174836879},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1708174836879},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1708174836879},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1708174836879},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1708174836879},{"_id":"themes/next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1708174836879},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1708174836879},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1708174836879},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1708174836879},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1708174836879},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1708174836879},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1708174836879},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1708174836879},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1708174836879},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1708174836879},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1708174836879},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1708174836879},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1708174836879},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1708174836879},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1708174836879},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1708174836879},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1708174836879},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1708174836879},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1708174836879},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1708174836879},{"_id":"themes/next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1708174836879},{"_id":"themes/next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1708174836879},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1708174836879},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1708174836879},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1708174836879},{"_id":"themes/next/test/helpers/next-url.js","hash":"90092dc7e78100bc1ebd1f8ffe4d1543f48e76a8","modified":1708174836879},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1708174836879},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1708174836879},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1708174836879},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1708174836879},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1708174836879},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1708174836879},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1708174836879},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1708174836879},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1708174836879},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1708174836879},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1708174836879},{"_id":"themes/next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1708174836879},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1708174836879},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1708174836879},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1708174836879},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1708174836869},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1708174836869},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1708174836869},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1708174836869},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1708174836869},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1708174836869},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1708174836869},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1708174836869},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1708174836869},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1708174836869},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1708174836869},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1708174836869},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1708174836869},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1708174836869},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1708174836869},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1708174836869},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1708174836869},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1708174836869},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1708174836869},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1708174836869},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1708174836869},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1708174836869},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1708174836869},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1708174836869},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1708174836869},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1708174836869},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1708174836869},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1708174836869},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1708174836869},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1708174836869},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1708174836869},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1708174836869},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1708174836869},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1708174836869},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1708174836869},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1708174836869},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1708174836869},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1708174836869},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1708174836869},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1708174836869},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1708174836869},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1708174836869},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1708174836869},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1708174836869},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1708174836869},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1708174836869},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1708174836869},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1708174836869},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1708174836869},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1708174836869},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1708174836869},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1708174836869},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"8300553bf2a1c4bfaec76f2da56465016e9d8058","modified":1708174836869},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1708174836869},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1708174836869},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1708174836869},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1708174836869},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1708174836869},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1708174836869},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1708174836869},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1708174836869},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1708174836869},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1708174836869},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1708174836869},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1708174836869},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1708174836869},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1708174836879},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1708174836879},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1708174836879},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1708174836879},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1708174836879},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1708174836879},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1708174836879},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1708174836879},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1708174836869},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1708174836879},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1708174836879},{"_id":"themes/next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1708174836879},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1708174836879},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1708174836879},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1708174836879},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1708174836879},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1708174836879},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1708174836879},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1708174836879},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1708174836879},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1708174836879},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1708174836879},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1708174836879},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1708174836879},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1708174836879},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1708174836879},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1708174836879},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1708174836879},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1708174836879},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1708174836879},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1708174836879},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1708174836879},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1708174836879},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1708174836879},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1708174836879},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1708174836879},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1708174836879},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1708174836879},{"_id":"public/about/index.html","hash":"501f6a0d5151c78f7be225633f91fd9c315f7233","modified":1709377356096},{"_id":"public/categories/index.html","hash":"9d18f99f7809600d6a7a5021e2010a170a40d169","modified":1709377356096},{"_id":"public/2024/02/18/专注和思考很重要/index.html","hash":"d772c3dd9cac9a2089bae9bc09f7e95927c95ef7","modified":1709377356096},{"_id":"public/2024/02/17/Linux安装Node/index.html","hash":"514a439d6498d3d075a48a96bdf0f5f0e882696b","modified":1709377356096},{"_id":"public/2016/04/17/说说/index.html","hash":"12466ff7109e83a0c1aa5bc04d621fa61d4777ad","modified":1709377356096},{"_id":"public/2015/11/27/自习的意义/index.html","hash":"62f1e4210c42ac96aac5c39679a97d2a0d0609ac","modified":1709377356096},{"_id":"public/2015/11/27/第一篇博文/index.html","hash":"fe2522825252279936c026ed5424310ced2b12bf","modified":1709377356096},{"_id":"public/archives/index.html","hash":"30b057f273cad6a48b201b8fb7e765ba67ef6e1e","modified":1709377356096},{"_id":"public/archives/page/2/index.html","hash":"9b2e80222c3b6a998a571ae8a71b168a63b72fd1","modified":1709377356096},{"_id":"public/archives/2015/index.html","hash":"8ac82a06d0b956b99256cbbe09618e60ccf5668e","modified":1709377356096},{"_id":"public/archives/2015/11/index.html","hash":"bdb6f3e1a83b6fb7b2eb270fc6f2a143b7dcc0fc","modified":1709377356096},{"_id":"public/archives/2015/12/index.html","hash":"217198ceb4797ae57536667bf0b88cbf642a7bf9","modified":1709377356096},{"_id":"public/archives/2016/index.html","hash":"a39bf61555c84f3ed92b26ece3ad9436af98d1f6","modified":1709377356096},{"_id":"public/archives/2016/03/index.html","hash":"c79f781589ce2172300be4f95d2abf9a15ead843","modified":1709377356096},{"_id":"public/archives/2016/04/index.html","hash":"7be5fec622088dbd7852e7b0436d69ede4b07bf7","modified":1709377356096},{"_id":"public/archives/2019/index.html","hash":"299b4c0db1d7ba87e44c8e42d21c7dfcb351d7f4","modified":1709377356096},{"_id":"public/archives/2019/07/index.html","hash":"0d6bb9c07a57cc1f9eba91f8cef102fa02543298","modified":1709377356096},{"_id":"public/archives/2024/index.html","hash":"146cf073702dad1d74b2cf7bccaf5ad52df66772","modified":1709377356096},{"_id":"public/archives/2024/02/index.html","hash":"9e785eb42e29cf7b2551f408e34620d3a801cfbd","modified":1709377356096},{"_id":"public/archives/2024/03/index.html","hash":"1c42553fcbd85b1898ca56381a0053a05d6bca2f","modified":1709377356096},{"_id":"public/categories/随笔/index.html","hash":"a5ffef051a63760931d8cd8ac7a790edceb6b60d","modified":1709377356096},{"_id":"public/categories/linux/index.html","hash":"051ac2b7b3ab5f326dc2324c463ba22302c907bf","modified":1709377356096},{"_id":"public/categories/Python/index.html","hash":"a10fd22020db20bdde2400140e8486a117bde255","modified":1709377356096},{"_id":"public/categories/感悟/index.html","hash":"7664ad5ed93117a10553ff6552aaa8acaf4bc68a","modified":1709377356096},{"_id":"public/page/2/index.html","hash":"4a7d863f20e0117c88ff531e35249bdf929db2ae","modified":1709377356096},{"_id":"public/tags/随笔/index.html","hash":"d5fb689a421e282549ebc69ff26ff08c433e2fb8","modified":1709377356096},{"_id":"public/tags/linux/index.html","hash":"1861e8ba532f39dcb196175196fe423501ea7224","modified":1709377356096},{"_id":"public/tags/Python/index.html","hash":"b091362391211320fe32c6024c2a3f13bc339238","modified":1709377356096},{"_id":"public/tags/windows/index.html","hash":"31fefd9527b0c9bb238d24db0b469bad43b86b34","modified":1709377356096},{"_id":"public/tags/linux-转载精选/index.html","hash":"a2cf1b5ce5353db8f5b491d6d31f874fd6407c05","modified":1709377356096},{"_id":"public/2024/03/02/命令行的艺术/index.html","hash":"6928385044c015b0a9caf664c458c5f7a25df3d8","modified":1709377356096},{"_id":"public/2024/02/18/WSL-在Windows下得到睥睨原生的Linux/index.html","hash":"3747b3b445f85954c3c0da4634c2b3fc766e523a","modified":1709377356096},{"_id":"public/2019/07/24/Python虚拟环境：virtualenv/index.html","hash":"aa9d0772f2e3235a04117e55afe4e8a2568d21ed","modified":1709377356096},{"_id":"public/2015/12/16/随笔/index.html","hash":"d65a97cf825692cfe5f1aa17ed5355953b6f7960","modified":1709377356096},{"_id":"public/2016/03/06/随笔/index.html","hash":"d4fd8d29130cd520964fa2ecb59635536c3ae43e","modified":1709377356096},{"_id":"public/2015/11/27/谈自律/index.html","hash":"13ef3371a59061233cb442cabed7a81392f3f7ac","modified":1709377356096},{"_id":"public/index.html","hash":"0396397626997e09f011776a48c712b0718624b2","modified":1709377356096},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1709377356096},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1709377356096},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1709377356096},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1709377356096},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1709377356096},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1709377356096},{"_id":"public/images/2024-02-17/Snipaste_2024-02-18_20-05-03.png","hash":"136ee0f782bb3352be1a369295023476dbee1472","modified":1709377356096},{"_id":"public/images/2024-02-18/wsl-home-command.png","hash":"b73d779f523752b39697f33696ca88276f1ca4ad","modified":1709377356096},{"_id":"public/images/2024-02-18/wsl-list.png","hash":"ff7246f379ee6dae78cb29701676cfed963ccb19","modified":1709377356096},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1709377356096},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1709377356096},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1709377356096},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1709377356096},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1709377356096},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1709377356096},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1709377356096},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1709377356096},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1709377356096},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1709377356096},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1709377356096},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1709377356096},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1709377356096},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1709377356096},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1709377356096},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1709377356096},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1709377356096},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1709377356096},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1709377356096},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1709377356096},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1709377356096},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1709377356096},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1709377356096},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1709377356096},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1709377356096},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1709377356096},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1709377356096},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1709377356096},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1709377356096},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1709377356096},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1709377356096},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1709377356096},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1709377356096},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1709377356096},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1709377356096},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1709377356096},{"_id":"public/css/main.css","hash":"8b58d3c5a76ff6cb6b42f8696957259730880543","modified":1709377356096},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1709377356096},{"_id":"public/images/2024-02-17/Snipaste_2024-02-18_20-01-57.png","hash":"5a1e057a0788eb39758b9cec27aeb3a953a70847","modified":1709377356096},{"_id":"public/images/2024-02-18/Snipaste_2024-02-18_22-06-50.png","hash":"8a68c96e0baf2f28e678446aa22fccfcb7a3afc7","modified":1709377356096}],"Category":[{"name":"随笔","_id":"clt9z55ma0004kogp2uleadv1"},{"name":"linux","_id":"clt9z55mf000okogp1kww581h"},{"name":"Python","_id":"clt9z55mh000wkogpfx6n5aek"},{"name":"感悟","_id":"clt9z55mi0015kogp0wr36vuu"}],"Data":[],"Page":[{"title":"About","date":"2024-02-18T11:55:30.000Z","_content":"\n# About\n\n## 说明:\n\n此页正在更新","source":"about/index.md","raw":"---\ntitle: About\ndate: 2024-02-18 19:55:30\n---\n\n# About\n\n## 说明:\n\n此页正在更新","updated":"2024-02-18T12:26:04.811Z","path":"about/index.html","comments":1,"layout":"page","_id":"clt9z55m40000kogp8pbwczfv","content":"<h1 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h2><p>此页正在更新</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h2><p>此页正在更新</p>\n"},{"title":"分类","date":"2024-02-18T12:37:28.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-02-18 20:37:28\ntype: \"categories\"\n---","updated":"2024-02-18T12:38:39.761Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clt9z55m80002kogp775o3ow6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"第一篇博文","date":"2015-11-27T01:39:00.000Z","_content":"\n\n不擅长写文的人，在最近看了个有影响力书的影响下产生了强烈的写文欲望。因为写作太少，写作的纲要都不会拟，不过没事，初生牛犊不怕虎，壮壮胆，不管怎么样第一篇都要写下去，写不好也没什么事。\n\n就先谈谈自己，也算自我介绍了。我是一名在读本科生，现在大四了，大学的最后一年，目前大四对于我来说完全不同于自己先前所认为的毕业年或者其他一看到\"大四\"这字眼就想到的概念。大四是对我而言是大学里面最棒、最充实的一年，原因无他，以前没有这么充实过，对于所处时间而言，并不觉得在大四这年意识到美好和充实是晚的，反正有一种强烈的幸运感。没有前三年的经历没有办法促成这美好的大四。\n\n自己算是一个性格风风火火（毛毛躁躁）的人，对事积极主动，什么都不懂也想去尝试，以现在的眼光看以前的自己，怎么看都觉得以前的自己不成熟和冒失，幸运的是种种经历磨砺下，自己的成长清晰可见。大一时期最骄傲自大，以为自己很厉害，因此吃了不少亏，这些经历为后来的成长沉淀下最底层的基石；大二时期意识到自己问题存在，第一次转变，开始放低自己结识了很多朋友；大三另一个转变时期，开始建立团队，在自我提升和与人交流上得到更好的提升；而现在大四，则是静下心来进行自我灵魂的升华期。我是一名独生子，环境所致我习惯一个人的世界，习惯了很多时侯自己基本都可以要什么有什么，而现在大四这个时候，与自己心灵进行深度对话，我选择了要成为一个品格优秀的人，\"可以不成为一个事业成功的人，但一定要成为一个品格优秀的人\"，很幸运自己能领会到这个，在求学过程中从来没有哪位老师或者课本上传授过这些，但自己还是学到了，记得一位记者问到一个成功教授是在什么时候学到一生中最宝贵的财富的，教授说是在幼儿园，记者追问是什么，教授答到在幼儿园能学到最基本的也是最重要的做人道理。如果做人，我们可以学习一辈子，我明白自己现在才是刚开始，要一直谦逊自己还可以更好。以前在思想潜伏的不好的品质需要慢慢改掉，一个思想品质好的人也是幸福会随时相伴的人，\"美好来自内心，不是外在\"。这是一个非常重要的时期，重要性在于处在心灵的改变期，而不是定位在学历的某个时期。\n\n一个人的思想通过文字可见一斑，我想我现在还不成熟严谨的思路已经暴露无疑。不过我丝毫不会介意，因为承认自己的不足是一个非常好的开始。第一篇博文，我想这是一个非常好的开始。","source":"_posts/2015/11/第一篇博文.md","raw":"---\ntitle: 第一篇博文\ndate: 2015-11-27 9:39:00\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n\n不擅长写文的人，在最近看了个有影响力书的影响下产生了强烈的写文欲望。因为写作太少，写作的纲要都不会拟，不过没事，初生牛犊不怕虎，壮壮胆，不管怎么样第一篇都要写下去，写不好也没什么事。\n\n就先谈谈自己，也算自我介绍了。我是一名在读本科生，现在大四了，大学的最后一年，目前大四对于我来说完全不同于自己先前所认为的毕业年或者其他一看到\"大四\"这字眼就想到的概念。大四是对我而言是大学里面最棒、最充实的一年，原因无他，以前没有这么充实过，对于所处时间而言，并不觉得在大四这年意识到美好和充实是晚的，反正有一种强烈的幸运感。没有前三年的经历没有办法促成这美好的大四。\n\n自己算是一个性格风风火火（毛毛躁躁）的人，对事积极主动，什么都不懂也想去尝试，以现在的眼光看以前的自己，怎么看都觉得以前的自己不成熟和冒失，幸运的是种种经历磨砺下，自己的成长清晰可见。大一时期最骄傲自大，以为自己很厉害，因此吃了不少亏，这些经历为后来的成长沉淀下最底层的基石；大二时期意识到自己问题存在，第一次转变，开始放低自己结识了很多朋友；大三另一个转变时期，开始建立团队，在自我提升和与人交流上得到更好的提升；而现在大四，则是静下心来进行自我灵魂的升华期。我是一名独生子，环境所致我习惯一个人的世界，习惯了很多时侯自己基本都可以要什么有什么，而现在大四这个时候，与自己心灵进行深度对话，我选择了要成为一个品格优秀的人，\"可以不成为一个事业成功的人，但一定要成为一个品格优秀的人\"，很幸运自己能领会到这个，在求学过程中从来没有哪位老师或者课本上传授过这些，但自己还是学到了，记得一位记者问到一个成功教授是在什么时候学到一生中最宝贵的财富的，教授说是在幼儿园，记者追问是什么，教授答到在幼儿园能学到最基本的也是最重要的做人道理。如果做人，我们可以学习一辈子，我明白自己现在才是刚开始，要一直谦逊自己还可以更好。以前在思想潜伏的不好的品质需要慢慢改掉，一个思想品质好的人也是幸福会随时相伴的人，\"美好来自内心，不是外在\"。这是一个非常重要的时期，重要性在于处在心灵的改变期，而不是定位在学历的某个时期。\n\n一个人的思想通过文字可见一斑，我想我现在还不成熟严谨的思路已经暴露无疑。不过我丝毫不会介意，因为承认自己的不足是一个非常好的开始。第一篇博文，我想这是一个非常好的开始。","slug":"第一篇博文","published":1,"updated":"2024-02-18T13:06:11.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55m60001kogp9cpk2tyd","content":"<p>不擅长写文的人，在最近看了个有影响力书的影响下产生了强烈的写文欲望。因为写作太少，写作的纲要都不会拟，不过没事，初生牛犊不怕虎，壮壮胆，不管怎么样第一篇都要写下去，写不好也没什么事。</p>\n<p>就先谈谈自己，也算自我介绍了。我是一名在读本科生，现在大四了，大学的最后一年，目前大四对于我来说完全不同于自己先前所认为的毕业年或者其他一看到”大四”这字眼就想到的概念。大四是对我而言是大学里面最棒、最充实的一年，原因无他，以前没有这么充实过，对于所处时间而言，并不觉得在大四这年意识到美好和充实是晚的，反正有一种强烈的幸运感。没有前三年的经历没有办法促成这美好的大四。</p>\n<p>自己算是一个性格风风火火（毛毛躁躁）的人，对事积极主动，什么都不懂也想去尝试，以现在的眼光看以前的自己，怎么看都觉得以前的自己不成熟和冒失，幸运的是种种经历磨砺下，自己的成长清晰可见。大一时期最骄傲自大，以为自己很厉害，因此吃了不少亏，这些经历为后来的成长沉淀下最底层的基石；大二时期意识到自己问题存在，第一次转变，开始放低自己结识了很多朋友；大三另一个转变时期，开始建立团队，在自我提升和与人交流上得到更好的提升；而现在大四，则是静下心来进行自我灵魂的升华期。我是一名独生子，环境所致我习惯一个人的世界，习惯了很多时侯自己基本都可以要什么有什么，而现在大四这个时候，与自己心灵进行深度对话，我选择了要成为一个品格优秀的人，”可以不成为一个事业成功的人，但一定要成为一个品格优秀的人”，很幸运自己能领会到这个，在求学过程中从来没有哪位老师或者课本上传授过这些，但自己还是学到了，记得一位记者问到一个成功教授是在什么时候学到一生中最宝贵的财富的，教授说是在幼儿园，记者追问是什么，教授答到在幼儿园能学到最基本的也是最重要的做人道理。如果做人，我们可以学习一辈子，我明白自己现在才是刚开始，要一直谦逊自己还可以更好。以前在思想潜伏的不好的品质需要慢慢改掉，一个思想品质好的人也是幸福会随时相伴的人，”美好来自内心，不是外在”。这是一个非常重要的时期，重要性在于处在心灵的改变期，而不是定位在学历的某个时期。</p>\n<p>一个人的思想通过文字可见一斑，我想我现在还不成熟严谨的思路已经暴露无疑。不过我丝毫不会介意，因为承认自己的不足是一个非常好的开始。第一篇博文，我想这是一个非常好的开始。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>不擅长写文的人，在最近看了个有影响力书的影响下产生了强烈的写文欲望。因为写作太少，写作的纲要都不会拟，不过没事，初生牛犊不怕虎，壮壮胆，不管怎么样第一篇都要写下去，写不好也没什么事。</p>\n<p>就先谈谈自己，也算自我介绍了。我是一名在读本科生，现在大四了，大学的最后一年，目前大四对于我来说完全不同于自己先前所认为的毕业年或者其他一看到”大四”这字眼就想到的概念。大四是对我而言是大学里面最棒、最充实的一年，原因无他，以前没有这么充实过，对于所处时间而言，并不觉得在大四这年意识到美好和充实是晚的，反正有一种强烈的幸运感。没有前三年的经历没有办法促成这美好的大四。</p>\n<p>自己算是一个性格风风火火（毛毛躁躁）的人，对事积极主动，什么都不懂也想去尝试，以现在的眼光看以前的自己，怎么看都觉得以前的自己不成熟和冒失，幸运的是种种经历磨砺下，自己的成长清晰可见。大一时期最骄傲自大，以为自己很厉害，因此吃了不少亏，这些经历为后来的成长沉淀下最底层的基石；大二时期意识到自己问题存在，第一次转变，开始放低自己结识了很多朋友；大三另一个转变时期，开始建立团队，在自我提升和与人交流上得到更好的提升；而现在大四，则是静下心来进行自我灵魂的升华期。我是一名独生子，环境所致我习惯一个人的世界，习惯了很多时侯自己基本都可以要什么有什么，而现在大四这个时候，与自己心灵进行深度对话，我选择了要成为一个品格优秀的人，”可以不成为一个事业成功的人，但一定要成为一个品格优秀的人”，很幸运自己能领会到这个，在求学过程中从来没有哪位老师或者课本上传授过这些，但自己还是学到了，记得一位记者问到一个成功教授是在什么时候学到一生中最宝贵的财富的，教授说是在幼儿园，记者追问是什么，教授答到在幼儿园能学到最基本的也是最重要的做人道理。如果做人，我们可以学习一辈子，我明白自己现在才是刚开始，要一直谦逊自己还可以更好。以前在思想潜伏的不好的品质需要慢慢改掉，一个思想品质好的人也是幸福会随时相伴的人，”美好来自内心，不是外在”。这是一个非常重要的时期，重要性在于处在心灵的改变期，而不是定位在学历的某个时期。</p>\n<p>一个人的思想通过文字可见一斑，我想我现在还不成熟严谨的思路已经暴露无疑。不过我丝毫不会介意，因为承认自己的不足是一个非常好的开始。第一篇博文，我想这是一个非常好的开始。</p>\n"},{"title":"自习的意义","date":"2015-11-27T03:39:00.000Z","_content":"\n\n自习室，这是一个安静向上的地方。在教室里，可以把自己从现实世界带到另一个世界，不管之前心中充满了什么复杂的情绪，教室安静的氛围人安静下来，融入这个地方，与内心对话，与一切平时难以触及的情绪对话。\n\n来到教室，看到很多努力的背影，各自忙碌，奋笔疾书，我想这可能就是将来会想到的学生时代最美画面了。记得是夏天第一次来到这个教室，转眼已经冬天了，教室里还是这群人，不同的衣服，相同的努力。觉得努力的人是最美的，觉得沉浸在书中的人是最美的，一个安静的地方，一坐就是半天，大脑里进行着各种演算，沉醉在书的海洋里。谁说书没有黄金屋，谁说书里没有颜如玉，书都能开启另一个世界了，还有什么不可能？\n\n我想表达是当我们安静下来所有的那个世界，人需要安静，安静可以让人无干扰的思考，思考可以可以解决问题或者规划归来。安静的氛围可以让人瞬间安静下来，一种无形的力量，就像是一种\"场\"，看不见摸不着，但确确实实有这种力量存在。在这种力量的驱使下，可以很快进入一种状态，即时之前极度悲伤亦或是极度不平静，这都没有什么，在安静的氛围里，静静梳理，这种简单的方式优化自己的内在。在这种状态里，时间的节奏似乎都被改变，忘记了时间，只记得提升的自己。\n\n阅读是一个输入的过程，也许一开始并不知道有什么特别，但是随着阅读的积累，观点的形成，角度的演化，一切井然有序。阅读的越多对知识越求之若渴，知道的越多越知道自己无知，知道的越多态度越谦卑。这是一个一举两得双丰收的过程，既收获知识又改变了心灵。","source":"_posts/2015/11/自习的意义.md","raw":"---\ntitle: 自习的意义\ndate: 2015-11-27 11:39:00\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n\n自习室，这是一个安静向上的地方。在教室里，可以把自己从现实世界带到另一个世界，不管之前心中充满了什么复杂的情绪，教室安静的氛围人安静下来，融入这个地方，与内心对话，与一切平时难以触及的情绪对话。\n\n来到教室，看到很多努力的背影，各自忙碌，奋笔疾书，我想这可能就是将来会想到的学生时代最美画面了。记得是夏天第一次来到这个教室，转眼已经冬天了，教室里还是这群人，不同的衣服，相同的努力。觉得努力的人是最美的，觉得沉浸在书中的人是最美的，一个安静的地方，一坐就是半天，大脑里进行着各种演算，沉醉在书的海洋里。谁说书没有黄金屋，谁说书里没有颜如玉，书都能开启另一个世界了，还有什么不可能？\n\n我想表达是当我们安静下来所有的那个世界，人需要安静，安静可以让人无干扰的思考，思考可以可以解决问题或者规划归来。安静的氛围可以让人瞬间安静下来，一种无形的力量，就像是一种\"场\"，看不见摸不着，但确确实实有这种力量存在。在这种力量的驱使下，可以很快进入一种状态，即时之前极度悲伤亦或是极度不平静，这都没有什么，在安静的氛围里，静静梳理，这种简单的方式优化自己的内在。在这种状态里，时间的节奏似乎都被改变，忘记了时间，只记得提升的自己。\n\n阅读是一个输入的过程，也许一开始并不知道有什么特别，但是随着阅读的积累，观点的形成，角度的演化，一切井然有序。阅读的越多对知识越求之若渴，知道的越多越知道自己无知，知道的越多态度越谦卑。这是一个一举两得双丰收的过程，既收获知识又改变了心灵。","slug":"自习的意义","published":1,"updated":"2024-02-18T13:06:29.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55m80003kogp7b912zey","content":"<p>自习室，这是一个安静向上的地方。在教室里，可以把自己从现实世界带到另一个世界，不管之前心中充满了什么复杂的情绪，教室安静的氛围人安静下来，融入这个地方，与内心对话，与一切平时难以触及的情绪对话。</p>\n<p>来到教室，看到很多努力的背影，各自忙碌，奋笔疾书，我想这可能就是将来会想到的学生时代最美画面了。记得是夏天第一次来到这个教室，转眼已经冬天了，教室里还是这群人，不同的衣服，相同的努力。觉得努力的人是最美的，觉得沉浸在书中的人是最美的，一个安静的地方，一坐就是半天，大脑里进行着各种演算，沉醉在书的海洋里。谁说书没有黄金屋，谁说书里没有颜如玉，书都能开启另一个世界了，还有什么不可能？</p>\n<p>我想表达是当我们安静下来所有的那个世界，人需要安静，安静可以让人无干扰的思考，思考可以可以解决问题或者规划归来。安静的氛围可以让人瞬间安静下来，一种无形的力量，就像是一种”场”，看不见摸不着，但确确实实有这种力量存在。在这种力量的驱使下，可以很快进入一种状态，即时之前极度悲伤亦或是极度不平静，这都没有什么，在安静的氛围里，静静梳理，这种简单的方式优化自己的内在。在这种状态里，时间的节奏似乎都被改变，忘记了时间，只记得提升的自己。</p>\n<p>阅读是一个输入的过程，也许一开始并不知道有什么特别，但是随着阅读的积累，观点的形成，角度的演化，一切井然有序。阅读的越多对知识越求之若渴，知道的越多越知道自己无知，知道的越多态度越谦卑。这是一个一举两得双丰收的过程，既收获知识又改变了心灵。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>自习室，这是一个安静向上的地方。在教室里，可以把自己从现实世界带到另一个世界，不管之前心中充满了什么复杂的情绪，教室安静的氛围人安静下来，融入这个地方，与内心对话，与一切平时难以触及的情绪对话。</p>\n<p>来到教室，看到很多努力的背影，各自忙碌，奋笔疾书，我想这可能就是将来会想到的学生时代最美画面了。记得是夏天第一次来到这个教室，转眼已经冬天了，教室里还是这群人，不同的衣服，相同的努力。觉得努力的人是最美的，觉得沉浸在书中的人是最美的，一个安静的地方，一坐就是半天，大脑里进行着各种演算，沉醉在书的海洋里。谁说书没有黄金屋，谁说书里没有颜如玉，书都能开启另一个世界了，还有什么不可能？</p>\n<p>我想表达是当我们安静下来所有的那个世界，人需要安静，安静可以让人无干扰的思考，思考可以可以解决问题或者规划归来。安静的氛围可以让人瞬间安静下来，一种无形的力量，就像是一种”场”，看不见摸不着，但确确实实有这种力量存在。在这种力量的驱使下，可以很快进入一种状态，即时之前极度悲伤亦或是极度不平静，这都没有什么，在安静的氛围里，静静梳理，这种简单的方式优化自己的内在。在这种状态里，时间的节奏似乎都被改变，忘记了时间，只记得提升的自己。</p>\n<p>阅读是一个输入的过程，也许一开始并不知道有什么特别，但是随着阅读的积累，观点的形成，角度的演化，一切井然有序。阅读的越多对知识越求之若渴，知道的越多越知道自己无知，知道的越多态度越谦卑。这是一个一举两得双丰收的过程，既收获知识又改变了心灵。</p>\n"},{"title":"谈自律","date":"2015-11-27T02:39:00.000Z","_content":"\n我是一个对军人无比崇敬和向往的人，痴迷军事题材的影视作品，军人铁的纪律和高效的执行力散发出的巨大的魅力，令我无法自拔。虽然没有成为军人，但还是尽心竭力的模仿学习，从军人身上可以学习到的太多了。军人高强度的训练，和三五好友交流都是敬佩和向往不已，也影响到我暗自下定决定做点什么，才能不枉知道这些。每个人心中都有目标都有梦想，或大或小，都在各自努力，每个人的方式都不尽相同。但思考而言，觉得如果能像军人靠拢，学习军人不折不扣的精神，无疑是一个捷径。对纪律如铁版的遵守执行，因为没有杂念，或许懒惰也就没有缝隙可钻了吧？！联系推广至我们一个人，我们很多人没有做好事的原因不是因为被生活的干扰影响，被琐碎消耗。如果我们坚定信念很多事的问题本该就不会出现，所谓借口不过是杂念的具化。\n\n俗话说好记性不如烂笔头，即使心中想法很多如果没有记录下来，也会忘，所以想要约束自己，首先得使用记录工具，用笔纸或者手机都无妨，将计划按照所想写下，然后重复观看一遍是否可以再优化，考虑好计划的可执行性。为了让计划可行性强，刚开始计划一定要定的简单，因为优秀的计划不是强度好，而是长期坚持累计的效果；为了让计划更有趣，可以模仿游戏的机制，制订个人计划的奖励机制，可以是积分成就的机制；为了让计划能具体落实，计划要尽可能的细致，只有具体到点才能画出线才能形成图。\n\n内心对自律的要求以及外界环境的需要，今年暑假开始了我的自律计划，我选择印象笔记电子记录工具，它可以跨平台同步，简而言之，不论我在哪，不论我使用什么设备，只要可以连接网络就同步我的笔记。为了更好的使用笔记工具，翻遍了印象笔记官方博客、贴吧、微信，了解到了很多关于笔记的好处，学会记录可以提升幸福感可以提升工作效率还有很多相关的，简而言之使用好了笔记可以改变一生（相比不实用任何笔记），这么多的因素下，更加坚定我要使用好笔记。在我的印象笔记中建立日记本、点子本、日常记录本等等好多，根据自己的特点\"独家打造\"笔记架构，在笔记中建立起了一条条的模板笔记。到今天差不多我的每天都能被我的笔记详细记录下来，包含日常消费、日常事项、与家人通话、健身记录、睡眠记录等等一应俱全。记录下的所有内容都有非常好的价值，可以用来分析反思自己，比如睡眠记录，用来检测以及提醒自己要拥有一个好的睡眠，然而这一切都只是准备工作。在自己正式施行计划后，看到了一个全新的自己，生活井井有条，对比以前的随意和凌乱这种差别简直不要太明显。\n\n还使用了一款叫aTimeLogger的APP，可以精确记录自己的时间并且可以随时显示自己的时间分布。记录自己的时间分配后发现的结果令自己都大吃一斤，每天正在学习的时间没有太多，娱乐上网以及其他所有琐碎占据了生活的大部分时间，这个冷酷的现实数据堪比当头一棒，比任何鸡汤都能刺激人，可以说是让人惊醒。只要养成记录的习惯就好，真实的自己的数据是自己最宝贵的资源。\n\n大四这年如此幸运懂得笔记的重要性，知道了自己该如何规划自己，也明显看到了自己发生了改变，如果有人问我是否需要机会重来一次，我会说不需要，因为现在的自己就很好，我很知足而且幸福。\n\n第二篇博文算是这样零零碎碎的写了吧，反正我的博客和豆瓣也没有什么粉丝，大胆的练练手能有改变和进步才是最重要的！","source":"_posts/2015/11/谈自律.md","raw":"---\ntitle: 谈自律\ndate: 2015-11-27 10:39:00\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n我是一个对军人无比崇敬和向往的人，痴迷军事题材的影视作品，军人铁的纪律和高效的执行力散发出的巨大的魅力，令我无法自拔。虽然没有成为军人，但还是尽心竭力的模仿学习，从军人身上可以学习到的太多了。军人高强度的训练，和三五好友交流都是敬佩和向往不已，也影响到我暗自下定决定做点什么，才能不枉知道这些。每个人心中都有目标都有梦想，或大或小，都在各自努力，每个人的方式都不尽相同。但思考而言，觉得如果能像军人靠拢，学习军人不折不扣的精神，无疑是一个捷径。对纪律如铁版的遵守执行，因为没有杂念，或许懒惰也就没有缝隙可钻了吧？！联系推广至我们一个人，我们很多人没有做好事的原因不是因为被生活的干扰影响，被琐碎消耗。如果我们坚定信念很多事的问题本该就不会出现，所谓借口不过是杂念的具化。\n\n俗话说好记性不如烂笔头，即使心中想法很多如果没有记录下来，也会忘，所以想要约束自己，首先得使用记录工具，用笔纸或者手机都无妨，将计划按照所想写下，然后重复观看一遍是否可以再优化，考虑好计划的可执行性。为了让计划可行性强，刚开始计划一定要定的简单，因为优秀的计划不是强度好，而是长期坚持累计的效果；为了让计划更有趣，可以模仿游戏的机制，制订个人计划的奖励机制，可以是积分成就的机制；为了让计划能具体落实，计划要尽可能的细致，只有具体到点才能画出线才能形成图。\n\n内心对自律的要求以及外界环境的需要，今年暑假开始了我的自律计划，我选择印象笔记电子记录工具，它可以跨平台同步，简而言之，不论我在哪，不论我使用什么设备，只要可以连接网络就同步我的笔记。为了更好的使用笔记工具，翻遍了印象笔记官方博客、贴吧、微信，了解到了很多关于笔记的好处，学会记录可以提升幸福感可以提升工作效率还有很多相关的，简而言之使用好了笔记可以改变一生（相比不实用任何笔记），这么多的因素下，更加坚定我要使用好笔记。在我的印象笔记中建立日记本、点子本、日常记录本等等好多，根据自己的特点\"独家打造\"笔记架构，在笔记中建立起了一条条的模板笔记。到今天差不多我的每天都能被我的笔记详细记录下来，包含日常消费、日常事项、与家人通话、健身记录、睡眠记录等等一应俱全。记录下的所有内容都有非常好的价值，可以用来分析反思自己，比如睡眠记录，用来检测以及提醒自己要拥有一个好的睡眠，然而这一切都只是准备工作。在自己正式施行计划后，看到了一个全新的自己，生活井井有条，对比以前的随意和凌乱这种差别简直不要太明显。\n\n还使用了一款叫aTimeLogger的APP，可以精确记录自己的时间并且可以随时显示自己的时间分布。记录自己的时间分配后发现的结果令自己都大吃一斤，每天正在学习的时间没有太多，娱乐上网以及其他所有琐碎占据了生活的大部分时间，这个冷酷的现实数据堪比当头一棒，比任何鸡汤都能刺激人，可以说是让人惊醒。只要养成记录的习惯就好，真实的自己的数据是自己最宝贵的资源。\n\n大四这年如此幸运懂得笔记的重要性，知道了自己该如何规划自己，也明显看到了自己发生了改变，如果有人问我是否需要机会重来一次，我会说不需要，因为现在的自己就很好，我很知足而且幸福。\n\n第二篇博文算是这样零零碎碎的写了吧，反正我的博客和豆瓣也没有什么粉丝，大胆的练练手能有改变和进步才是最重要的！","slug":"谈自律","published":1,"updated":"2024-02-18T13:06:10.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55ma0006kogpaqpg0gdc","content":"<p>我是一个对军人无比崇敬和向往的人，痴迷军事题材的影视作品，军人铁的纪律和高效的执行力散发出的巨大的魅力，令我无法自拔。虽然没有成为军人，但还是尽心竭力的模仿学习，从军人身上可以学习到的太多了。军人高强度的训练，和三五好友交流都是敬佩和向往不已，也影响到我暗自下定决定做点什么，才能不枉知道这些。每个人心中都有目标都有梦想，或大或小，都在各自努力，每个人的方式都不尽相同。但思考而言，觉得如果能像军人靠拢，学习军人不折不扣的精神，无疑是一个捷径。对纪律如铁版的遵守执行，因为没有杂念，或许懒惰也就没有缝隙可钻了吧？！联系推广至我们一个人，我们很多人没有做好事的原因不是因为被生活的干扰影响，被琐碎消耗。如果我们坚定信念很多事的问题本该就不会出现，所谓借口不过是杂念的具化。</p>\n<p>俗话说好记性不如烂笔头，即使心中想法很多如果没有记录下来，也会忘，所以想要约束自己，首先得使用记录工具，用笔纸或者手机都无妨，将计划按照所想写下，然后重复观看一遍是否可以再优化，考虑好计划的可执行性。为了让计划可行性强，刚开始计划一定要定的简单，因为优秀的计划不是强度好，而是长期坚持累计的效果；为了让计划更有趣，可以模仿游戏的机制，制订个人计划的奖励机制，可以是积分成就的机制；为了让计划能具体落实，计划要尽可能的细致，只有具体到点才能画出线才能形成图。</p>\n<p>内心对自律的要求以及外界环境的需要，今年暑假开始了我的自律计划，我选择印象笔记电子记录工具，它可以跨平台同步，简而言之，不论我在哪，不论我使用什么设备，只要可以连接网络就同步我的笔记。为了更好的使用笔记工具，翻遍了印象笔记官方博客、贴吧、微信，了解到了很多关于笔记的好处，学会记录可以提升幸福感可以提升工作效率还有很多相关的，简而言之使用好了笔记可以改变一生（相比不实用任何笔记），这么多的因素下，更加坚定我要使用好笔记。在我的印象笔记中建立日记本、点子本、日常记录本等等好多，根据自己的特点”独家打造”笔记架构，在笔记中建立起了一条条的模板笔记。到今天差不多我的每天都能被我的笔记详细记录下来，包含日常消费、日常事项、与家人通话、健身记录、睡眠记录等等一应俱全。记录下的所有内容都有非常好的价值，可以用来分析反思自己，比如睡眠记录，用来检测以及提醒自己要拥有一个好的睡眠，然而这一切都只是准备工作。在自己正式施行计划后，看到了一个全新的自己，生活井井有条，对比以前的随意和凌乱这种差别简直不要太明显。</p>\n<p>还使用了一款叫aTimeLogger的APP，可以精确记录自己的时间并且可以随时显示自己的时间分布。记录自己的时间分配后发现的结果令自己都大吃一斤，每天正在学习的时间没有太多，娱乐上网以及其他所有琐碎占据了生活的大部分时间，这个冷酷的现实数据堪比当头一棒，比任何鸡汤都能刺激人，可以说是让人惊醒。只要养成记录的习惯就好，真实的自己的数据是自己最宝贵的资源。</p>\n<p>大四这年如此幸运懂得笔记的重要性，知道了自己该如何规划自己，也明显看到了自己发生了改变，如果有人问我是否需要机会重来一次，我会说不需要，因为现在的自己就很好，我很知足而且幸福。</p>\n<p>第二篇博文算是这样零零碎碎的写了吧，反正我的博客和豆瓣也没有什么粉丝，大胆的练练手能有改变和进步才是最重要的！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是一个对军人无比崇敬和向往的人，痴迷军事题材的影视作品，军人铁的纪律和高效的执行力散发出的巨大的魅力，令我无法自拔。虽然没有成为军人，但还是尽心竭力的模仿学习，从军人身上可以学习到的太多了。军人高强度的训练，和三五好友交流都是敬佩和向往不已，也影响到我暗自下定决定做点什么，才能不枉知道这些。每个人心中都有目标都有梦想，或大或小，都在各自努力，每个人的方式都不尽相同。但思考而言，觉得如果能像军人靠拢，学习军人不折不扣的精神，无疑是一个捷径。对纪律如铁版的遵守执行，因为没有杂念，或许懒惰也就没有缝隙可钻了吧？！联系推广至我们一个人，我们很多人没有做好事的原因不是因为被生活的干扰影响，被琐碎消耗。如果我们坚定信念很多事的问题本该就不会出现，所谓借口不过是杂念的具化。</p>\n<p>俗话说好记性不如烂笔头，即使心中想法很多如果没有记录下来，也会忘，所以想要约束自己，首先得使用记录工具，用笔纸或者手机都无妨，将计划按照所想写下，然后重复观看一遍是否可以再优化，考虑好计划的可执行性。为了让计划可行性强，刚开始计划一定要定的简单，因为优秀的计划不是强度好，而是长期坚持累计的效果；为了让计划更有趣，可以模仿游戏的机制，制订个人计划的奖励机制，可以是积分成就的机制；为了让计划能具体落实，计划要尽可能的细致，只有具体到点才能画出线才能形成图。</p>\n<p>内心对自律的要求以及外界环境的需要，今年暑假开始了我的自律计划，我选择印象笔记电子记录工具，它可以跨平台同步，简而言之，不论我在哪，不论我使用什么设备，只要可以连接网络就同步我的笔记。为了更好的使用笔记工具，翻遍了印象笔记官方博客、贴吧、微信，了解到了很多关于笔记的好处，学会记录可以提升幸福感可以提升工作效率还有很多相关的，简而言之使用好了笔记可以改变一生（相比不实用任何笔记），这么多的因素下，更加坚定我要使用好笔记。在我的印象笔记中建立日记本、点子本、日常记录本等等好多，根据自己的特点”独家打造”笔记架构，在笔记中建立起了一条条的模板笔记。到今天差不多我的每天都能被我的笔记详细记录下来，包含日常消费、日常事项、与家人通话、健身记录、睡眠记录等等一应俱全。记录下的所有内容都有非常好的价值，可以用来分析反思自己，比如睡眠记录，用来检测以及提醒自己要拥有一个好的睡眠，然而这一切都只是准备工作。在自己正式施行计划后，看到了一个全新的自己，生活井井有条，对比以前的随意和凌乱这种差别简直不要太明显。</p>\n<p>还使用了一款叫aTimeLogger的APP，可以精确记录自己的时间并且可以随时显示自己的时间分布。记录自己的时间分配后发现的结果令自己都大吃一斤，每天正在学习的时间没有太多，娱乐上网以及其他所有琐碎占据了生活的大部分时间，这个冷酷的现实数据堪比当头一棒，比任何鸡汤都能刺激人，可以说是让人惊醒。只要养成记录的习惯就好，真实的自己的数据是自己最宝贵的资源。</p>\n<p>大四这年如此幸运懂得笔记的重要性，知道了自己该如何规划自己，也明显看到了自己发生了改变，如果有人问我是否需要机会重来一次，我会说不需要，因为现在的自己就很好，我很知足而且幸福。</p>\n<p>第二篇博文算是这样零零碎碎的写了吧，反正我的博客和豆瓣也没有什么粉丝，大胆的练练手能有改变和进步才是最重要的！</p>\n"},{"title":"专注和思考很重要","date":"2015-12-16T12:28:00.000Z","_content":"\n好久没有到自习室看书，自公考结束后整个人仿佛失去了主心骨，今天来到自习室享受安静，原来自己还能静下心看书。看了《丘吉尔传》好几个章节，看了自己印象笔记收藏的好多关于自我管理和读书的文章，吸收到了满满的正能量。连续好多天没有早起了，眼睛一睁就是中午，冬天早起真的不是个容易的事，最近在寝室比较多，寝室游戏氛围浓厚，让我怀念起了暑假一个人在学校的日子了，可能一个人安静的那种感觉更容易让内心平静吧，现在真的需要安静一下了，想出去旅游一次，想走走看看外面的世界。在学校就没怎么出去过，说是\"井底之蛙\"感觉倒是很恰当呢。\n大四狗，一只脚已经被拎了起来，要踏出校园。内心从一开始对社会的惧怕慢慢地变成期待，期望可以一展拳脚，和死党约好了离开了校园的第一步计划，现在默默等待学期期末考试结束获得自由。刚进入大四这年，心里都是各种留念和舍不得，现在这些心情终于变得平静，大学只是一站，就像以前已经走过的中学一样，没有不散的宴席，到离别时有这种没有任何遗憾的魄力或许比什么都好呢。之前想买单反在毕业前各种拍照的想法应该是要放弃了，时间还是快的让我没有时间再去做这些事，不过没事，眼睛向着前方，一个更好更精彩的明天可以让我忘记昨天，可能将来根本没有时间好好回忆这些昨天的事，不怕我有好多的日记，只要哪天想看过去一眼就能看到的。\n\n大学里觉得最好的经历，已经拥有了，和一群非常优秀的人一起共事过，组建了属于我们自己的团队，很独特很唯一，觉得更多的是幸运。相信这群小伙伴们毕业后都可以大放异彩，毕竟实力在这，哈哈。这个团队让我想了很多事，可能很多时候，带来的会超过本身。学校里有很多团体，很多都是经历了很多年，但是在时间的冲刷下，没有留下什么历史，这是最近一直在脑中思考的事，想到每个人本身，岁岁年年的经历除了年龄在长，形成的沉淀可能真的很少，团体是人和人实现1＋1大于2的地方，应该有沉淀有历史，让后面继承者有直接可以吸收的知识经验，很多经历完全可以保存做成案例供下面的借鉴吸收或者用来警示自己，带来了价值肯定会超过本身。于每个人本身而言相信，如果能够好好总结自己的失败和成功经验，小到避免错误再次发生，大到启发升华，意义价值巨大，以史为镜可以知兴替，这话不正是一个很好总结吗？现在是一个多么好的时代，科技进步，每个人都有智能手机或者其它智能设备，可以有文字、声音、图片、视频等等各种形式保留记忆，把现在所想所见保留，将来的时候看到再思考，原来以前自己是这么想的，在时间长河中产生的变化都很珍贵，如果有幸看到变化进行深刻的思考总结，明白变化何来，明白其中深层次的意义，相信这样的价值不可估量。\n\n第三方评测王自如的office tour昨天又看了一遍，他说表面上看起来市场玲琅满目，但是在每个细化领域里找东西发现每个领域里像样的产品又少的可怜。以前看王自如是因为觉得他的评测挺有趣挺对自己口的，现在觉得他还是一个很有思想的人，因为觉得一个人评测做的能带来其它思考启发这真的不容易。看似世界已经发展的很多大很全，实则很多还有很大进步空间，心有多大舞台就有一定会有多大。\n\n最近迷上MacBook，想买一台，自己纠结了很久决定分期，时而肯定时而又想放弃。肯定在能在最想拥有的时候可以拥有是一个很棒的事，以后有经济能力不一定想买了，可能就是一个遗憾了；想放弃是，这对现在的自己而言确实不理性消费，透支未来经济，这么年轻就这么多着实不理性。朋友说我一件简单的事搞的这么纠结，纠结带来的负面效应都大于购买产生的负面效应了，一点魄力都没有。自己的这个性格真的不好，如此没有魄力以后怎么成大事？\n\n自己是一个如此矛盾的人，有时很懒轻松的就选择了堕落，但内心会过意不去，于是就内心开始挣扎开始自我约束，开始放弃于懒惰斗争，如果说这是一个革命，那么这场革命台辛苦了，革命了很多年才取得点滴成效。我想以后自己肯定是一个工作狂什么的，因为自己闲下来就觉得在堕落。现在一直在记录时间，按照每天要做的事划分类别，分别记录时间，有娱乐时间，有学习时间，手机APP可以即使看到各类别的时间占比情况（饼状图），每次看到饼图大大的一块都是娱乐上网什么就特别不舒服，已然成为强迫症。不过因此，现在的时间意识很强烈，做什么事对时间量的控制都是很自然，利弊共存。\n\n说到强迫，有些做法很想提提，因为觉得真的很好。使用电子笔记将生活进行数据化，记录睡眠时间，记录消费，记录待办清单，记录想法等等，一切现在所能想到的都开始记录开始存档。这让自己可以清晰明白自己做了什么和需要做什么，供自己分析，这些原始数据有助于总结沉淀，这和前面提到沉淀又对应了起来，仿佛一切都相通的，开始记录开始思考开始在意想法之后发现如果可以总结思考形成思路，以后遇到相同或相似问题定可以以很高的效率去解决，好处显而易见。 ","source":"_posts/2015/12/随笔.md","raw":"---\ntitle: 专注和思考很重要\ndate: 2015-12-16 20:28:00\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n好久没有到自习室看书，自公考结束后整个人仿佛失去了主心骨，今天来到自习室享受安静，原来自己还能静下心看书。看了《丘吉尔传》好几个章节，看了自己印象笔记收藏的好多关于自我管理和读书的文章，吸收到了满满的正能量。连续好多天没有早起了，眼睛一睁就是中午，冬天早起真的不是个容易的事，最近在寝室比较多，寝室游戏氛围浓厚，让我怀念起了暑假一个人在学校的日子了，可能一个人安静的那种感觉更容易让内心平静吧，现在真的需要安静一下了，想出去旅游一次，想走走看看外面的世界。在学校就没怎么出去过，说是\"井底之蛙\"感觉倒是很恰当呢。\n大四狗，一只脚已经被拎了起来，要踏出校园。内心从一开始对社会的惧怕慢慢地变成期待，期望可以一展拳脚，和死党约好了离开了校园的第一步计划，现在默默等待学期期末考试结束获得自由。刚进入大四这年，心里都是各种留念和舍不得，现在这些心情终于变得平静，大学只是一站，就像以前已经走过的中学一样，没有不散的宴席，到离别时有这种没有任何遗憾的魄力或许比什么都好呢。之前想买单反在毕业前各种拍照的想法应该是要放弃了，时间还是快的让我没有时间再去做这些事，不过没事，眼睛向着前方，一个更好更精彩的明天可以让我忘记昨天，可能将来根本没有时间好好回忆这些昨天的事，不怕我有好多的日记，只要哪天想看过去一眼就能看到的。\n\n大学里觉得最好的经历，已经拥有了，和一群非常优秀的人一起共事过，组建了属于我们自己的团队，很独特很唯一，觉得更多的是幸运。相信这群小伙伴们毕业后都可以大放异彩，毕竟实力在这，哈哈。这个团队让我想了很多事，可能很多时候，带来的会超过本身。学校里有很多团体，很多都是经历了很多年，但是在时间的冲刷下，没有留下什么历史，这是最近一直在脑中思考的事，想到每个人本身，岁岁年年的经历除了年龄在长，形成的沉淀可能真的很少，团体是人和人实现1＋1大于2的地方，应该有沉淀有历史，让后面继承者有直接可以吸收的知识经验，很多经历完全可以保存做成案例供下面的借鉴吸收或者用来警示自己，带来了价值肯定会超过本身。于每个人本身而言相信，如果能够好好总结自己的失败和成功经验，小到避免错误再次发生，大到启发升华，意义价值巨大，以史为镜可以知兴替，这话不正是一个很好总结吗？现在是一个多么好的时代，科技进步，每个人都有智能手机或者其它智能设备，可以有文字、声音、图片、视频等等各种形式保留记忆，把现在所想所见保留，将来的时候看到再思考，原来以前自己是这么想的，在时间长河中产生的变化都很珍贵，如果有幸看到变化进行深刻的思考总结，明白变化何来，明白其中深层次的意义，相信这样的价值不可估量。\n\n第三方评测王自如的office tour昨天又看了一遍，他说表面上看起来市场玲琅满目，但是在每个细化领域里找东西发现每个领域里像样的产品又少的可怜。以前看王自如是因为觉得他的评测挺有趣挺对自己口的，现在觉得他还是一个很有思想的人，因为觉得一个人评测做的能带来其它思考启发这真的不容易。看似世界已经发展的很多大很全，实则很多还有很大进步空间，心有多大舞台就有一定会有多大。\n\n最近迷上MacBook，想买一台，自己纠结了很久决定分期，时而肯定时而又想放弃。肯定在能在最想拥有的时候可以拥有是一个很棒的事，以后有经济能力不一定想买了，可能就是一个遗憾了；想放弃是，这对现在的自己而言确实不理性消费，透支未来经济，这么年轻就这么多着实不理性。朋友说我一件简单的事搞的这么纠结，纠结带来的负面效应都大于购买产生的负面效应了，一点魄力都没有。自己的这个性格真的不好，如此没有魄力以后怎么成大事？\n\n自己是一个如此矛盾的人，有时很懒轻松的就选择了堕落，但内心会过意不去，于是就内心开始挣扎开始自我约束，开始放弃于懒惰斗争，如果说这是一个革命，那么这场革命台辛苦了，革命了很多年才取得点滴成效。我想以后自己肯定是一个工作狂什么的，因为自己闲下来就觉得在堕落。现在一直在记录时间，按照每天要做的事划分类别，分别记录时间，有娱乐时间，有学习时间，手机APP可以即使看到各类别的时间占比情况（饼状图），每次看到饼图大大的一块都是娱乐上网什么就特别不舒服，已然成为强迫症。不过因此，现在的时间意识很强烈，做什么事对时间量的控制都是很自然，利弊共存。\n\n说到强迫，有些做法很想提提，因为觉得真的很好。使用电子笔记将生活进行数据化，记录睡眠时间，记录消费，记录待办清单，记录想法等等，一切现在所能想到的都开始记录开始存档。这让自己可以清晰明白自己做了什么和需要做什么，供自己分析，这些原始数据有助于总结沉淀，这和前面提到沉淀又对应了起来，仿佛一切都相通的，开始记录开始思考开始在意想法之后发现如果可以总结思考形成思路，以后遇到相同或相似问题定可以以很高的效率去解决，好处显而易见。 ","slug":"随笔","published":1,"updated":"2024-02-18T13:06:00.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55mb0007kogpdqp13v4q","content":"<p>好久没有到自习室看书，自公考结束后整个人仿佛失去了主心骨，今天来到自习室享受安静，原来自己还能静下心看书。看了《丘吉尔传》好几个章节，看了自己印象笔记收藏的好多关于自我管理和读书的文章，吸收到了满满的正能量。连续好多天没有早起了，眼睛一睁就是中午，冬天早起真的不是个容易的事，最近在寝室比较多，寝室游戏氛围浓厚，让我怀念起了暑假一个人在学校的日子了，可能一个人安静的那种感觉更容易让内心平静吧，现在真的需要安静一下了，想出去旅游一次，想走走看看外面的世界。在学校就没怎么出去过，说是”井底之蛙”感觉倒是很恰当呢。<br>大四狗，一只脚已经被拎了起来，要踏出校园。内心从一开始对社会的惧怕慢慢地变成期待，期望可以一展拳脚，和死党约好了离开了校园的第一步计划，现在默默等待学期期末考试结束获得自由。刚进入大四这年，心里都是各种留念和舍不得，现在这些心情终于变得平静，大学只是一站，就像以前已经走过的中学一样，没有不散的宴席，到离别时有这种没有任何遗憾的魄力或许比什么都好呢。之前想买单反在毕业前各种拍照的想法应该是要放弃了，时间还是快的让我没有时间再去做这些事，不过没事，眼睛向着前方，一个更好更精彩的明天可以让我忘记昨天，可能将来根本没有时间好好回忆这些昨天的事，不怕我有好多的日记，只要哪天想看过去一眼就能看到的。</p>\n<p>大学里觉得最好的经历，已经拥有了，和一群非常优秀的人一起共事过，组建了属于我们自己的团队，很独特很唯一，觉得更多的是幸运。相信这群小伙伴们毕业后都可以大放异彩，毕竟实力在这，哈哈。这个团队让我想了很多事，可能很多时候，带来的会超过本身。学校里有很多团体，很多都是经历了很多年，但是在时间的冲刷下，没有留下什么历史，这是最近一直在脑中思考的事，想到每个人本身，岁岁年年的经历除了年龄在长，形成的沉淀可能真的很少，团体是人和人实现1＋1大于2的地方，应该有沉淀有历史，让后面继承者有直接可以吸收的知识经验，很多经历完全可以保存做成案例供下面的借鉴吸收或者用来警示自己，带来了价值肯定会超过本身。于每个人本身而言相信，如果能够好好总结自己的失败和成功经验，小到避免错误再次发生，大到启发升华，意义价值巨大，以史为镜可以知兴替，这话不正是一个很好总结吗？现在是一个多么好的时代，科技进步，每个人都有智能手机或者其它智能设备，可以有文字、声音、图片、视频等等各种形式保留记忆，把现在所想所见保留，将来的时候看到再思考，原来以前自己是这么想的，在时间长河中产生的变化都很珍贵，如果有幸看到变化进行深刻的思考总结，明白变化何来，明白其中深层次的意义，相信这样的价值不可估量。</p>\n<p>第三方评测王自如的office tour昨天又看了一遍，他说表面上看起来市场玲琅满目，但是在每个细化领域里找东西发现每个领域里像样的产品又少的可怜。以前看王自如是因为觉得他的评测挺有趣挺对自己口的，现在觉得他还是一个很有思想的人，因为觉得一个人评测做的能带来其它思考启发这真的不容易。看似世界已经发展的很多大很全，实则很多还有很大进步空间，心有多大舞台就有一定会有多大。</p>\n<p>最近迷上MacBook，想买一台，自己纠结了很久决定分期，时而肯定时而又想放弃。肯定在能在最想拥有的时候可以拥有是一个很棒的事，以后有经济能力不一定想买了，可能就是一个遗憾了；想放弃是，这对现在的自己而言确实不理性消费，透支未来经济，这么年轻就这么多着实不理性。朋友说我一件简单的事搞的这么纠结，纠结带来的负面效应都大于购买产生的负面效应了，一点魄力都没有。自己的这个性格真的不好，如此没有魄力以后怎么成大事？</p>\n<p>自己是一个如此矛盾的人，有时很懒轻松的就选择了堕落，但内心会过意不去，于是就内心开始挣扎开始自我约束，开始放弃于懒惰斗争，如果说这是一个革命，那么这场革命台辛苦了，革命了很多年才取得点滴成效。我想以后自己肯定是一个工作狂什么的，因为自己闲下来就觉得在堕落。现在一直在记录时间，按照每天要做的事划分类别，分别记录时间，有娱乐时间，有学习时间，手机APP可以即使看到各类别的时间占比情况（饼状图），每次看到饼图大大的一块都是娱乐上网什么就特别不舒服，已然成为强迫症。不过因此，现在的时间意识很强烈，做什么事对时间量的控制都是很自然，利弊共存。</p>\n<p>说到强迫，有些做法很想提提，因为觉得真的很好。使用电子笔记将生活进行数据化，记录睡眠时间，记录消费，记录待办清单，记录想法等等，一切现在所能想到的都开始记录开始存档。这让自己可以清晰明白自己做了什么和需要做什么，供自己分析，这些原始数据有助于总结沉淀，这和前面提到沉淀又对应了起来，仿佛一切都相通的，开始记录开始思考开始在意想法之后发现如果可以总结思考形成思路，以后遇到相同或相似问题定可以以很高的效率去解决，好处显而易见。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>好久没有到自习室看书，自公考结束后整个人仿佛失去了主心骨，今天来到自习室享受安静，原来自己还能静下心看书。看了《丘吉尔传》好几个章节，看了自己印象笔记收藏的好多关于自我管理和读书的文章，吸收到了满满的正能量。连续好多天没有早起了，眼睛一睁就是中午，冬天早起真的不是个容易的事，最近在寝室比较多，寝室游戏氛围浓厚，让我怀念起了暑假一个人在学校的日子了，可能一个人安静的那种感觉更容易让内心平静吧，现在真的需要安静一下了，想出去旅游一次，想走走看看外面的世界。在学校就没怎么出去过，说是”井底之蛙”感觉倒是很恰当呢。<br>大四狗，一只脚已经被拎了起来，要踏出校园。内心从一开始对社会的惧怕慢慢地变成期待，期望可以一展拳脚，和死党约好了离开了校园的第一步计划，现在默默等待学期期末考试结束获得自由。刚进入大四这年，心里都是各种留念和舍不得，现在这些心情终于变得平静，大学只是一站，就像以前已经走过的中学一样，没有不散的宴席，到离别时有这种没有任何遗憾的魄力或许比什么都好呢。之前想买单反在毕业前各种拍照的想法应该是要放弃了，时间还是快的让我没有时间再去做这些事，不过没事，眼睛向着前方，一个更好更精彩的明天可以让我忘记昨天，可能将来根本没有时间好好回忆这些昨天的事，不怕我有好多的日记，只要哪天想看过去一眼就能看到的。</p>\n<p>大学里觉得最好的经历，已经拥有了，和一群非常优秀的人一起共事过，组建了属于我们自己的团队，很独特很唯一，觉得更多的是幸运。相信这群小伙伴们毕业后都可以大放异彩，毕竟实力在这，哈哈。这个团队让我想了很多事，可能很多时候，带来的会超过本身。学校里有很多团体，很多都是经历了很多年，但是在时间的冲刷下，没有留下什么历史，这是最近一直在脑中思考的事，想到每个人本身，岁岁年年的经历除了年龄在长，形成的沉淀可能真的很少，团体是人和人实现1＋1大于2的地方，应该有沉淀有历史，让后面继承者有直接可以吸收的知识经验，很多经历完全可以保存做成案例供下面的借鉴吸收或者用来警示自己，带来了价值肯定会超过本身。于每个人本身而言相信，如果能够好好总结自己的失败和成功经验，小到避免错误再次发生，大到启发升华，意义价值巨大，以史为镜可以知兴替，这话不正是一个很好总结吗？现在是一个多么好的时代，科技进步，每个人都有智能手机或者其它智能设备，可以有文字、声音、图片、视频等等各种形式保留记忆，把现在所想所见保留，将来的时候看到再思考，原来以前自己是这么想的，在时间长河中产生的变化都很珍贵，如果有幸看到变化进行深刻的思考总结，明白变化何来，明白其中深层次的意义，相信这样的价值不可估量。</p>\n<p>第三方评测王自如的office tour昨天又看了一遍，他说表面上看起来市场玲琅满目，但是在每个细化领域里找东西发现每个领域里像样的产品又少的可怜。以前看王自如是因为觉得他的评测挺有趣挺对自己口的，现在觉得他还是一个很有思想的人，因为觉得一个人评测做的能带来其它思考启发这真的不容易。看似世界已经发展的很多大很全，实则很多还有很大进步空间，心有多大舞台就有一定会有多大。</p>\n<p>最近迷上MacBook，想买一台，自己纠结了很久决定分期，时而肯定时而又想放弃。肯定在能在最想拥有的时候可以拥有是一个很棒的事，以后有经济能力不一定想买了，可能就是一个遗憾了；想放弃是，这对现在的自己而言确实不理性消费，透支未来经济，这么年轻就这么多着实不理性。朋友说我一件简单的事搞的这么纠结，纠结带来的负面效应都大于购买产生的负面效应了，一点魄力都没有。自己的这个性格真的不好，如此没有魄力以后怎么成大事？</p>\n<p>自己是一个如此矛盾的人，有时很懒轻松的就选择了堕落，但内心会过意不去，于是就内心开始挣扎开始自我约束，开始放弃于懒惰斗争，如果说这是一个革命，那么这场革命台辛苦了，革命了很多年才取得点滴成效。我想以后自己肯定是一个工作狂什么的，因为自己闲下来就觉得在堕落。现在一直在记录时间，按照每天要做的事划分类别，分别记录时间，有娱乐时间，有学习时间，手机APP可以即使看到各类别的时间占比情况（饼状图），每次看到饼图大大的一块都是娱乐上网什么就特别不舒服，已然成为强迫症。不过因此，现在的时间意识很强烈，做什么事对时间量的控制都是很自然，利弊共存。</p>\n<p>说到强迫，有些做法很想提提，因为觉得真的很好。使用电子笔记将生活进行数据化，记录睡眠时间，记录消费，记录待办清单，记录想法等等，一切现在所能想到的都开始记录开始存档。这让自己可以清晰明白自己做了什么和需要做什么，供自己分析，这些原始数据有助于总结沉淀，这和前面提到沉淀又对应了起来，仿佛一切都相通的，开始记录开始思考开始在意想法之后发现如果可以总结思考形成思路，以后遇到相同或相似问题定可以以很高的效率去解决，好处显而易见。 </p>\n"},{"title":"随笔","date":"2016-03-05T16:35:00.000Z","_content":"\n在家自律性完全不足，效率不高，相比在学校哪个状态好真的难说哪个是好的，在学校好的是自由到努力克制自己，所有的事都是自己做，从生活细事中获得自我意识锻炼，缺点是容易受到周围不是很好的环境的影响，即所谓的同化；在家好的是所有的生活的事不用自己去承担，妈妈做好一切，缺点也是明显增加了自己的惰性，在学校能做的非常好的写作习惯，在家缺无法开始，相比学校而言自己写的太少了，练习写作的重要性不言而喻，很多时候却无奈话说了却没有去做。自己一直强调自律，却一直做不到做不好，又特么印证了强调的正是所欠缺的这个说法。\n说说团队吧，人总是离不开自己做的事，说的总是自己，人是自私的，但没有办法，思维就是如此。微传媒团队微信部成立了图文小组，计划从内部开始创造一些压力因素来让驱动团队进步，拉了觉得好的两个人，从技能学习开始抓，事实发展和想象的不同，不得不说遇到的阻力让我想放弃，分出精力去盯人明显是个很累的事，要制定适合人的计划，人的接受能力不同要考虑很多因素，千思万虑还是在计划发出后发生了很多问题，两个人就能发生个人事务多导致无法分出时间去学习的事，这对我打击其实还是很大的，在钉钉群聊我说我是直男，用这些话来为自己耿直不亲近的说话语气辩解，总是想着那个方向，一直想着那个方向发现方向在，真实的步伐却迈的很少。以前在团队的时候我是态度很随和的，可能因为孙和钮是两个可爱的软妹子的缘故，我基本没说过什么，两个女生做事做人都很让人放心，现在人换了，需要重新去了解，这个过程难免发生问题，这些问题我从没想过会发生，没有准备，导致自己被打击，另一方面自己无法料及这些事，叫始料未及吧。还是从自己找原因吧，想想现在应该怎么去做，今天下午帮文静做了几个图，发现自己的图片生产力很低了，连续有3天自己没有好好学习php相关的知识了，一天24小时，上午睡掉，下午要慢慢进入状态，有效学习时间是那么短，过了那个时间思绪就飘走，干其他事了，整个一天累积下来沉淀变的好少，自己却一个Plan，我是这么觉得的。想把图文1组的给推掉，不知道为什么现在这么想法总是出现，盯人这事不擅长，自己却不能迎难而上？有两个事自己现在要确定一下，一精力是否真的是那么有限？带好图文1组和自己php工程师的计划能否兼得？带图文1组真的对学习php造成了影响？二自己现在每日时间利用率能否好好的提一下，如通过锻炼身体减少睡眠时间这种方式让整个人的生物规律变的最高效？表面而言两个事都是显而易见的，我现在需要的解决的问题不是认识问题的存在而是如何用能让自己接受的符合发展规律的方式改变自己。\n改变自己要好好谈谈又是一个复杂的问题，像绕人的哲学？（笑）改变自己，拿剁鸡做比方，第一有个想法，然后计划，拆解成步骤，一步一步解决，哈哈，说到步骤又自然想计算机了，编程思维！原来一切都是相似相通的哈！这几天我需要做什么？大致这样吧，第一步整理好笔记，制定计划框架，可以单独建立一个笔记本，笔记本作为目录，每个部分开始逐渐完善，像是画画，画出枝干，然后每个枝干去完善，最后完成这个作品。无论作品最终好坏，坚持下去不断填充修改优化，结果肯定好的，坚持最重要！","source":"_posts/2016/03/随笔.md","raw":"---\ntitle: 随笔\ndate: 2016-03-06 00:35:00\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n在家自律性完全不足，效率不高，相比在学校哪个状态好真的难说哪个是好的，在学校好的是自由到努力克制自己，所有的事都是自己做，从生活细事中获得自我意识锻炼，缺点是容易受到周围不是很好的环境的影响，即所谓的同化；在家好的是所有的生活的事不用自己去承担，妈妈做好一切，缺点也是明显增加了自己的惰性，在学校能做的非常好的写作习惯，在家缺无法开始，相比学校而言自己写的太少了，练习写作的重要性不言而喻，很多时候却无奈话说了却没有去做。自己一直强调自律，却一直做不到做不好，又特么印证了强调的正是所欠缺的这个说法。\n说说团队吧，人总是离不开自己做的事，说的总是自己，人是自私的，但没有办法，思维就是如此。微传媒团队微信部成立了图文小组，计划从内部开始创造一些压力因素来让驱动团队进步，拉了觉得好的两个人，从技能学习开始抓，事实发展和想象的不同，不得不说遇到的阻力让我想放弃，分出精力去盯人明显是个很累的事，要制定适合人的计划，人的接受能力不同要考虑很多因素，千思万虑还是在计划发出后发生了很多问题，两个人就能发生个人事务多导致无法分出时间去学习的事，这对我打击其实还是很大的，在钉钉群聊我说我是直男，用这些话来为自己耿直不亲近的说话语气辩解，总是想着那个方向，一直想着那个方向发现方向在，真实的步伐却迈的很少。以前在团队的时候我是态度很随和的，可能因为孙和钮是两个可爱的软妹子的缘故，我基本没说过什么，两个女生做事做人都很让人放心，现在人换了，需要重新去了解，这个过程难免发生问题，这些问题我从没想过会发生，没有准备，导致自己被打击，另一方面自己无法料及这些事，叫始料未及吧。还是从自己找原因吧，想想现在应该怎么去做，今天下午帮文静做了几个图，发现自己的图片生产力很低了，连续有3天自己没有好好学习php相关的知识了，一天24小时，上午睡掉，下午要慢慢进入状态，有效学习时间是那么短，过了那个时间思绪就飘走，干其他事了，整个一天累积下来沉淀变的好少，自己却一个Plan，我是这么觉得的。想把图文1组的给推掉，不知道为什么现在这么想法总是出现，盯人这事不擅长，自己却不能迎难而上？有两个事自己现在要确定一下，一精力是否真的是那么有限？带好图文1组和自己php工程师的计划能否兼得？带图文1组真的对学习php造成了影响？二自己现在每日时间利用率能否好好的提一下，如通过锻炼身体减少睡眠时间这种方式让整个人的生物规律变的最高效？表面而言两个事都是显而易见的，我现在需要的解决的问题不是认识问题的存在而是如何用能让自己接受的符合发展规律的方式改变自己。\n改变自己要好好谈谈又是一个复杂的问题，像绕人的哲学？（笑）改变自己，拿剁鸡做比方，第一有个想法，然后计划，拆解成步骤，一步一步解决，哈哈，说到步骤又自然想计算机了，编程思维！原来一切都是相似相通的哈！这几天我需要做什么？大致这样吧，第一步整理好笔记，制定计划框架，可以单独建立一个笔记本，笔记本作为目录，每个部分开始逐渐完善，像是画画，画出枝干，然后每个枝干去完善，最后完成这个作品。无论作品最终好坏，坚持下去不断填充修改优化，结果肯定好的，坚持最重要！","slug":"随笔","published":1,"updated":"2024-02-18T13:08:25.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55mc0008kogp29ve2lge","content":"<p>在家自律性完全不足，效率不高，相比在学校哪个状态好真的难说哪个是好的，在学校好的是自由到努力克制自己，所有的事都是自己做，从生活细事中获得自我意识锻炼，缺点是容易受到周围不是很好的环境的影响，即所谓的同化；在家好的是所有的生活的事不用自己去承担，妈妈做好一切，缺点也是明显增加了自己的惰性，在学校能做的非常好的写作习惯，在家缺无法开始，相比学校而言自己写的太少了，练习写作的重要性不言而喻，很多时候却无奈话说了却没有去做。自己一直强调自律，却一直做不到做不好，又特么印证了强调的正是所欠缺的这个说法。<br>说说团队吧，人总是离不开自己做的事，说的总是自己，人是自私的，但没有办法，思维就是如此。微传媒团队微信部成立了图文小组，计划从内部开始创造一些压力因素来让驱动团队进步，拉了觉得好的两个人，从技能学习开始抓，事实发展和想象的不同，不得不说遇到的阻力让我想放弃，分出精力去盯人明显是个很累的事，要制定适合人的计划，人的接受能力不同要考虑很多因素，千思万虑还是在计划发出后发生了很多问题，两个人就能发生个人事务多导致无法分出时间去学习的事，这对我打击其实还是很大的，在钉钉群聊我说我是直男，用这些话来为自己耿直不亲近的说话语气辩解，总是想着那个方向，一直想着那个方向发现方向在，真实的步伐却迈的很少。以前在团队的时候我是态度很随和的，可能因为孙和钮是两个可爱的软妹子的缘故，我基本没说过什么，两个女生做事做人都很让人放心，现在人换了，需要重新去了解，这个过程难免发生问题，这些问题我从没想过会发生，没有准备，导致自己被打击，另一方面自己无法料及这些事，叫始料未及吧。还是从自己找原因吧，想想现在应该怎么去做，今天下午帮文静做了几个图，发现自己的图片生产力很低了，连续有3天自己没有好好学习php相关的知识了，一天24小时，上午睡掉，下午要慢慢进入状态，有效学习时间是那么短，过了那个时间思绪就飘走，干其他事了，整个一天累积下来沉淀变的好少，自己却一个Plan，我是这么觉得的。想把图文1组的给推掉，不知道为什么现在这么想法总是出现，盯人这事不擅长，自己却不能迎难而上？有两个事自己现在要确定一下，一精力是否真的是那么有限？带好图文1组和自己php工程师的计划能否兼得？带图文1组真的对学习php造成了影响？二自己现在每日时间利用率能否好好的提一下，如通过锻炼身体减少睡眠时间这种方式让整个人的生物规律变的最高效？表面而言两个事都是显而易见的，我现在需要的解决的问题不是认识问题的存在而是如何用能让自己接受的符合发展规律的方式改变自己。<br>改变自己要好好谈谈又是一个复杂的问题，像绕人的哲学？（笑）改变自己，拿剁鸡做比方，第一有个想法，然后计划，拆解成步骤，一步一步解决，哈哈，说到步骤又自然想计算机了，编程思维！原来一切都是相似相通的哈！这几天我需要做什么？大致这样吧，第一步整理好笔记，制定计划框架，可以单独建立一个笔记本，笔记本作为目录，每个部分开始逐渐完善，像是画画，画出枝干，然后每个枝干去完善，最后完成这个作品。无论作品最终好坏，坚持下去不断填充修改优化，结果肯定好的，坚持最重要！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在家自律性完全不足，效率不高，相比在学校哪个状态好真的难说哪个是好的，在学校好的是自由到努力克制自己，所有的事都是自己做，从生活细事中获得自我意识锻炼，缺点是容易受到周围不是很好的环境的影响，即所谓的同化；在家好的是所有的生活的事不用自己去承担，妈妈做好一切，缺点也是明显增加了自己的惰性，在学校能做的非常好的写作习惯，在家缺无法开始，相比学校而言自己写的太少了，练习写作的重要性不言而喻，很多时候却无奈话说了却没有去做。自己一直强调自律，却一直做不到做不好，又特么印证了强调的正是所欠缺的这个说法。<br>说说团队吧，人总是离不开自己做的事，说的总是自己，人是自私的，但没有办法，思维就是如此。微传媒团队微信部成立了图文小组，计划从内部开始创造一些压力因素来让驱动团队进步，拉了觉得好的两个人，从技能学习开始抓，事实发展和想象的不同，不得不说遇到的阻力让我想放弃，分出精力去盯人明显是个很累的事，要制定适合人的计划，人的接受能力不同要考虑很多因素，千思万虑还是在计划发出后发生了很多问题，两个人就能发生个人事务多导致无法分出时间去学习的事，这对我打击其实还是很大的，在钉钉群聊我说我是直男，用这些话来为自己耿直不亲近的说话语气辩解，总是想着那个方向，一直想着那个方向发现方向在，真实的步伐却迈的很少。以前在团队的时候我是态度很随和的，可能因为孙和钮是两个可爱的软妹子的缘故，我基本没说过什么，两个女生做事做人都很让人放心，现在人换了，需要重新去了解，这个过程难免发生问题，这些问题我从没想过会发生，没有准备，导致自己被打击，另一方面自己无法料及这些事，叫始料未及吧。还是从自己找原因吧，想想现在应该怎么去做，今天下午帮文静做了几个图，发现自己的图片生产力很低了，连续有3天自己没有好好学习php相关的知识了，一天24小时，上午睡掉，下午要慢慢进入状态，有效学习时间是那么短，过了那个时间思绪就飘走，干其他事了，整个一天累积下来沉淀变的好少，自己却一个Plan，我是这么觉得的。想把图文1组的给推掉，不知道为什么现在这么想法总是出现，盯人这事不擅长，自己却不能迎难而上？有两个事自己现在要确定一下，一精力是否真的是那么有限？带好图文1组和自己php工程师的计划能否兼得？带图文1组真的对学习php造成了影响？二自己现在每日时间利用率能否好好的提一下，如通过锻炼身体减少睡眠时间这种方式让整个人的生物规律变的最高效？表面而言两个事都是显而易见的，我现在需要的解决的问题不是认识问题的存在而是如何用能让自己接受的符合发展规律的方式改变自己。<br>改变自己要好好谈谈又是一个复杂的问题，像绕人的哲学？（笑）改变自己，拿剁鸡做比方，第一有个想法，然后计划，拆解成步骤，一步一步解决，哈哈，说到步骤又自然想计算机了，编程思维！原来一切都是相似相通的哈！这几天我需要做什么？大致这样吧，第一步整理好笔记，制定计划框架，可以单独建立一个笔记本，笔记本作为目录，每个部分开始逐渐完善，像是画画，画出枝干，然后每个枝干去完善，最后完成这个作品。无论作品最终好坏，坚持下去不断填充修改优化，结果肯定好的，坚持最重要！</p>\n"},{"title":"说说","date":"2016-04-17T10:11:00.000Z","_content":"\nPHP 工程师计划，完成度 70%，进度有了， 但感觉事实不好。因为好多案例自己还不能独立的去完成。内心有些浮躁，总喜欢跳着看视频，看的多，实际完成的很少。","source":"_posts/2016/04/说说.md","raw":"---\ntitle: 说说\ndate: 2016-04-17 18:11:00\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\nPHP 工程师计划，完成度 70%，进度有了， 但感觉事实不好。因为好多案例自己还不能独立的去完成。内心有些浮躁，总喜欢跳着看视频，看的多，实际完成的很少。","slug":"说说","published":1,"updated":"2024-02-18T13:08:18.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55md000ckogpe0kv81i3","content":"<p>PHP 工程师计划，完成度 70%，进度有了， 但感觉事实不好。因为好多案例自己还不能独立的去完成。内心有些浮躁，总喜欢跳着看视频，看的多，实际完成的很少。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>PHP 工程师计划，完成度 70%，进度有了， 但感觉事实不好。因为好多案例自己还不能独立的去完成。内心有些浮躁，总喜欢跳着看视频，看的多，实际完成的很少。</p>\n"},{"title":"Linux安装Node.js","date":"2024-02-17T12:49:05.000Z","_content":"\n1、官网下载：\n[https://nodejs.cn/download/](https://nodejs.cn/download/)\n\n![](/images/2024-02-17/Snipaste_2024-02-18_20-01-57.png)\n\n下载命令：\n```bash\nwget https://npmmirror.com/mirrors/node/v18.19.0/node-v18.19.0-linux-x64.tar.xz\n```\n\n![](/images/2024-02-17/Snipaste_2024-02-18_20-05-03.png)\n\n2、解压：\n```bash\ntar -xf node-v18.19.0-linux-x64.tar.xz\n```\n\n3、确认：\n```bash\ncd node-v18.19.0-linux-x64\n./bin/node -v\n```\n\n4、改名并移动\n```bash\nmv node-v18.19.0-linux-x64/* /usr/local/nodejs\n```\n\n5、建立软连接\n```bash\nsudo ln -s /usr/local/nodejs/bin/node /usr/local/bin/\nsudo ln -s /usr/local/nodejs/bin/npm /usr/local/bin/\n```\n\n6、最终确认\n```bash\nnode -v\nnpm -v\n```","source":"_posts/2024/02/Linux安装Node.md","raw":"---\ntitle: Linux安装Node.js\ndate: 2024-02-17 20:49:05\ntags: \n- linux\ncategories:\n- linux\n---\n\n1、官网下载：\n[https://nodejs.cn/download/](https://nodejs.cn/download/)\n\n![](/images/2024-02-17/Snipaste_2024-02-18_20-01-57.png)\n\n下载命令：\n```bash\nwget https://npmmirror.com/mirrors/node/v18.19.0/node-v18.19.0-linux-x64.tar.xz\n```\n\n![](/images/2024-02-17/Snipaste_2024-02-18_20-05-03.png)\n\n2、解压：\n```bash\ntar -xf node-v18.19.0-linux-x64.tar.xz\n```\n\n3、确认：\n```bash\ncd node-v18.19.0-linux-x64\n./bin/node -v\n```\n\n4、改名并移动\n```bash\nmv node-v18.19.0-linux-x64/* /usr/local/nodejs\n```\n\n5、建立软连接\n```bash\nsudo ln -s /usr/local/nodejs/bin/node /usr/local/bin/\nsudo ln -s /usr/local/nodejs/bin/npm /usr/local/bin/\n```\n\n6、最终确认\n```bash\nnode -v\nnpm -v\n```","slug":"Linux安装Node","published":1,"updated":"2024-02-18T12:40:33.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55me000ekogp2ljw9v6m","content":"<p>1、官网下载：<br><a href=\"https://nodejs.cn/download/\">https://nodejs.cn/download/</a></p>\n<p><img src=\"/images/2024-02-17/Snipaste_2024-02-18_20-01-57.png\"></p>\n<p>下载命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://npmmirror.com/mirrors/node/v18.19.0/node-v18.19.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/2024-02-17/Snipaste_2024-02-18_20-05-03.png\"></p>\n<p>2、解压：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf node-v18.19.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n\n<p>3、确认：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node-v18.19.0-linux-x64</span><br><span class=\"line\">./bin/node -v</span><br></pre></td></tr></table></figure>\n\n<p>4、改名并移动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> node-v18.19.0-linux-x64/* /usr/local/nodejs</span><br></pre></td></tr></table></figure>\n\n<p>5、建立软连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/local/nodejs/bin/node /usr/local/bin/</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/local/nodejs/bin/npm /usr/local/bin/</span><br></pre></td></tr></table></figure>\n\n<p>6、最终确认</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>1、官网下载：<br><a href=\"https://nodejs.cn/download/\">https://nodejs.cn/download/</a></p>\n<p><img src=\"/images/2024-02-17/Snipaste_2024-02-18_20-01-57.png\"></p>\n<p>下载命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://npmmirror.com/mirrors/node/v18.19.0/node-v18.19.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/2024-02-17/Snipaste_2024-02-18_20-05-03.png\"></p>\n<p>2、解压：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xf node-v18.19.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n\n<p>3、确认：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node-v18.19.0-linux-x64</span><br><span class=\"line\">./bin/node -v</span><br></pre></td></tr></table></figure>\n\n<p>4、改名并移动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> node-v18.19.0-linux-x64/* /usr/local/nodejs</span><br></pre></td></tr></table></figure>\n\n<p>5、建立软连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/local/nodejs/bin/node /usr/local/bin/</span><br><span class=\"line\">sudo <span class=\"built_in\">ln</span> -s /usr/local/nodejs/bin/npm /usr/local/bin/</span><br></pre></td></tr></table></figure>\n\n<p>6、最终确认</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>"},{"title":"Python虚拟环境：virtualenv","date":"2019-07-24T13:03:00.000Z","_content":"\n\n## 为何要虚拟环境\n在开发Python应用程序的时候，系统安装的Python3只有一个版本：3.4。所有第三方的包都会被pip安装到Python3的site-packages目录下。\n\n如果我们要同时开发多个应用程序，那这些应用程序都会共用一个Python，就是安装在系统的Python 3。如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？\n\n这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。**virtualenv**就是用来为一个应用创建一套“隔离”的Python运行环境。\n## 安装virtualenv\n首先，我们用pip安装virtualenv：\n```bash\npip install virtualenv\n```\n然后，假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做：\n\n## 使用步骤\n### 创建项目目录\n```bash\nmkdir myproject\n```\n### 创建运行环境，命名为venv\n```bash\nvirtualenv --no-site-packages venv\n```\n\n会看到提示:\n```bash\nUsing base prefix '/usr/local/.../Python.framework/Versions/3.4'\nNew python executable in venv/bin/python3.4\nAlso creating executable in venv/bin/python\nInstalling setuptools, pip, wheel...done.\n```\n\n\n命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数``--no-site-packages``，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。\n\n新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境：\n```bash\nsource venv/bin/activate\n```\n\n注意到命令提示符变了，有个``(venv)``前缀，表示当前环境是一个名为``venv``的Python环境。\n\n下面正常安装各种第三方包，并运行python命令。\n\n在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。\n\n### 退出当前的venv环境\n使用``deactivate``命令：\n```bash\ndeactivate \n```\n\n此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行。\n\n完全可以针对每个应用创建独立的Python运行环境，这样就可以对每个应用的Python环境进行隔离。\n\n## 原理\nvirtualenv是如何创建“独立”的Python运行环境的呢？\n原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source venv/bin/activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。\n","source":"_posts/2019/07/Python虚拟环境：virtualenv.md","raw":"---\ntitle: Python虚拟环境：virtualenv\ndate: 2019-07-24 21:03:00\ntags:\n- Python\ncategories:\n- Python\n---\n\n\n## 为何要虚拟环境\n在开发Python应用程序的时候，系统安装的Python3只有一个版本：3.4。所有第三方的包都会被pip安装到Python3的site-packages目录下。\n\n如果我们要同时开发多个应用程序，那这些应用程序都会共用一个Python，就是安装在系统的Python 3。如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？\n\n这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。**virtualenv**就是用来为一个应用创建一套“隔离”的Python运行环境。\n## 安装virtualenv\n首先，我们用pip安装virtualenv：\n```bash\npip install virtualenv\n```\n然后，假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做：\n\n## 使用步骤\n### 创建项目目录\n```bash\nmkdir myproject\n```\n### 创建运行环境，命名为venv\n```bash\nvirtualenv --no-site-packages venv\n```\n\n会看到提示:\n```bash\nUsing base prefix '/usr/local/.../Python.framework/Versions/3.4'\nNew python executable in venv/bin/python3.4\nAlso creating executable in venv/bin/python\nInstalling setuptools, pip, wheel...done.\n```\n\n\n命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数``--no-site-packages``，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。\n\n新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境：\n```bash\nsource venv/bin/activate\n```\n\n注意到命令提示符变了，有个``(venv)``前缀，表示当前环境是一个名为``venv``的Python环境。\n\n下面正常安装各种第三方包，并运行python命令。\n\n在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。\n\n### 退出当前的venv环境\n使用``deactivate``命令：\n```bash\ndeactivate \n```\n\n此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行。\n\n完全可以针对每个应用创建独立的Python运行环境，这样就可以对每个应用的Python环境进行隔离。\n\n## 原理\nvirtualenv是如何创建“独立”的Python运行环境的呢？\n原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source venv/bin/activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。\n","slug":"Python虚拟环境：virtualenv","published":1,"updated":"2024-02-18T13:07:14.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55mf000jkogp84vk8pui","content":"<h2 id=\"为何要虚拟环境\"><a href=\"#为何要虚拟环境\" class=\"headerlink\" title=\"为何要虚拟环境\"></a>为何要虚拟环境</h2><p>在开发Python应用程序的时候，系统安装的Python3只有一个版本：3.4。所有第三方的包都会被pip安装到Python3的site-packages目录下。</p>\n<p>如果我们要同时开发多个应用程序，那这些应用程序都会共用一个Python，就是安装在系统的Python 3。如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？</p>\n<p>这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。<strong>virtualenv</strong>就是用来为一个应用创建一套“隔离”的Python运行环境。</p>\n<h2 id=\"安装virtualenv\"><a href=\"#安装virtualenv\" class=\"headerlink\" title=\"安装virtualenv\"></a>安装virtualenv</h2><p>首先，我们用pip安装virtualenv：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv</span><br></pre></td></tr></table></figure>\n<p>然后，假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做：</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"创建项目目录\"><a href=\"#创建项目目录\" class=\"headerlink\" title=\"创建项目目录\"></a>创建项目目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> myproject</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建运行环境，命名为venv\"><a href=\"#创建运行环境，命名为venv\" class=\"headerlink\" title=\"创建运行环境，命名为venv\"></a>创建运行环境，命名为venv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure>\n\n<p>会看到提示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using base prefix <span class=\"string\">&#x27;/usr/local/.../Python.framework/Versions/3.4&#x27;</span></span><br><span class=\"line\">New python executable <span class=\"keyword\">in</span> venv/bin/python3.4</span><br><span class=\"line\">Also creating executable <span class=\"keyword\">in</span> venv/bin/python</span><br><span class=\"line\">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure>\n\n\n<p>命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数<code>--no-site-packages</code>，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。</p>\n<p>新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure>\n\n<p>注意到命令提示符变了，有个<code>(venv)</code>前缀，表示当前环境是一个名为<code>venv</code>的Python环境。</p>\n<p>下面正常安装各种第三方包，并运行python命令。</p>\n<p>在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。</p>\n<h3 id=\"退出当前的venv环境\"><a href=\"#退出当前的venv环境\" class=\"headerlink\" title=\"退出当前的venv环境\"></a>退出当前的venv环境</h3><p>使用<code>deactivate</code>命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate </span><br></pre></td></tr></table></figure>\n\n<p>此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行。</p>\n<p>完全可以针对每个应用创建独立的Python运行环境，这样就可以对每个应用的Python环境进行隔离。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>virtualenv是如何创建“独立”的Python运行环境的呢？<br>原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source venv&#x2F;bin&#x2F;activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为何要虚拟环境\"><a href=\"#为何要虚拟环境\" class=\"headerlink\" title=\"为何要虚拟环境\"></a>为何要虚拟环境</h2><p>在开发Python应用程序的时候，系统安装的Python3只有一个版本：3.4。所有第三方的包都会被pip安装到Python3的site-packages目录下。</p>\n<p>如果我们要同时开发多个应用程序，那这些应用程序都会共用一个Python，就是安装在系统的Python 3。如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？</p>\n<p>这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。<strong>virtualenv</strong>就是用来为一个应用创建一套“隔离”的Python运行环境。</p>\n<h2 id=\"安装virtualenv\"><a href=\"#安装virtualenv\" class=\"headerlink\" title=\"安装virtualenv\"></a>安装virtualenv</h2><p>首先，我们用pip安装virtualenv：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv</span><br></pre></td></tr></table></figure>\n<p>然后，假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做：</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><h3 id=\"创建项目目录\"><a href=\"#创建项目目录\" class=\"headerlink\" title=\"创建项目目录\"></a>创建项目目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> myproject</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建运行环境，命名为venv\"><a href=\"#创建运行环境，命名为venv\" class=\"headerlink\" title=\"创建运行环境，命名为venv\"></a>创建运行环境，命名为venv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure>\n\n<p>会看到提示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using base prefix <span class=\"string\">&#x27;/usr/local/.../Python.framework/Versions/3.4&#x27;</span></span><br><span class=\"line\">New python executable <span class=\"keyword\">in</span> venv/bin/python3.4</span><br><span class=\"line\">Also creating executable <span class=\"keyword\">in</span> venv/bin/python</span><br><span class=\"line\">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure>\n\n\n<p>命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数<code>--no-site-packages</code>，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。</p>\n<p>新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure>\n\n<p>注意到命令提示符变了，有个<code>(venv)</code>前缀，表示当前环境是一个名为<code>venv</code>的Python环境。</p>\n<p>下面正常安装各种第三方包，并运行python命令。</p>\n<p>在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。</p>\n<h3 id=\"退出当前的venv环境\"><a href=\"#退出当前的venv环境\" class=\"headerlink\" title=\"退出当前的venv环境\"></a>退出当前的venv环境</h3><p>使用<code>deactivate</code>命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate </span><br></pre></td></tr></table></figure>\n\n<p>此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行。</p>\n<p>完全可以针对每个应用创建独立的Python运行环境，这样就可以对每个应用的Python环境进行隔离。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>virtualenv是如何创建“独立”的Python运行环境的呢？<br>原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source venv&#x2F;bin&#x2F;activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。</p>\n"},{"title":"WSL:在Windows下得到睥睨原生的Linux","date":"2024-02-18T13:50:28.000Z","_content":"\n## 什么是 WSL？\n全称``Windows Subsystem for Linux``,是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件 (ELF 格式) 的兼容层。\n\n### 区别于虚拟机\n使用 VM 虚拟机时通常性能较低，因为需要大量的资源来运行虚拟实例，并且两个操作系统之间缺乏集成，其实仍在运行孤立的单独操作系统。\n\nWSL 解决了这些问题，它集成了 Windows 和 Linux，使用的资源占用量要少得多，与传统的虚拟机相比，所需的资源（CPU、内存、存储）更少。 以令人难以置信的快速高效的性能，在 Linux 开发环境旁边运行 Windows Office 应用、开发工具、游戏等。\n\n## 原理\nWSL 最初于 2016 年 8 月推出（Windows 10 版本 1607），使用的是现在称为 “WSL 1” 的体系结构。 WSL 1 作为一个转换层运行，在 Windows 内核上使用一个 Linux 内核接口。 可将 WSL 1 视为一个兼容层，用于模拟在 Windows 环境中运行 Linux 二进制文件的系统调用。\n\n2019 年 5 月，Microsoft 发布了 WSL 2，引入了对 WSL 体系结构的重要更改，包括在一部分 Hyper-V 功能中使用真正的 Linux 内核。 WSL 2 体系结构显著提高了性能，增加了系统调用速度，并减少了限制。 WSL 2 现在是在 Windows 上安装 Linux 分发版时使用的默认体系结构。\n\n## 安装 WSL\n通过在管理员 PowerShell 或 Windows 命令提示符中输入 ``wsl --install``，然后重启计算机，可以安装运行 WSL 所需的全部内容。\n\n> 必须确保运行的是 Windows 11 或 Windows 10 版本 2004+（内部版本 19041 及更高版本），才能运行 WSL install 命令。\n\n### wsl --install 命令执行以下操作\n\n1. 启用虚拟机平台可选组件并安装 WSL 核心二进制文件。\n2. 从Microsoft Store 下载 WSL 包（包括最新的 Linux 内核），以便在更新和安全修补程序可用时推送它们。\n3. 下载并安装 Linux。\n\n### 安装其他 Linux 发行版\n认情况下，wsl --install 命令将安装 Linux 的 Ubuntu 发行版。 可以从 Microsoft Store 中提供的列表中选择其他 Linux 发行版。 还可以与默认的 Ubuntu 一起安装其他 Linux 发行版。\n\n若要查看当前通过应用商店提供了哪些发行版，请输入命令：``wsl --list --online``\n\n![](/images/2024-02-18/wsl-list.png)\n\n若要选择用其他版本替换默认的 Ubuntu 发行版，或者要从应用商店安装其他发行版，使用命令：``wsl --install --distribution <Distribution Name>``\n\n## 基本 WSL 命令\n\n1. ``wsl --version`` 检查已安装的 WSL 版本。\n2. ``wsl --update`` 命令确保拥有最新的 WSL 更新。\n3. ``wsl --list --verbose`` 列出当前已安装的 Linux 发行版。\n4. ``wsl ~`` 命令，打开 Bash 命令行（从设为默认版本的 Linux 发行版），转到 WSL 文件系统的主目录。提示符会变成 Bash，看起来像这样：``<user>@<CPU-name>:~$``。 输入 pwd 命令以确认目录路径现在类似于 ``/home/<username>``。 输入 ``explorer.exe .`` 命令，在 Windows 文件资源管理器中打开该目录（一定要包含句点，它表示打开当前目录路径）。 打开后，可以确认文件路径看起来像这样：``\\\\wsl.localhost\\Ubuntu\\home\\<username>``。\n\n![](/images/2024-02-18/wsl-home-command.png)\n\n5. ``exit`` 从 Bash 命令行退出，返回到 PowerShell。\n\n## 使用 WSL 扩展的 Visual Studio Code\n\nVS Code 使用 WSL 扩展，此扩展使 VS Code 的用户界面能够在 Windows 上运行，命令、扩展、调试、代码自动完成、Lint 分析等都在 WSL Linux 安装上运行。 \n\n![](/images/2024-02-18/Snipaste_2024-02-18_22-06-50.png)","source":"_posts/2024/02/WSL-在Windows下得到睥睨原生的Linux.md","raw":"---\ntitle: WSL:在Windows下得到睥睨原生的Linux\ndate: 2024-02-18 21:50:28\ntags:\n- windows\n- linux\ncategories: linux\n---\n\n## 什么是 WSL？\n全称``Windows Subsystem for Linux``,是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件 (ELF 格式) 的兼容层。\n\n### 区别于虚拟机\n使用 VM 虚拟机时通常性能较低，因为需要大量的资源来运行虚拟实例，并且两个操作系统之间缺乏集成，其实仍在运行孤立的单独操作系统。\n\nWSL 解决了这些问题，它集成了 Windows 和 Linux，使用的资源占用量要少得多，与传统的虚拟机相比，所需的资源（CPU、内存、存储）更少。 以令人难以置信的快速高效的性能，在 Linux 开发环境旁边运行 Windows Office 应用、开发工具、游戏等。\n\n## 原理\nWSL 最初于 2016 年 8 月推出（Windows 10 版本 1607），使用的是现在称为 “WSL 1” 的体系结构。 WSL 1 作为一个转换层运行，在 Windows 内核上使用一个 Linux 内核接口。 可将 WSL 1 视为一个兼容层，用于模拟在 Windows 环境中运行 Linux 二进制文件的系统调用。\n\n2019 年 5 月，Microsoft 发布了 WSL 2，引入了对 WSL 体系结构的重要更改，包括在一部分 Hyper-V 功能中使用真正的 Linux 内核。 WSL 2 体系结构显著提高了性能，增加了系统调用速度，并减少了限制。 WSL 2 现在是在 Windows 上安装 Linux 分发版时使用的默认体系结构。\n\n## 安装 WSL\n通过在管理员 PowerShell 或 Windows 命令提示符中输入 ``wsl --install``，然后重启计算机，可以安装运行 WSL 所需的全部内容。\n\n> 必须确保运行的是 Windows 11 或 Windows 10 版本 2004+（内部版本 19041 及更高版本），才能运行 WSL install 命令。\n\n### wsl --install 命令执行以下操作\n\n1. 启用虚拟机平台可选组件并安装 WSL 核心二进制文件。\n2. 从Microsoft Store 下载 WSL 包（包括最新的 Linux 内核），以便在更新和安全修补程序可用时推送它们。\n3. 下载并安装 Linux。\n\n### 安装其他 Linux 发行版\n认情况下，wsl --install 命令将安装 Linux 的 Ubuntu 发行版。 可以从 Microsoft Store 中提供的列表中选择其他 Linux 发行版。 还可以与默认的 Ubuntu 一起安装其他 Linux 发行版。\n\n若要查看当前通过应用商店提供了哪些发行版，请输入命令：``wsl --list --online``\n\n![](/images/2024-02-18/wsl-list.png)\n\n若要选择用其他版本替换默认的 Ubuntu 发行版，或者要从应用商店安装其他发行版，使用命令：``wsl --install --distribution <Distribution Name>``\n\n## 基本 WSL 命令\n\n1. ``wsl --version`` 检查已安装的 WSL 版本。\n2. ``wsl --update`` 命令确保拥有最新的 WSL 更新。\n3. ``wsl --list --verbose`` 列出当前已安装的 Linux 发行版。\n4. ``wsl ~`` 命令，打开 Bash 命令行（从设为默认版本的 Linux 发行版），转到 WSL 文件系统的主目录。提示符会变成 Bash，看起来像这样：``<user>@<CPU-name>:~$``。 输入 pwd 命令以确认目录路径现在类似于 ``/home/<username>``。 输入 ``explorer.exe .`` 命令，在 Windows 文件资源管理器中打开该目录（一定要包含句点，它表示打开当前目录路径）。 打开后，可以确认文件路径看起来像这样：``\\\\wsl.localhost\\Ubuntu\\home\\<username>``。\n\n![](/images/2024-02-18/wsl-home-command.png)\n\n5. ``exit`` 从 Bash 命令行退出，返回到 PowerShell。\n\n## 使用 WSL 扩展的 Visual Studio Code\n\nVS Code 使用 WSL 扩展，此扩展使 VS Code 的用户界面能够在 Windows 上运行，命令、扩展、调试、代码自动完成、Lint 分析等都在 WSL Linux 安装上运行。 \n\n![](/images/2024-02-18/Snipaste_2024-02-18_22-06-50.png)","slug":"WSL-在Windows下得到睥睨原生的Linux","published":1,"updated":"2024-02-18T14:09:45.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55mf000mkogp59vi46ux","content":"<h2 id=\"什么是-WSL？\"><a href=\"#什么是-WSL？\" class=\"headerlink\" title=\"什么是 WSL？\"></a>什么是 WSL？</h2><p>全称<code>Windows Subsystem for Linux</code>,是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件 (ELF 格式) 的兼容层。</p>\n<h3 id=\"区别于虚拟机\"><a href=\"#区别于虚拟机\" class=\"headerlink\" title=\"区别于虚拟机\"></a>区别于虚拟机</h3><p>使用 VM 虚拟机时通常性能较低，因为需要大量的资源来运行虚拟实例，并且两个操作系统之间缺乏集成，其实仍在运行孤立的单独操作系统。</p>\n<p>WSL 解决了这些问题，它集成了 Windows 和 Linux，使用的资源占用量要少得多，与传统的虚拟机相比，所需的资源（CPU、内存、存储）更少。 以令人难以置信的快速高效的性能，在 Linux 开发环境旁边运行 Windows Office 应用、开发工具、游戏等。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>WSL 最初于 2016 年 8 月推出（Windows 10 版本 1607），使用的是现在称为 “WSL 1” 的体系结构。 WSL 1 作为一个转换层运行，在 Windows 内核上使用一个 Linux 内核接口。 可将 WSL 1 视为一个兼容层，用于模拟在 Windows 环境中运行 Linux 二进制文件的系统调用。</p>\n<p>2019 年 5 月，Microsoft 发布了 WSL 2，引入了对 WSL 体系结构的重要更改，包括在一部分 Hyper-V 功能中使用真正的 Linux 内核。 WSL 2 体系结构显著提高了性能，增加了系统调用速度，并减少了限制。 WSL 2 现在是在 Windows 上安装 Linux 分发版时使用的默认体系结构。</p>\n<h2 id=\"安装-WSL\"><a href=\"#安装-WSL\" class=\"headerlink\" title=\"安装 WSL\"></a>安装 WSL</h2><p>通过在管理员 PowerShell 或 Windows 命令提示符中输入 <code>wsl --install</code>，然后重启计算机，可以安装运行 WSL 所需的全部内容。</p>\n<blockquote>\n<p>必须确保运行的是 Windows 11 或 Windows 10 版本 2004+（内部版本 19041 及更高版本），才能运行 WSL install 命令。</p>\n</blockquote>\n<h3 id=\"wsl-–install-命令执行以下操作\"><a href=\"#wsl-–install-命令执行以下操作\" class=\"headerlink\" title=\"wsl –install 命令执行以下操作\"></a>wsl –install 命令执行以下操作</h3><ol>\n<li>启用虚拟机平台可选组件并安装 WSL 核心二进制文件。</li>\n<li>从Microsoft Store 下载 WSL 包（包括最新的 Linux 内核），以便在更新和安全修补程序可用时推送它们。</li>\n<li>下载并安装 Linux。</li>\n</ol>\n<h3 id=\"安装其他-Linux-发行版\"><a href=\"#安装其他-Linux-发行版\" class=\"headerlink\" title=\"安装其他 Linux 发行版\"></a>安装其他 Linux 发行版</h3><p>认情况下，wsl –install 命令将安装 Linux 的 Ubuntu 发行版。 可以从 Microsoft Store 中提供的列表中选择其他 Linux 发行版。 还可以与默认的 Ubuntu 一起安装其他 Linux 发行版。</p>\n<p>若要查看当前通过应用商店提供了哪些发行版，请输入命令：<code>wsl --list --online</code></p>\n<p><img src=\"/images/2024-02-18/wsl-list.png\"></p>\n<p>若要选择用其他版本替换默认的 Ubuntu 发行版，或者要从应用商店安装其他发行版，使用命令：<code>wsl --install --distribution &lt;Distribution Name&gt;</code></p>\n<h2 id=\"基本-WSL-命令\"><a href=\"#基本-WSL-命令\" class=\"headerlink\" title=\"基本 WSL 命令\"></a>基本 WSL 命令</h2><ol>\n<li><code>wsl --version</code> 检查已安装的 WSL 版本。</li>\n<li><code>wsl --update</code> 命令确保拥有最新的 WSL 更新。</li>\n<li><code>wsl --list --verbose</code> 列出当前已安装的 Linux 发行版。</li>\n<li><code>wsl ~</code> 命令，打开 Bash 命令行（从设为默认版本的 Linux 发行版），转到 WSL 文件系统的主目录。提示符会变成 Bash，看起来像这样：<code>&lt;user&gt;@&lt;CPU-name&gt;:~$</code>。 输入 pwd 命令以确认目录路径现在类似于 <code>/home/&lt;username&gt;</code>。 输入 <code>explorer.exe .</code> 命令，在 Windows 文件资源管理器中打开该目录（一定要包含句点，它表示打开当前目录路径）。 打开后，可以确认文件路径看起来像这样：<code>\\\\wsl.localhost\\Ubuntu\\home\\&lt;username&gt;</code>。</li>\n</ol>\n<p><img src=\"/images/2024-02-18/wsl-home-command.png\"></p>\n<ol start=\"5\">\n<li><code>exit</code> 从 Bash 命令行退出，返回到 PowerShell。</li>\n</ol>\n<h2 id=\"使用-WSL-扩展的-Visual-Studio-Code\"><a href=\"#使用-WSL-扩展的-Visual-Studio-Code\" class=\"headerlink\" title=\"使用 WSL 扩展的 Visual Studio Code\"></a>使用 WSL 扩展的 Visual Studio Code</h2><p>VS Code 使用 WSL 扩展，此扩展使 VS Code 的用户界面能够在 Windows 上运行，命令、扩展、调试、代码自动完成、Lint 分析等都在 WSL Linux 安装上运行。 </p>\n<p><img src=\"/images/2024-02-18/Snipaste_2024-02-18_22-06-50.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-WSL？\"><a href=\"#什么是-WSL？\" class=\"headerlink\" title=\"什么是 WSL？\"></a>什么是 WSL？</h2><p>全称<code>Windows Subsystem for Linux</code>,是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件 (ELF 格式) 的兼容层。</p>\n<h3 id=\"区别于虚拟机\"><a href=\"#区别于虚拟机\" class=\"headerlink\" title=\"区别于虚拟机\"></a>区别于虚拟机</h3><p>使用 VM 虚拟机时通常性能较低，因为需要大量的资源来运行虚拟实例，并且两个操作系统之间缺乏集成，其实仍在运行孤立的单独操作系统。</p>\n<p>WSL 解决了这些问题，它集成了 Windows 和 Linux，使用的资源占用量要少得多，与传统的虚拟机相比，所需的资源（CPU、内存、存储）更少。 以令人难以置信的快速高效的性能，在 Linux 开发环境旁边运行 Windows Office 应用、开发工具、游戏等。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>WSL 最初于 2016 年 8 月推出（Windows 10 版本 1607），使用的是现在称为 “WSL 1” 的体系结构。 WSL 1 作为一个转换层运行，在 Windows 内核上使用一个 Linux 内核接口。 可将 WSL 1 视为一个兼容层，用于模拟在 Windows 环境中运行 Linux 二进制文件的系统调用。</p>\n<p>2019 年 5 月，Microsoft 发布了 WSL 2，引入了对 WSL 体系结构的重要更改，包括在一部分 Hyper-V 功能中使用真正的 Linux 内核。 WSL 2 体系结构显著提高了性能，增加了系统调用速度，并减少了限制。 WSL 2 现在是在 Windows 上安装 Linux 分发版时使用的默认体系结构。</p>\n<h2 id=\"安装-WSL\"><a href=\"#安装-WSL\" class=\"headerlink\" title=\"安装 WSL\"></a>安装 WSL</h2><p>通过在管理员 PowerShell 或 Windows 命令提示符中输入 <code>wsl --install</code>，然后重启计算机，可以安装运行 WSL 所需的全部内容。</p>\n<blockquote>\n<p>必须确保运行的是 Windows 11 或 Windows 10 版本 2004+（内部版本 19041 及更高版本），才能运行 WSL install 命令。</p>\n</blockquote>\n<h3 id=\"wsl-–install-命令执行以下操作\"><a href=\"#wsl-–install-命令执行以下操作\" class=\"headerlink\" title=\"wsl –install 命令执行以下操作\"></a>wsl –install 命令执行以下操作</h3><ol>\n<li>启用虚拟机平台可选组件并安装 WSL 核心二进制文件。</li>\n<li>从Microsoft Store 下载 WSL 包（包括最新的 Linux 内核），以便在更新和安全修补程序可用时推送它们。</li>\n<li>下载并安装 Linux。</li>\n</ol>\n<h3 id=\"安装其他-Linux-发行版\"><a href=\"#安装其他-Linux-发行版\" class=\"headerlink\" title=\"安装其他 Linux 发行版\"></a>安装其他 Linux 发行版</h3><p>认情况下，wsl –install 命令将安装 Linux 的 Ubuntu 发行版。 可以从 Microsoft Store 中提供的列表中选择其他 Linux 发行版。 还可以与默认的 Ubuntu 一起安装其他 Linux 发行版。</p>\n<p>若要查看当前通过应用商店提供了哪些发行版，请输入命令：<code>wsl --list --online</code></p>\n<p><img src=\"/images/2024-02-18/wsl-list.png\"></p>\n<p>若要选择用其他版本替换默认的 Ubuntu 发行版，或者要从应用商店安装其他发行版，使用命令：<code>wsl --install --distribution &lt;Distribution Name&gt;</code></p>\n<h2 id=\"基本-WSL-命令\"><a href=\"#基本-WSL-命令\" class=\"headerlink\" title=\"基本 WSL 命令\"></a>基本 WSL 命令</h2><ol>\n<li><code>wsl --version</code> 检查已安装的 WSL 版本。</li>\n<li><code>wsl --update</code> 命令确保拥有最新的 WSL 更新。</li>\n<li><code>wsl --list --verbose</code> 列出当前已安装的 Linux 发行版。</li>\n<li><code>wsl ~</code> 命令，打开 Bash 命令行（从设为默认版本的 Linux 发行版），转到 WSL 文件系统的主目录。提示符会变成 Bash，看起来像这样：<code>&lt;user&gt;@&lt;CPU-name&gt;:~$</code>。 输入 pwd 命令以确认目录路径现在类似于 <code>/home/&lt;username&gt;</code>。 输入 <code>explorer.exe .</code> 命令，在 Windows 文件资源管理器中打开该目录（一定要包含句点，它表示打开当前目录路径）。 打开后，可以确认文件路径看起来像这样：<code>\\\\wsl.localhost\\Ubuntu\\home\\&lt;username&gt;</code>。</li>\n</ol>\n<p><img src=\"/images/2024-02-18/wsl-home-command.png\"></p>\n<ol start=\"5\">\n<li><code>exit</code> 从 Bash 命令行退出，返回到 PowerShell。</li>\n</ol>\n<h2 id=\"使用-WSL-扩展的-Visual-Studio-Code\"><a href=\"#使用-WSL-扩展的-Visual-Studio-Code\" class=\"headerlink\" title=\"使用 WSL 扩展的 Visual Studio Code\"></a>使用 WSL 扩展的 Visual Studio Code</h2><p>VS Code 使用 WSL 扩展，此扩展使 VS Code 的用户界面能够在 Windows 上运行，命令、扩展、调试、代码自动完成、Lint 分析等都在 WSL Linux 安装上运行。 </p>\n<p><img src=\"/images/2024-02-18/Snipaste_2024-02-18_22-06-50.png\"></p>\n"},{"title":"专注和思考很重要","date":"2024-02-18T12:28:00.000Z","_content":"\n学习之事，始终需要投入足够多的精力和专注才行，毫无捷径。","source":"_posts/2024/02/专注和思考很重要.md","raw":"---\ntitle: 专注和思考很重要\ndate: 2024-02-18 20:28:00\ntags: \ncategories:\n- 感悟\n---\n\n学习之事，始终需要投入足够多的精力和专注才行，毫无捷径。","slug":"专注和思考很重要","published":1,"updated":"2024-02-18T12:40:56.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55mg000rkogp90mu7bf7","content":"<p>学习之事，始终需要投入足够多的精力和专注才行，毫无捷径。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>学习之事，始终需要投入足够多的精力和专注才行，毫无捷径。</p>\n"},{"title":"转载：命令行的艺术","date":"2024-03-02T10:51:22.000Z","_content":"\n# 命令行的艺术\n\n- [前言](#前言)\n- [基础](#基础)\n- [日常使用](#日常使用)\n- [文件及数据处理](#文件及数据处理)\n- [系统调试](#系统调试)\n- [单行脚本](#单行脚本)\n- [冷门但有用](#冷门但有用)\n- [仅限 OS X 系统](#仅限-os-x-系统)\n- [仅限 Windows 系统](#仅限-windows-系统)\n\n\n熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。\n\n\n## 前言\n\n涵盖范围：\n\n- 这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到*覆盖面广*（涉及所有重要的内容），*具体*（给出具体的最常用的例子），以及*简洁*（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。\n- 本文主要为 Linux 所写，但在[仅限 OS X 系统](#仅限-os-x-系统)章节和[仅限 Windows 系统](#仅限-windows-系统)章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。\n- 本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。\n- 除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。\n\n注意事项：\n\n- 为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 `apt-get`，`yum`，`dnf`，`pacman`，\n`pip` 或 `brew`（以及其它合适的包管理器）来安装依赖的程序。\n- 遇到问题的话，请尝试使用 [Explainshell](http://explainshell.com/) 去获取相关命令、参数、管道等内容的解释。\n\n\n## 基础\n\n- 学习 Bash 的基础知识。具体地，在命令行中输入 `man bash` 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你*只*学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。\n\n- 熟悉至少一个基于文本的编辑器。通常而言 Vim （`vi`） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。\n\n- 学会如何使用 `man` 命令去阅读文档。学会使用 `apropos` 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 `help` 和 `help -d` 命令获取帮助信息。你可以用 `type 命令` 来判断这个命令到底是可执行文件、shell 内置命令还是别名。\n\n- 学会使用 `>` 和 `<` 来重定向输出和输入，学会使用 `|` 来重定向管道。明白 `>` 会覆盖了输出文件而 `>>` 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。\n\n- 学会使用通配符 `*` （或许再算上 `?` 和 `[`...`]`） 和引用以及引用中 `'` 和 `\"` 的区别（后文中有一些具体的例子）。\n\n- 熟悉 Bash 中的任务管理工具：`&`，**ctrl-z**，**ctrl-c**，`jobs`，`fg`，`bg`，`kill` 等。\n\n- 学会使用 `ssh` 进行远程命令行登录，最好知道如何使用 `ssh-agent`，`ssh-add` 等命令来实现基础的无密码认证登录。\n\n- 学会基本的文件管理工具：`ls` 和 `ls -l` （了解 `ls -l` 中每一列代表的意义），`less`，`head`，`tail` 和 `tail -f` （甚至 `less +F`），`ln` 和 `ln -s` （了解硬链接与软链接的区别），`chown`，`chmod`，`du` （硬盘使用情况概述：`du -hs *`）。 关于文件系统的管理，学习 `df`，`mount`，`fdisk`，`mkfs`，`lsblk`。知道 inode 是什么（与 `ls -i` 和 `df -i` 等命令相关）。\n\n- 学习基本的网络管理工具：`ip` 或 `ifconfig`，`dig`。\n\n- 学习并使用一种版本控制管理系统，例如 `git`。\n\n- 熟悉正则表达式，学会使用 `grep`／`egrep`，它们的参数中 `-i`，`-o`，`-v`，`-A`，`-B` 和 `-C` 这些是很常用并值得认真学习的。\n\n- 学会使用 `apt-get`，`yum`，`dnf` 或 `pacman` （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 `pip` 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 `pip` 来安装会很方便）。\n\n\n## 日常使用\n\n- 在 Bash 中，可以通过按 **Tab** 键实现自动补全参数，使用 **ctrl-r** 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 **ctrl-r** 会向后查找匹配项，按下 **Enter** 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。\n\n- 在 Bash 中，可以按下 **ctrl-w** 删除你键入的最后一个单词，**ctrl-u** 可以删除行内光标所在位置之前的内容，**alt-b** 和 **alt-f** 可以以单词为单位移动光标，**ctrl-a** 可以将光标移至行首，**ctrl-e** 可以将光标移至行尾，**ctrl-k** 可以删除光标至行尾的所有内容，**ctrl-l** 可以清屏。键入 `man readline` 可以查看 Bash 中的默认快捷键。内容有很多，例如 **alt-.** 循环地移向前一个参数，而 **alt-*** 可以展开通配符。\n\n\n- 你喜欢的话，可以执行 `set -o vi` 来使用 vi 风格的快捷键，而执行 `set -o emacs` 可以把它改回来。\n\n- 为了便于编辑长命令，在设置你的默认编辑器后（例如 `export EDITOR=vim`），**ctrl-x** **ctrl-e** 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 **escape-v**。\n\n- 键入 `history` 查看命令行历史记录，再用 `!n`（`n` 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 `!$`， 它用于指代上次键入的参数，而 `!!` 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 **ctrl-r** 和 **alt-.** 来实现。\n\n- `cd` 命令可以切换工作路径，输入 `cd ~` 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 `~`（例如 `~/.bashrc`）。在 `sh` 脚本里则用环境变量 `$HOME` 指代 home 目录的路径。\n\n- 回到前一个工作路径：`cd -`。\n\n- 如果你输入命令的时候中途改了主意，按下 **alt-#** 在行首添加 `#` 把它当做注释再按下回车执行（或者依次按下 **ctrl-a**， **#**， **enter**）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。\n\n- 使用 `xargs` （ 或 `parallel`）。他们非常给力。注意到你可以控制每行参数个数（`-L`）和最大并行数（`-P`）。如果你不确定它们是否会按你想的那样工作，先使用 `xargs echo` 查看一下。此外，使用 `-I{}` 会很方便。例如：\n```bash\n      find . -name '*.py' | xargs grep some_function\n      cat hosts | xargs -I{} ssh root@{} hostname\n```\n\n\n- `pstree -p` 以一种优雅的方式展示进程树。\n\n- 使用 `pgrep` 和 `pkill` 根据名字查找进程或发送信号（`-f` 参数通常有用）。\n\n- 了解你可以发往进程的信号的种类。比如，使用 `kill -STOP [pid]` 停止一个进程。使用 `man 7 signal` 查看详细列表。\n\n- 使用 `nohup` 或 `disown` 使一个后台进程持续运行。\n\n- 使用 `netstat -lntp` 或 `ss -plat` 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 `-u` 则检查 UDP 端口）或者 `lsof -iTCP -sTCP:LISTEN -P -n` (这也可以在 OS X 上运行)。\n\n- `lsof` 来查看开启的套接字和文件。\n\n- 使用 `uptime` 或 `w` 来查看系统已经运行多长时间。\n\n- 使用 `alias` 来创建常用命令的快捷形式。例如：`alias ll='ls -latr'` 创建了一个新的命令别名 `ll`。\n\n- 可以把别名、shell 选项和常用函数保存在 `~/.bashrc`。这样做的话你就可以在所有 shell 会话中使用你的设定。\n\n- 把环境变量的设定以及登陆时要执行的命令保存在 `~/.bash_profile`。而对于从图形界面启动的 shell 和 `cron` 启动的 shell，则需要单独配置文件。\n\n- 要想在几台电脑中同步你的配置文件（例如 `.bashrc` 和 `.bash_profile`），可以借助 Git。\n\n- 当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 `\"$FOO\"`。尽量使用 `-0` 或 `-print0` 选项以便用 NULL 来分隔文件名，例如 `locate -0 pattern | xargs -0 ls -al` 或 `find / -print0 -type d | xargs -0 ls -al`。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 `IFS=$'\\n'` 把内部字段分隔符设为换行符。\n\n- 在 Bash 脚本中，使用 `set -x` 去调试输出（或者使用它的变体 `set -v`，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 `set -e` 令脚本在发生错误时退出而不是继续运行；使用 `set -u` 来检查是否使用了未赋值的变量；试试 `set -o pipefail`，它可以监测管道中的错误。当牵扯到很多脚本时，使用 `trap` 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：\n```bash\n      set -euo pipefail\n      trap \"echo 'error: Script failed: see failed command above'\" ERR\n```\n\n- 在 Bash 脚本中，子 shell（使用括号 `(...)`）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：\n```bash\n      # do something in current dir\n      (cd /some/other/dir && other-command)\n      # continue in original dir\n```\n\n- 在 Bash 中，变量有许多的扩展方式。`${name:?error message}` 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 `input_file=${1:?usage: $0 input_file}`。在变量为空时使用默认值：`${name:-default}`。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 `output_file=${2:-logfile}`，如果省略了 $2，它的值就为空，于是 `output_file` 就会被设为 `logfile`。数学表达式：`i=$(( (i + 1) % 5 ))`。序列：`{1..10}`。截断字符串：`${var%suffix}` 和 `${var#prefix}`。例如，假设 `var=foo.pdf`，那么 `echo ${var%.pdf}.txt` 将输出 `foo.txt`。\n\n- 使用括号扩展（`{`...`}`）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 `mv foo.{txt,pdf} some-dir`（同时移动两个文件），`cp somefile{,.bak}`（会被扩展成 `cp somefile somefile.bak`）或者 `mkdir -p test-{a,b,c}/subtest-{1,2,3}`（会被扩展成所有可能的组合，并创建一个目录树）。\n\n- 通过使用 `<(some command)` 可以将输出视为文件。例如，对比本地文件 `/etc/hosts` 和一个远程文件：\n```sh\n      diff /etc/hosts <(ssh somehost cat /etc/hosts)\n```\n\n- 编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。\n```bash\n{\n      # 在这里写代码\n}\n```\n\n- 了解 Bash 中的“here documents”，例如 `cat <<EOF ...`。\n\n- 在 Bash 中，同时重定向标准输出和标准错误：`some-command >logfile 2>&1` 或者 `some-command &>logfile`。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 `</dev/null` 是一个好习惯。\n\n- 使用 `man ascii` 查看具有十六进制和十进制值的ASCII表。`man unicode`，`man utf-8`，以及 `man latin1` 有助于你去了解通用的编码信息。\n\n- 使用 `screen` 或 [`tmux`](https://tmux.github.io/) 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 `byobu` 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 [`dtach`](https://github.com/bogner/dtach)。\n\n- ssh 中，了解如何使用 `-L` 或 `-D`（偶尔需要用 `-R`）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。\n\n- 对 ssh 设置做一些小优化可能是很有用的，例如这个 `~/.ssh/config` 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：\n```\n      TCPKeepAlive=yes\n      ServerAliveInterval=15\n      ServerAliveCountMax=6\n      Compression=yes\n      ControlMaster auto\n      ControlPath /tmp/%r@%h:%p\n      ControlPersist yes\n```\n\n- 一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 `StrictHostKeyChecking=no`，`ForwardAgent=yes`。\n\n- 考虑使用 [`mosh`](https://mosh.org/) 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。\n\n- 获取八进制形式的文件访问权限（修改系统设置时通常需要，但 `ls` 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：\n```sh\n      stat -c '%A %a %n' /etc/timezone\n```\n\n- 使用 [`percol`](https://github.com/mooz/percol) 或者 [`fzf`](https://github.com/junegunn/fzf) 可以交互式地从另一个命令输出中选取值。\n\n- 使用 `fpp`（[PathPicker](https://github.com/facebook/PathPicker)）可以与基于另一个命令(例如 `git`）输出的文件交互。\n\n- 将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：\n`python -m SimpleHTTPServer 7777` （使用端口 7777 和 Python 2）或`python -m http.server 7777` （使用端口 7777 和 Python 3）。\n\n- 以其他用户的身份执行命令，使用 `sudo`。默认以 root 用户的身份执行；使用 `-u` 来指定其他用户。使用 `-i` 来以该用户登录（需要输入_你自己的_密码）。\n\n- 将 shell 切换为其他用户，使用 `su username` 或者 `su - username`。加入 `-` 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。\n\n- 了解命令行的 [128K 限制](https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong)。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 `find` 或 `xargs` 通常可以解决。）\n\n- 当你需要一个基本的计算器时，可以使用 `python` 解释器（当然你要用 python 的时候也是这样）。例如：\n```\n>>> 2+3\n5\n```\n\n\n## 文件及数据处理\n\n- 在当前目录下通过文件名查找一个文件，使用类似于这样的命令：`find . -iname '*something*'`。在所有路径下通过文件名查找文件，使用 `locate something` （但注意到 `updatedb` 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。\n\n- 使用 [`ag`](https://github.com/ggreer/the_silver_searcher) 在源代码或数据文件里检索（`grep -r` 同样可以做到，但相比之下 `ag` 更加先进）。\n\n- 将 HTML 转为文本：`lynx -dump -stdin`。\n\n- Markdown，HTML，以及所有文档格式之间的转换，试试 [`pandoc`](http://pandoc.org/)。\n\n- 当你要处理棘手的 XML 时候，`xmlstarlet` 算是上古时代流传下来的神器。\n\n- 使用 [`jq`](http://stedolan.github.io/jq/) 处理 JSON。\n\n- 使用 [`shyaml`](https://github.com/0k/shyaml) 处理 YAML。\n\n- 要处理 Excel 或 CSV 文件的话，[csvkit](https://github.com/onyxfish/csvkit) 提供了 `in2csv`，`csvcut`，`csvjoin`，`csvgrep` 等方便易用的工具。\n\n- 当你要处理 Amazon S3 相关的工作的时候，[`s3cmd`](https://github.com/s3tools/s3cmd) 是一个很方便的工具而 [`s4cmd`](https://github.com/bloomreach/s4cmd) 的效率更高。Amazon 官方提供的 [`aws`](https://github.com/aws/aws-cli) 以及  [`saws`](https://github.com/donnemartin/saws) 是其他 AWS 相关工作的基础，值得学习。\n\n- 了解如何使用 `sort` 和 `uniq`，包括 uniq 的 `-u` 参数和 `-d` 参数，具体内容在后文单行脚本节中。另外可以了解一下 `comm`。\n\n- 了解如何使用 `cut`，`paste` 和 `join` 来更改文件。很多人都会使用 `cut`，但遗忘了 `join`。\n\n- 了解如何运用 `wc` 去计算新行数（`-l`），字符数（`-m`），单词数（`-w`）以及字节数（`-c`）。\n\n- 了解如何使用 `tee` 将标准输入复制到文件甚至标准输出，例如 `ls -al | tee file.txt`。\n\n- 要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 [`datamash`](https://www.gnu.org/software/datamash/)。\n\n- 注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 `LANG` 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降*许多倍*。某些情况下（例如集合运算）你可以放心的使用 `export LC_ALL=C` 来忽略掉国际化并按照字节来判断顺序。\n\n- 你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 `TZ=Pacific/Fiji date` 可以获取斐济的时间。\n\n- 了解如何使用 `awk` 和 `sed` 来进行简单的数据处理。 参阅 [One-liners](#one-liners) 获取示例。\n\n- 替换一个或多个文件中出现的字符串：\n```sh\n      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt\n```\n\n- 使用 [`repren`](https://github.com/jlevy/repren) 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 `rename` 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）\n```sh\n      # 将文件、目录和内容全部重命名 foo -> bar:\n      repren --full --preserve-case --from foo --to bar .\n      # 还原所有备份文件 whatever.bak -> whatever:\n      repren --renames --from '(.*)\\.bak' --to '\\1' *.bak\n      # 用 rename 实现上述功能（若可用）:\n      rename 's/\\.bak$//' *.bak\n```\n\n- 根据 man 页面的描述，`rsync` 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 `rsync` 代替 `scp` 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的[最快方法](https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html)之一：\n```sh\nmkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir\n```\n\n- 若要在复制文件时获取当前进度，可使用 `pv`，[`pycp`](https://github.com/dmerejkowsky/pycp)，[`progress`](https://github.com/Xfennec/progress)，`rsync --progress`。若所执行的复制为block块拷贝，可以使用 `dd status=progress`。\n\n- 使用 `shuf` 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。\n\n- 了解 `sort` 的参数。显示数字时，使用 `-n` 或者 `-h` 来显示更易读的数（例如 `du -h` 的输出）。明白排序时关键字的工作原理（`-t` 和 `-k`）。例如，注意到你需要 `-k1，1` 来仅按第一个域来排序，而 `-k1` 意味着按整行排序。稳定排序（`sort -s`）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 `sort -k1，1 | sort -s -k2，2`。\n\n- 如果你想在 Bash 命令行中写 tab 制表符，按下 **ctrl-v** **[Tab]** 或键入 `$'\\t'` （后者可能更好，因为你可以复制粘贴它）。\n\n- 标准的源代码对比及合并工具是 `diff` 和 `patch`。使用 `diffstat` 查看变更总览数据。注意到 `diff -r` 对整个文件夹有效。使用 `diff -r tree1 tree2 | diffstat` 查看变更的统计数据。`vimdiff` 用于比对并编辑文件。\n\n- 对于二进制文件，使用 `hd`，`hexdump` 或者 `xxd` 使其以十六进制显示，使用 `bvi`，`hexedit` 或者 `biew` 来进行二进制编辑。\n\n- 同样对于二进制文件，`strings`（包括 `grep` 等工具）可以帮助在二进制文件中查找特定比特。\n\n- 制作二进制差分文件（Delta 压缩），使用 `xdelta3`。\n\n- 使用 `iconv` 更改文本编码。需要更高级的功能，可以使用 `uconv`，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：\n```sh\n      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt\n```\n\n- 拆分文件可以使用 `split`（按大小拆分）和 `csplit`（按模式拆分）。\n\n- 操作日期和时间表达式，可以用 [`dateutils`](http://www.fresse.org/dateutils/) 中的 `dateadd`、`datediff`、`strptime` 等工具。\n\n- 使用 `zless`、`zmore`、`zcat` 和 `zgrep` 对压缩过的文件进行操作。\n\n- 文件属性可以通过 `chattr` 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：`sudo chattr +i /critical/directory/or/file`\n\n- 使用 `getfacl` 和 `setfacl` 以保存和恢复文件权限。例如：\n```sh\n   getfacl -R /some/path > permissions.txt\n   setfacl --restore=permissions.txt\n```\n\n- 为了高效地创建空文件，请使用 `truncate`（创建[稀疏文件](https://zh.wikipedia.org/wiki/稀疏文件)），`fallocate`（用于 ext4，xfs，btrf 和 ocfs2 文件系统），`xfs_mkfile`（适用于几乎所有的文件系统，包含在 xfsprogs 包中），`mkfile`（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。\n\n## 系统调试\n\n- `curl` 和 `curl -I` 可以被轻松地应用于 web 调试中，它们的好兄弟 `wget` 也是如此，或者也可以试试更潮的 [`httpie`](https://github.com/jkbrzt/httpie)。\n\n- 获取 CPU 和硬盘的使用状态，通常使用使用 `top`（`htop` 更佳），`iostat` 和 `iotop`。而 `iostat -mxz 15` 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。\n\n- 使用 `netstat` 和 `ss` 查看网络连接的细节。\n\n- `dstat` 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 [`glances`](https://github.com/nicolargo/glances)，它会在一个终端窗口中向你提供一些系统级的数据。\n\n- 若要了解内存状态，运行并理解 `free` 和 `vmstat` 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。\n\n- Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 `kill -3 <pid>` 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 `jps`，`jstat`，`jstack`，`jmap` 很有用。[SJK tools](https://github.com/aragozin/jvm-tools) 更高级。\n\n- 使用 [`mtr`](http://www.bitwizard.nl/mtr/) 去跟踪路由，用于确定网络问题。\n\n- 用 [`ncdu`](https://dev.yorhel.nl/ncdu) 来查看磁盘使用情况，它比寻常的命令，如 `du -sh *`，更节省时间。\n\n- 查找正在使用带宽的套接字连接或进程，使用 [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) 或 [`nethogs`](https://github.com/raboof/nethogs)。\n\n- `ab` 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 `siege`。\n\n- [`wireshark`](https://wireshark.org/)，[`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html) 和 [`ngrep`](http://ngrep.sourceforge.net/) 可用于复杂的网络调试。\n\n- 了解 `strace` 和 `ltrace`。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（`-c`）和附加到一个运行的进程参数 （`-p`）。\n\n- 了解使用 `ldd` 来检查共享库。但是[永远不要在不信任的文件上运行](http://www.catonmat.net/blog/ldd-arbitrary-code-execution/)。\n\n- 了解如何运用 `gdb` 连接到一个运行着的进程并获取它的堆栈轨迹。\n\n- 学会使用 `/proc`。它在调试正在出现的问题的时候有时会效果惊人。比如：`/proc/cpuinfo`，`/proc/meminfo`，`/proc/cmdline`，`/proc/xxx/cwd`，`/proc/xxx/exe`，`/proc/xxx/fd/`，`/proc/xxx/smaps`（这里的 `xxx` 表示进程的 id 或 pid）。\n\n- 当调试一些之前出现的问题的时候，[`sar`](http://sebastien.godard.pagesperso-orange.fr/) 非常有用。它展示了 cpu、内存以及网络等的历史数据。\n\n- 关于更深层次的系统分析以及性能分析，看看 `stap`（[SystemTap](https://sourceware.org/systemtap/wiki)），[`perf`](https://en.wikipedia.org/wiki/Perf_(Linux))，以及[`sysdig`](https://github.com/draios/sysdig)。\n\n- 查看你当前使用的系统，使用 `uname`，`uname -a`（Unix／kernel 信息）或者 `lsb_release -a`（Linux 发行版信息）。\n\n- 无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 `dmesg`。\n\n- 如果你删除了一个文件，但通过 `du` 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：\n`lsof | grep deleted | grep \"filename-of-my-big-file\"`\n\n\n## 单行脚本\n\n一些命令组合的例子：\n\n- 当你需要对文本文件做集合交、并、差运算时，`sort` 和 `uniq` 会是你的好帮手。具体例子请参照代码后面的，此处假设 `a` 与 `b` 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 `/tmp` 在一个小的根分区上时你可能需要 `-T` 参数，但是实际上 `sort` 并不被内存大小约束），参阅前文中关于 `LC_ALL` 和 `sort` 的 `-u` 参数的部分。\n```sh\n      sort a b | uniq > c   # c 是 a 并 b\n      sort a b | uniq -d > c   # c 是 a 交 b\n      sort a b b | uniq -u > c   # c 是 a - b\n```\n\n- 使用 `grep . *`（每行都会附上文件名）或者 `head -100 *`（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 `/sys`、`/proc`、`/etc`）时特别好用。\n\n\n- 计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：\n```sh\n      awk '{ x += $3 } END { print x }' myfile\n```\n\n- 如果你想在文件树上查看大小/日期，这可能看起来像递归版的 `ls -l` 但比 `ls -lR` 更易于理解：\n```sh\n      find . -type f -ls\n```\n\n- 假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 `acct_id` 参数在 URI 中。如果你想计算出每个 `acct_id` 值有多少次请求，使用如下代码：\n```sh\n      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn\n```\n\n- 要持续监测文件改动，可以使用 `watch`，例如检查某个文件夹中文件的改变，可以用 `watch -d -n 2 'ls -rtlh | tail'`；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 `watch -d -n 2 ifconfig`。\n\n- 运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：\n```sh\n      function taocl() {\n        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|\n          pandoc -f markdown -t html |\n          iconv -f 'utf-8' -t 'unicode' |\n          xmlstarlet fo --html --dropdtd |\n          xmlstarlet sel -t -v \"(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]\" |\n          xmlstarlet unesc | fmt -80\n      }\n```\n\n## 冷门但有用\n\n- `expr`：计算表达式或正则匹配\n\n- `m4`：简单的宏处理器\n\n- `yes`：多次打印字符串\n\n- `cal`：漂亮的日历\n\n- `env`：执行一个命令（脚本文件中很有用）\n\n- `printenv`：打印环境变量（调试时或在写脚本文件时很有用）\n\n- `look`：查找以特定字符串开头的单词或行\n\n- `cut`，`paste` 和 `join`：数据修改\n\n- `fmt`：格式化文本段落\n\n- `pr`：将文本格式化成页／列形式\n\n- `fold`：包裹文本中的几行\n\n- `column`：将文本格式化成多个对齐、定宽的列或表格\n\n- `expand` 和 `unexpand`：制表符与空格之间转换\n\n- `nl`：添加行号\n\n- `seq`：打印数字\n\n- `bc`：计算器\n\n- `factor`：分解因数\n\n- [`gpg`](https://gnupg.org/)：加密并签名文件\n\n- `toe`：terminfo 入口列表\n\n- `nc`：网络调试及数据传输\n\n- `socat`：套接字代理，与 `netcat` 类似\n\n- [`slurm`](https://github.com/mattthias/slurm)：网络流量可视化\n\n- `dd`：文件或设备间传输数据\n\n- `file`：确定文件类型\n\n- `tree`：以树的形式显示路径和文件，类似于递归的 `ls`\n\n- `stat`：文件信息\n\n- `time`：执行命令，并计算执行时间\n\n- `timeout`：在指定时长范围内执行命令，并在规定时间结束后停止进程\n\n- `lockfile`：使文件只能通过 `rm -f` 移除\n\n- `logrotate`： 切换、压缩以及发送日志文件\n\n- `watch`：重复运行同一个命令，展示结果并／或高亮有更改的部分\n\n- [`when-changed`](https://github.com/joh/when-changed)：当检测到文件更改时执行指定命令。参阅 `inotifywait` 和 `entr`。\n\n- `tac`：反向输出文件\n\n- `shuf`：文件中随机选取几行\n\n- `comm`：一行一行的比较排序过的文件\n\n- `strings`：从二进制文件中抽取文本\n\n- `tr`：转换字母\n\n- `iconv` 或 `uconv`：文本编码转换\n\n- `split` 和 `csplit`：分割文件\n\n- `sponge`：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 `grep -v something some-file | sponge some-file`\n\n- `units`：将一种计量单位转换为另一种等效的计量单位（参阅 `/usr/share/units/definitions.units`）\n\n- `apg`：随机生成密码\n\n- `xz`：高比例的文件压缩\n\n- `ldd`：动态库信息\n\n- `nm`：提取 obj 文件中的符号\n\n- `ab` 或 [`wrk`](https://github.com/wg/wrk)：web 服务器性能分析\n\n- `strace`：调试系统调用\n\n- [`mtr`](http://www.bitwizard.nl/mtr/)：更好的网络调试跟踪工具\n\n- `cssh`：可视化的并发 shell\n\n- `rsync`：通过 ssh 或本地文件系统同步文件和文件夹\n\n- [`wireshark`](https://wireshark.org/) 和 [`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html)：抓包和网络调试工具\n\n- [`ngrep`](http://ngrep.sourceforge.net/)：网络层的 grep\n\n- `host` 和 `dig`：DNS 查找\n\n- `lsof`：列出当前系统打开文件的工具以及查看端口信息\n\n- `dstat`：系统状态查看\n\n- [`glances`](https://github.com/nicolargo/glances)：高层次的多子系统总览\n\n- `iostat`：硬盘使用状态\n\n- `mpstat`： CPU 使用状态\n\n- `vmstat`： 内存使用状态\n\n- `htop`：top 的加强版\n\n- `last`：登入记录\n\n- `w`：查看处于登录状态的用户\n\n- `id`：用户/组 ID 信息\n\n- [`sar`](http://sebastien.godard.pagesperso-orange.fr/)：系统历史数据\n\n- [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) 或 [`nethogs`](https://github.com/raboof/nethogs)：套接字及进程的网络利用情况\n\n- `ss`：套接字数据\n\n- `dmesg`：引导及系统错误信息\n\n- `sysctl`： 在内核运行时动态地查看和修改内核的运行参数\n\n- `hdparm`：SATA/ATA 磁盘更改及性能分析\n\n- `lsblk`：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息\n\n- `lshw`，`lscpu`，`lspci`，`lsusb` 和 `dmidecode`：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等\n\n- `lsmod` 和 `modinfo`：列出内核模块，并显示其细节\n\n- `fortune`，`ddate` 和 `sl`：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”\n\n\n## 仅限 OS X 系统\n\n以下是*仅限于* OS X 系统的技巧。\n\n- 用 `brew` （Homebrew）或者 `port` （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。\n\n- 用 `pbcopy` 复制任何命令的输出到桌面应用，用 `pbpaste` 粘贴输入。\n\n- 若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 **alt-b**、**alt-f** 等命令中用到），打开 偏好设置 -> 描述文件 -> 键盘 并勾选“使用 Option 键作为 Meta 键”。\n\n- 用 `open` 或者 `open -a /Applications/Whatever.app` 使用桌面应用打开文件。\n\n- Spotlight：用 `mdfind` 搜索文件，用 `mdls` 列出元数据（例如照片的 EXIF 信息）。\n\n- 注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 `ps`，`ls`，`tail`，`awk`，`sed`）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 \"BSD General Commands Manual\" 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 `gawk` 和 `gsed` 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 `perl` ）或者经过仔细的测试。\n\n- 用 `sw_vers` 获取 OS X 的版本信息。\n\n## 仅限 Windows 系统\n\n以下是*仅限于* Windows 系统的技巧。\n\n### 在 Windows 下获取 Unix 工具\n\n- 可以安装 [Cygwin](https://cygwin.com/) 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。\n\n- 在 Windows 10 上，你可以使用 [Bash on Ubuntu on Windows](https://msdn.microsoft.com/commandline/wsl/about)，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。\n\n- 如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 [MinGW](http://www.mingw.org/) 以及它的 [MSYS](http://www.mingw.org/wiki/msys) 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。\n\n- 另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 [Cash](https://github.com/dthree/cash)。注意在此环境下只有很少的 Unix 命令和命令行可用。\n\n### 实用 Windows 命令行工具\n\n- 可以使用 `wmic` 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。\n\n- Windows 实用的原生命令行网络工具包括 `ping`，`ipconfig`，`tracert`，和 `netstat`。\n\n- 可以使用 `Rundll32` 命令来实现[许多有用的 Windows 任务](http://www.thewindowsclub.com/rundll32-shortcut-commands-windows) 。\n\n### Cygwin 技巧\n\n- 通过 Cygwin 的包管理器来安装额外的 Unix 程序。\n\n- 使用 `mintty` 作为你的命令行窗口。\n\n- 要访问 Windows 剪贴板，可以通过 `/dev/clipboard`。\n\n- 运行 `cygstart` 以通过默认程序打开一个文件。\n\n- 要访问 Windows 注册表，可以使用 `regtool`。\n\n- 注意 Windows 驱动器路径 `C:\\` 在 Cygwin 中用 `/cygdrive/c` 代表，而 Cygwin 的 `/` 代表 Windows 中的 `C:\\cygwin`。要转换 Cygwin 和 Windows 风格的路径可以用 `cygpath`。这在需要调用 Windows 程序的脚本里很有用。\n\n- 学会使用 `wmic`，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。\n\n- 要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 [Cash](https://github.com/dthree/cash)。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。\n\n- 要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 [MinGW](http://www.mingw.org/) 以及它的 [MSYS](http://www.mingw.org/wiki/msys) 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。\n","source":"_posts/2024/03/命令行的艺术.md","raw":"---\ntitle: 转载：命令行的艺术\ndate: 2024-03-02 18:51:22\ntags: linux 转载精选\ncategories: linux\n---\n\n# 命令行的艺术\n\n- [前言](#前言)\n- [基础](#基础)\n- [日常使用](#日常使用)\n- [文件及数据处理](#文件及数据处理)\n- [系统调试](#系统调试)\n- [单行脚本](#单行脚本)\n- [冷门但有用](#冷门但有用)\n- [仅限 OS X 系统](#仅限-os-x-系统)\n- [仅限 Windows 系统](#仅限-windows-系统)\n\n\n熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。\n\n\n## 前言\n\n涵盖范围：\n\n- 这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到*覆盖面广*（涉及所有重要的内容），*具体*（给出具体的最常用的例子），以及*简洁*（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。\n- 本文主要为 Linux 所写，但在[仅限 OS X 系统](#仅限-os-x-系统)章节和[仅限 Windows 系统](#仅限-windows-系统)章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。\n- 本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。\n- 除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。\n\n注意事项：\n\n- 为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 `apt-get`，`yum`，`dnf`，`pacman`，\n`pip` 或 `brew`（以及其它合适的包管理器）来安装依赖的程序。\n- 遇到问题的话，请尝试使用 [Explainshell](http://explainshell.com/) 去获取相关命令、参数、管道等内容的解释。\n\n\n## 基础\n\n- 学习 Bash 的基础知识。具体地，在命令行中输入 `man bash` 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你*只*学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。\n\n- 熟悉至少一个基于文本的编辑器。通常而言 Vim （`vi`） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。\n\n- 学会如何使用 `man` 命令去阅读文档。学会使用 `apropos` 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 `help` 和 `help -d` 命令获取帮助信息。你可以用 `type 命令` 来判断这个命令到底是可执行文件、shell 内置命令还是别名。\n\n- 学会使用 `>` 和 `<` 来重定向输出和输入，学会使用 `|` 来重定向管道。明白 `>` 会覆盖了输出文件而 `>>` 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。\n\n- 学会使用通配符 `*` （或许再算上 `?` 和 `[`...`]`） 和引用以及引用中 `'` 和 `\"` 的区别（后文中有一些具体的例子）。\n\n- 熟悉 Bash 中的任务管理工具：`&`，**ctrl-z**，**ctrl-c**，`jobs`，`fg`，`bg`，`kill` 等。\n\n- 学会使用 `ssh` 进行远程命令行登录，最好知道如何使用 `ssh-agent`，`ssh-add` 等命令来实现基础的无密码认证登录。\n\n- 学会基本的文件管理工具：`ls` 和 `ls -l` （了解 `ls -l` 中每一列代表的意义），`less`，`head`，`tail` 和 `tail -f` （甚至 `less +F`），`ln` 和 `ln -s` （了解硬链接与软链接的区别），`chown`，`chmod`，`du` （硬盘使用情况概述：`du -hs *`）。 关于文件系统的管理，学习 `df`，`mount`，`fdisk`，`mkfs`，`lsblk`。知道 inode 是什么（与 `ls -i` 和 `df -i` 等命令相关）。\n\n- 学习基本的网络管理工具：`ip` 或 `ifconfig`，`dig`。\n\n- 学习并使用一种版本控制管理系统，例如 `git`。\n\n- 熟悉正则表达式，学会使用 `grep`／`egrep`，它们的参数中 `-i`，`-o`，`-v`，`-A`，`-B` 和 `-C` 这些是很常用并值得认真学习的。\n\n- 学会使用 `apt-get`，`yum`，`dnf` 或 `pacman` （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 `pip` 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 `pip` 来安装会很方便）。\n\n\n## 日常使用\n\n- 在 Bash 中，可以通过按 **Tab** 键实现自动补全参数，使用 **ctrl-r** 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 **ctrl-r** 会向后查找匹配项，按下 **Enter** 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。\n\n- 在 Bash 中，可以按下 **ctrl-w** 删除你键入的最后一个单词，**ctrl-u** 可以删除行内光标所在位置之前的内容，**alt-b** 和 **alt-f** 可以以单词为单位移动光标，**ctrl-a** 可以将光标移至行首，**ctrl-e** 可以将光标移至行尾，**ctrl-k** 可以删除光标至行尾的所有内容，**ctrl-l** 可以清屏。键入 `man readline` 可以查看 Bash 中的默认快捷键。内容有很多，例如 **alt-.** 循环地移向前一个参数，而 **alt-*** 可以展开通配符。\n\n\n- 你喜欢的话，可以执行 `set -o vi` 来使用 vi 风格的快捷键，而执行 `set -o emacs` 可以把它改回来。\n\n- 为了便于编辑长命令，在设置你的默认编辑器后（例如 `export EDITOR=vim`），**ctrl-x** **ctrl-e** 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 **escape-v**。\n\n- 键入 `history` 查看命令行历史记录，再用 `!n`（`n` 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 `!$`， 它用于指代上次键入的参数，而 `!!` 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 **ctrl-r** 和 **alt-.** 来实现。\n\n- `cd` 命令可以切换工作路径，输入 `cd ~` 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 `~`（例如 `~/.bashrc`）。在 `sh` 脚本里则用环境变量 `$HOME` 指代 home 目录的路径。\n\n- 回到前一个工作路径：`cd -`。\n\n- 如果你输入命令的时候中途改了主意，按下 **alt-#** 在行首添加 `#` 把它当做注释再按下回车执行（或者依次按下 **ctrl-a**， **#**， **enter**）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。\n\n- 使用 `xargs` （ 或 `parallel`）。他们非常给力。注意到你可以控制每行参数个数（`-L`）和最大并行数（`-P`）。如果你不确定它们是否会按你想的那样工作，先使用 `xargs echo` 查看一下。此外，使用 `-I{}` 会很方便。例如：\n```bash\n      find . -name '*.py' | xargs grep some_function\n      cat hosts | xargs -I{} ssh root@{} hostname\n```\n\n\n- `pstree -p` 以一种优雅的方式展示进程树。\n\n- 使用 `pgrep` 和 `pkill` 根据名字查找进程或发送信号（`-f` 参数通常有用）。\n\n- 了解你可以发往进程的信号的种类。比如，使用 `kill -STOP [pid]` 停止一个进程。使用 `man 7 signal` 查看详细列表。\n\n- 使用 `nohup` 或 `disown` 使一个后台进程持续运行。\n\n- 使用 `netstat -lntp` 或 `ss -plat` 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 `-u` 则检查 UDP 端口）或者 `lsof -iTCP -sTCP:LISTEN -P -n` (这也可以在 OS X 上运行)。\n\n- `lsof` 来查看开启的套接字和文件。\n\n- 使用 `uptime` 或 `w` 来查看系统已经运行多长时间。\n\n- 使用 `alias` 来创建常用命令的快捷形式。例如：`alias ll='ls -latr'` 创建了一个新的命令别名 `ll`。\n\n- 可以把别名、shell 选项和常用函数保存在 `~/.bashrc`。这样做的话你就可以在所有 shell 会话中使用你的设定。\n\n- 把环境变量的设定以及登陆时要执行的命令保存在 `~/.bash_profile`。而对于从图形界面启动的 shell 和 `cron` 启动的 shell，则需要单独配置文件。\n\n- 要想在几台电脑中同步你的配置文件（例如 `.bashrc` 和 `.bash_profile`），可以借助 Git。\n\n- 当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 `\"$FOO\"`。尽量使用 `-0` 或 `-print0` 选项以便用 NULL 来分隔文件名，例如 `locate -0 pattern | xargs -0 ls -al` 或 `find / -print0 -type d | xargs -0 ls -al`。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 `IFS=$'\\n'` 把内部字段分隔符设为换行符。\n\n- 在 Bash 脚本中，使用 `set -x` 去调试输出（或者使用它的变体 `set -v`，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 `set -e` 令脚本在发生错误时退出而不是继续运行；使用 `set -u` 来检查是否使用了未赋值的变量；试试 `set -o pipefail`，它可以监测管道中的错误。当牵扯到很多脚本时，使用 `trap` 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：\n```bash\n      set -euo pipefail\n      trap \"echo 'error: Script failed: see failed command above'\" ERR\n```\n\n- 在 Bash 脚本中，子 shell（使用括号 `(...)`）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：\n```bash\n      # do something in current dir\n      (cd /some/other/dir && other-command)\n      # continue in original dir\n```\n\n- 在 Bash 中，变量有许多的扩展方式。`${name:?error message}` 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 `input_file=${1:?usage: $0 input_file}`。在变量为空时使用默认值：`${name:-default}`。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 `output_file=${2:-logfile}`，如果省略了 $2，它的值就为空，于是 `output_file` 就会被设为 `logfile`。数学表达式：`i=$(( (i + 1) % 5 ))`。序列：`{1..10}`。截断字符串：`${var%suffix}` 和 `${var#prefix}`。例如，假设 `var=foo.pdf`，那么 `echo ${var%.pdf}.txt` 将输出 `foo.txt`。\n\n- 使用括号扩展（`{`...`}`）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 `mv foo.{txt,pdf} some-dir`（同时移动两个文件），`cp somefile{,.bak}`（会被扩展成 `cp somefile somefile.bak`）或者 `mkdir -p test-{a,b,c}/subtest-{1,2,3}`（会被扩展成所有可能的组合，并创建一个目录树）。\n\n- 通过使用 `<(some command)` 可以将输出视为文件。例如，对比本地文件 `/etc/hosts` 和一个远程文件：\n```sh\n      diff /etc/hosts <(ssh somehost cat /etc/hosts)\n```\n\n- 编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。\n```bash\n{\n      # 在这里写代码\n}\n```\n\n- 了解 Bash 中的“here documents”，例如 `cat <<EOF ...`。\n\n- 在 Bash 中，同时重定向标准输出和标准错误：`some-command >logfile 2>&1` 或者 `some-command &>logfile`。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 `</dev/null` 是一个好习惯。\n\n- 使用 `man ascii` 查看具有十六进制和十进制值的ASCII表。`man unicode`，`man utf-8`，以及 `man latin1` 有助于你去了解通用的编码信息。\n\n- 使用 `screen` 或 [`tmux`](https://tmux.github.io/) 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 `byobu` 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 [`dtach`](https://github.com/bogner/dtach)。\n\n- ssh 中，了解如何使用 `-L` 或 `-D`（偶尔需要用 `-R`）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。\n\n- 对 ssh 设置做一些小优化可能是很有用的，例如这个 `~/.ssh/config` 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：\n```\n      TCPKeepAlive=yes\n      ServerAliveInterval=15\n      ServerAliveCountMax=6\n      Compression=yes\n      ControlMaster auto\n      ControlPath /tmp/%r@%h:%p\n      ControlPersist yes\n```\n\n- 一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 `StrictHostKeyChecking=no`，`ForwardAgent=yes`。\n\n- 考虑使用 [`mosh`](https://mosh.org/) 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。\n\n- 获取八进制形式的文件访问权限（修改系统设置时通常需要，但 `ls` 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：\n```sh\n      stat -c '%A %a %n' /etc/timezone\n```\n\n- 使用 [`percol`](https://github.com/mooz/percol) 或者 [`fzf`](https://github.com/junegunn/fzf) 可以交互式地从另一个命令输出中选取值。\n\n- 使用 `fpp`（[PathPicker](https://github.com/facebook/PathPicker)）可以与基于另一个命令(例如 `git`）输出的文件交互。\n\n- 将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：\n`python -m SimpleHTTPServer 7777` （使用端口 7777 和 Python 2）或`python -m http.server 7777` （使用端口 7777 和 Python 3）。\n\n- 以其他用户的身份执行命令，使用 `sudo`。默认以 root 用户的身份执行；使用 `-u` 来指定其他用户。使用 `-i` 来以该用户登录（需要输入_你自己的_密码）。\n\n- 将 shell 切换为其他用户，使用 `su username` 或者 `su - username`。加入 `-` 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。\n\n- 了解命令行的 [128K 限制](https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong)。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 `find` 或 `xargs` 通常可以解决。）\n\n- 当你需要一个基本的计算器时，可以使用 `python` 解释器（当然你要用 python 的时候也是这样）。例如：\n```\n>>> 2+3\n5\n```\n\n\n## 文件及数据处理\n\n- 在当前目录下通过文件名查找一个文件，使用类似于这样的命令：`find . -iname '*something*'`。在所有路径下通过文件名查找文件，使用 `locate something` （但注意到 `updatedb` 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。\n\n- 使用 [`ag`](https://github.com/ggreer/the_silver_searcher) 在源代码或数据文件里检索（`grep -r` 同样可以做到，但相比之下 `ag` 更加先进）。\n\n- 将 HTML 转为文本：`lynx -dump -stdin`。\n\n- Markdown，HTML，以及所有文档格式之间的转换，试试 [`pandoc`](http://pandoc.org/)。\n\n- 当你要处理棘手的 XML 时候，`xmlstarlet` 算是上古时代流传下来的神器。\n\n- 使用 [`jq`](http://stedolan.github.io/jq/) 处理 JSON。\n\n- 使用 [`shyaml`](https://github.com/0k/shyaml) 处理 YAML。\n\n- 要处理 Excel 或 CSV 文件的话，[csvkit](https://github.com/onyxfish/csvkit) 提供了 `in2csv`，`csvcut`，`csvjoin`，`csvgrep` 等方便易用的工具。\n\n- 当你要处理 Amazon S3 相关的工作的时候，[`s3cmd`](https://github.com/s3tools/s3cmd) 是一个很方便的工具而 [`s4cmd`](https://github.com/bloomreach/s4cmd) 的效率更高。Amazon 官方提供的 [`aws`](https://github.com/aws/aws-cli) 以及  [`saws`](https://github.com/donnemartin/saws) 是其他 AWS 相关工作的基础，值得学习。\n\n- 了解如何使用 `sort` 和 `uniq`，包括 uniq 的 `-u` 参数和 `-d` 参数，具体内容在后文单行脚本节中。另外可以了解一下 `comm`。\n\n- 了解如何使用 `cut`，`paste` 和 `join` 来更改文件。很多人都会使用 `cut`，但遗忘了 `join`。\n\n- 了解如何运用 `wc` 去计算新行数（`-l`），字符数（`-m`），单词数（`-w`）以及字节数（`-c`）。\n\n- 了解如何使用 `tee` 将标准输入复制到文件甚至标准输出，例如 `ls -al | tee file.txt`。\n\n- 要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 [`datamash`](https://www.gnu.org/software/datamash/)。\n\n- 注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 `LANG` 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降*许多倍*。某些情况下（例如集合运算）你可以放心的使用 `export LC_ALL=C` 来忽略掉国际化并按照字节来判断顺序。\n\n- 你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 `TZ=Pacific/Fiji date` 可以获取斐济的时间。\n\n- 了解如何使用 `awk` 和 `sed` 来进行简单的数据处理。 参阅 [One-liners](#one-liners) 获取示例。\n\n- 替换一个或多个文件中出现的字符串：\n```sh\n      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt\n```\n\n- 使用 [`repren`](https://github.com/jlevy/repren) 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 `rename` 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）\n```sh\n      # 将文件、目录和内容全部重命名 foo -> bar:\n      repren --full --preserve-case --from foo --to bar .\n      # 还原所有备份文件 whatever.bak -> whatever:\n      repren --renames --from '(.*)\\.bak' --to '\\1' *.bak\n      # 用 rename 实现上述功能（若可用）:\n      rename 's/\\.bak$//' *.bak\n```\n\n- 根据 man 页面的描述，`rsync` 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 `rsync` 代替 `scp` 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的[最快方法](https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html)之一：\n```sh\nmkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir\n```\n\n- 若要在复制文件时获取当前进度，可使用 `pv`，[`pycp`](https://github.com/dmerejkowsky/pycp)，[`progress`](https://github.com/Xfennec/progress)，`rsync --progress`。若所执行的复制为block块拷贝，可以使用 `dd status=progress`。\n\n- 使用 `shuf` 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。\n\n- 了解 `sort` 的参数。显示数字时，使用 `-n` 或者 `-h` 来显示更易读的数（例如 `du -h` 的输出）。明白排序时关键字的工作原理（`-t` 和 `-k`）。例如，注意到你需要 `-k1，1` 来仅按第一个域来排序，而 `-k1` 意味着按整行排序。稳定排序（`sort -s`）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 `sort -k1，1 | sort -s -k2，2`。\n\n- 如果你想在 Bash 命令行中写 tab 制表符，按下 **ctrl-v** **[Tab]** 或键入 `$'\\t'` （后者可能更好，因为你可以复制粘贴它）。\n\n- 标准的源代码对比及合并工具是 `diff` 和 `patch`。使用 `diffstat` 查看变更总览数据。注意到 `diff -r` 对整个文件夹有效。使用 `diff -r tree1 tree2 | diffstat` 查看变更的统计数据。`vimdiff` 用于比对并编辑文件。\n\n- 对于二进制文件，使用 `hd`，`hexdump` 或者 `xxd` 使其以十六进制显示，使用 `bvi`，`hexedit` 或者 `biew` 来进行二进制编辑。\n\n- 同样对于二进制文件，`strings`（包括 `grep` 等工具）可以帮助在二进制文件中查找特定比特。\n\n- 制作二进制差分文件（Delta 压缩），使用 `xdelta3`。\n\n- 使用 `iconv` 更改文本编码。需要更高级的功能，可以使用 `uconv`，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：\n```sh\n      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC; ' < input.txt > output.txt\n```\n\n- 拆分文件可以使用 `split`（按大小拆分）和 `csplit`（按模式拆分）。\n\n- 操作日期和时间表达式，可以用 [`dateutils`](http://www.fresse.org/dateutils/) 中的 `dateadd`、`datediff`、`strptime` 等工具。\n\n- 使用 `zless`、`zmore`、`zcat` 和 `zgrep` 对压缩过的文件进行操作。\n\n- 文件属性可以通过 `chattr` 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：`sudo chattr +i /critical/directory/or/file`\n\n- 使用 `getfacl` 和 `setfacl` 以保存和恢复文件权限。例如：\n```sh\n   getfacl -R /some/path > permissions.txt\n   setfacl --restore=permissions.txt\n```\n\n- 为了高效地创建空文件，请使用 `truncate`（创建[稀疏文件](https://zh.wikipedia.org/wiki/稀疏文件)），`fallocate`（用于 ext4，xfs，btrf 和 ocfs2 文件系统），`xfs_mkfile`（适用于几乎所有的文件系统，包含在 xfsprogs 包中），`mkfile`（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。\n\n## 系统调试\n\n- `curl` 和 `curl -I` 可以被轻松地应用于 web 调试中，它们的好兄弟 `wget` 也是如此，或者也可以试试更潮的 [`httpie`](https://github.com/jkbrzt/httpie)。\n\n- 获取 CPU 和硬盘的使用状态，通常使用使用 `top`（`htop` 更佳），`iostat` 和 `iotop`。而 `iostat -mxz 15` 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。\n\n- 使用 `netstat` 和 `ss` 查看网络连接的细节。\n\n- `dstat` 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 [`glances`](https://github.com/nicolargo/glances)，它会在一个终端窗口中向你提供一些系统级的数据。\n\n- 若要了解内存状态，运行并理解 `free` 和 `vmstat` 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。\n\n- Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 `kill -3 <pid>` 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 `jps`，`jstat`，`jstack`，`jmap` 很有用。[SJK tools](https://github.com/aragozin/jvm-tools) 更高级。\n\n- 使用 [`mtr`](http://www.bitwizard.nl/mtr/) 去跟踪路由，用于确定网络问题。\n\n- 用 [`ncdu`](https://dev.yorhel.nl/ncdu) 来查看磁盘使用情况，它比寻常的命令，如 `du -sh *`，更节省时间。\n\n- 查找正在使用带宽的套接字连接或进程，使用 [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) 或 [`nethogs`](https://github.com/raboof/nethogs)。\n\n- `ab` 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 `siege`。\n\n- [`wireshark`](https://wireshark.org/)，[`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html) 和 [`ngrep`](http://ngrep.sourceforge.net/) 可用于复杂的网络调试。\n\n- 了解 `strace` 和 `ltrace`。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（`-c`）和附加到一个运行的进程参数 （`-p`）。\n\n- 了解使用 `ldd` 来检查共享库。但是[永远不要在不信任的文件上运行](http://www.catonmat.net/blog/ldd-arbitrary-code-execution/)。\n\n- 了解如何运用 `gdb` 连接到一个运行着的进程并获取它的堆栈轨迹。\n\n- 学会使用 `/proc`。它在调试正在出现的问题的时候有时会效果惊人。比如：`/proc/cpuinfo`，`/proc/meminfo`，`/proc/cmdline`，`/proc/xxx/cwd`，`/proc/xxx/exe`，`/proc/xxx/fd/`，`/proc/xxx/smaps`（这里的 `xxx` 表示进程的 id 或 pid）。\n\n- 当调试一些之前出现的问题的时候，[`sar`](http://sebastien.godard.pagesperso-orange.fr/) 非常有用。它展示了 cpu、内存以及网络等的历史数据。\n\n- 关于更深层次的系统分析以及性能分析，看看 `stap`（[SystemTap](https://sourceware.org/systemtap/wiki)），[`perf`](https://en.wikipedia.org/wiki/Perf_(Linux))，以及[`sysdig`](https://github.com/draios/sysdig)。\n\n- 查看你当前使用的系统，使用 `uname`，`uname -a`（Unix／kernel 信息）或者 `lsb_release -a`（Linux 发行版信息）。\n\n- 无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 `dmesg`。\n\n- 如果你删除了一个文件，但通过 `du` 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：\n`lsof | grep deleted | grep \"filename-of-my-big-file\"`\n\n\n## 单行脚本\n\n一些命令组合的例子：\n\n- 当你需要对文本文件做集合交、并、差运算时，`sort` 和 `uniq` 会是你的好帮手。具体例子请参照代码后面的，此处假设 `a` 与 `b` 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 `/tmp` 在一个小的根分区上时你可能需要 `-T` 参数，但是实际上 `sort` 并不被内存大小约束），参阅前文中关于 `LC_ALL` 和 `sort` 的 `-u` 参数的部分。\n```sh\n      sort a b | uniq > c   # c 是 a 并 b\n      sort a b | uniq -d > c   # c 是 a 交 b\n      sort a b b | uniq -u > c   # c 是 a - b\n```\n\n- 使用 `grep . *`（每行都会附上文件名）或者 `head -100 *`（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 `/sys`、`/proc`、`/etc`）时特别好用。\n\n\n- 计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：\n```sh\n      awk '{ x += $3 } END { print x }' myfile\n```\n\n- 如果你想在文件树上查看大小/日期，这可能看起来像递归版的 `ls -l` 但比 `ls -lR` 更易于理解：\n```sh\n      find . -type f -ls\n```\n\n- 假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 `acct_id` 参数在 URI 中。如果你想计算出每个 `acct_id` 值有多少次请求，使用如下代码：\n```sh\n      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn\n```\n\n- 要持续监测文件改动，可以使用 `watch`，例如检查某个文件夹中文件的改变，可以用 `watch -d -n 2 'ls -rtlh | tail'`；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 `watch -d -n 2 ifconfig`。\n\n- 运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：\n```sh\n      function taocl() {\n        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|\n          pandoc -f markdown -t html |\n          iconv -f 'utf-8' -t 'unicode' |\n          xmlstarlet fo --html --dropdtd |\n          xmlstarlet sel -t -v \"(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]\" |\n          xmlstarlet unesc | fmt -80\n      }\n```\n\n## 冷门但有用\n\n- `expr`：计算表达式或正则匹配\n\n- `m4`：简单的宏处理器\n\n- `yes`：多次打印字符串\n\n- `cal`：漂亮的日历\n\n- `env`：执行一个命令（脚本文件中很有用）\n\n- `printenv`：打印环境变量（调试时或在写脚本文件时很有用）\n\n- `look`：查找以特定字符串开头的单词或行\n\n- `cut`，`paste` 和 `join`：数据修改\n\n- `fmt`：格式化文本段落\n\n- `pr`：将文本格式化成页／列形式\n\n- `fold`：包裹文本中的几行\n\n- `column`：将文本格式化成多个对齐、定宽的列或表格\n\n- `expand` 和 `unexpand`：制表符与空格之间转换\n\n- `nl`：添加行号\n\n- `seq`：打印数字\n\n- `bc`：计算器\n\n- `factor`：分解因数\n\n- [`gpg`](https://gnupg.org/)：加密并签名文件\n\n- `toe`：terminfo 入口列表\n\n- `nc`：网络调试及数据传输\n\n- `socat`：套接字代理，与 `netcat` 类似\n\n- [`slurm`](https://github.com/mattthias/slurm)：网络流量可视化\n\n- `dd`：文件或设备间传输数据\n\n- `file`：确定文件类型\n\n- `tree`：以树的形式显示路径和文件，类似于递归的 `ls`\n\n- `stat`：文件信息\n\n- `time`：执行命令，并计算执行时间\n\n- `timeout`：在指定时长范围内执行命令，并在规定时间结束后停止进程\n\n- `lockfile`：使文件只能通过 `rm -f` 移除\n\n- `logrotate`： 切换、压缩以及发送日志文件\n\n- `watch`：重复运行同一个命令，展示结果并／或高亮有更改的部分\n\n- [`when-changed`](https://github.com/joh/when-changed)：当检测到文件更改时执行指定命令。参阅 `inotifywait` 和 `entr`。\n\n- `tac`：反向输出文件\n\n- `shuf`：文件中随机选取几行\n\n- `comm`：一行一行的比较排序过的文件\n\n- `strings`：从二进制文件中抽取文本\n\n- `tr`：转换字母\n\n- `iconv` 或 `uconv`：文本编码转换\n\n- `split` 和 `csplit`：分割文件\n\n- `sponge`：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 `grep -v something some-file | sponge some-file`\n\n- `units`：将一种计量单位转换为另一种等效的计量单位（参阅 `/usr/share/units/definitions.units`）\n\n- `apg`：随机生成密码\n\n- `xz`：高比例的文件压缩\n\n- `ldd`：动态库信息\n\n- `nm`：提取 obj 文件中的符号\n\n- `ab` 或 [`wrk`](https://github.com/wg/wrk)：web 服务器性能分析\n\n- `strace`：调试系统调用\n\n- [`mtr`](http://www.bitwizard.nl/mtr/)：更好的网络调试跟踪工具\n\n- `cssh`：可视化的并发 shell\n\n- `rsync`：通过 ssh 或本地文件系统同步文件和文件夹\n\n- [`wireshark`](https://wireshark.org/) 和 [`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html)：抓包和网络调试工具\n\n- [`ngrep`](http://ngrep.sourceforge.net/)：网络层的 grep\n\n- `host` 和 `dig`：DNS 查找\n\n- `lsof`：列出当前系统打开文件的工具以及查看端口信息\n\n- `dstat`：系统状态查看\n\n- [`glances`](https://github.com/nicolargo/glances)：高层次的多子系统总览\n\n- `iostat`：硬盘使用状态\n\n- `mpstat`： CPU 使用状态\n\n- `vmstat`： 内存使用状态\n\n- `htop`：top 的加强版\n\n- `last`：登入记录\n\n- `w`：查看处于登录状态的用户\n\n- `id`：用户/组 ID 信息\n\n- [`sar`](http://sebastien.godard.pagesperso-orange.fr/)：系统历史数据\n\n- [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) 或 [`nethogs`](https://github.com/raboof/nethogs)：套接字及进程的网络利用情况\n\n- `ss`：套接字数据\n\n- `dmesg`：引导及系统错误信息\n\n- `sysctl`： 在内核运行时动态地查看和修改内核的运行参数\n\n- `hdparm`：SATA/ATA 磁盘更改及性能分析\n\n- `lsblk`：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息\n\n- `lshw`，`lscpu`，`lspci`，`lsusb` 和 `dmidecode`：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等\n\n- `lsmod` 和 `modinfo`：列出内核模块，并显示其细节\n\n- `fortune`，`ddate` 和 `sl`：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”\n\n\n## 仅限 OS X 系统\n\n以下是*仅限于* OS X 系统的技巧。\n\n- 用 `brew` （Homebrew）或者 `port` （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。\n\n- 用 `pbcopy` 复制任何命令的输出到桌面应用，用 `pbpaste` 粘贴输入。\n\n- 若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 **alt-b**、**alt-f** 等命令中用到），打开 偏好设置 -> 描述文件 -> 键盘 并勾选“使用 Option 键作为 Meta 键”。\n\n- 用 `open` 或者 `open -a /Applications/Whatever.app` 使用桌面应用打开文件。\n\n- Spotlight：用 `mdfind` 搜索文件，用 `mdls` 列出元数据（例如照片的 EXIF 信息）。\n\n- 注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 `ps`，`ls`，`tail`，`awk`，`sed`）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 \"BSD General Commands Manual\" 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 `gawk` 和 `gsed` 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 `perl` ）或者经过仔细的测试。\n\n- 用 `sw_vers` 获取 OS X 的版本信息。\n\n## 仅限 Windows 系统\n\n以下是*仅限于* Windows 系统的技巧。\n\n### 在 Windows 下获取 Unix 工具\n\n- 可以安装 [Cygwin](https://cygwin.com/) 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。\n\n- 在 Windows 10 上，你可以使用 [Bash on Ubuntu on Windows](https://msdn.microsoft.com/commandline/wsl/about)，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。\n\n- 如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 [MinGW](http://www.mingw.org/) 以及它的 [MSYS](http://www.mingw.org/wiki/msys) 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。\n\n- 另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 [Cash](https://github.com/dthree/cash)。注意在此环境下只有很少的 Unix 命令和命令行可用。\n\n### 实用 Windows 命令行工具\n\n- 可以使用 `wmic` 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。\n\n- Windows 实用的原生命令行网络工具包括 `ping`，`ipconfig`，`tracert`，和 `netstat`。\n\n- 可以使用 `Rundll32` 命令来实现[许多有用的 Windows 任务](http://www.thewindowsclub.com/rundll32-shortcut-commands-windows) 。\n\n### Cygwin 技巧\n\n- 通过 Cygwin 的包管理器来安装额外的 Unix 程序。\n\n- 使用 `mintty` 作为你的命令行窗口。\n\n- 要访问 Windows 剪贴板，可以通过 `/dev/clipboard`。\n\n- 运行 `cygstart` 以通过默认程序打开一个文件。\n\n- 要访问 Windows 注册表，可以使用 `regtool`。\n\n- 注意 Windows 驱动器路径 `C:\\` 在 Cygwin 中用 `/cygdrive/c` 代表，而 Cygwin 的 `/` 代表 Windows 中的 `C:\\cygwin`。要转换 Cygwin 和 Windows 风格的路径可以用 `cygpath`。这在需要调用 Windows 程序的脚本里很有用。\n\n- 学会使用 `wmic`，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。\n\n- 要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 [Cash](https://github.com/dthree/cash)。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。\n\n- 要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 [MinGW](http://www.mingw.org/) 以及它的 [MSYS](http://www.mingw.org/wiki/msys) 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。\n","slug":"命令行的艺术","published":1,"updated":"2024-03-02T11:02:25.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt9z55mh000ukogph0tz9fun","content":"<h1 id=\"命令行的艺术\"><a href=\"#命令行的艺术\" class=\"headerlink\" title=\"命令行的艺术\"></a>命令行的艺术</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80\">基础</a></li>\n<li><a href=\"#%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8\">日常使用</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86\">文件及数据处理</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95\">系统调试</a></li>\n<li><a href=\"#%E5%8D%95%E8%A1%8C%E8%84%9A%E6%9C%AC\">单行脚本</a></li>\n<li><a href=\"#%E5%86%B7%E9%97%A8%E4%BD%86%E6%9C%89%E7%94%A8\">冷门但有用</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F\">仅限 OS X 系统</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F\">仅限 Windows 系统</a></li>\n</ul>\n<p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>涵盖范围：</p>\n<ul>\n<li>这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到<em>覆盖面广</em>（涉及所有重要的内容），<em>具体</em>（给出具体的最常用的例子），以及<em>简洁</em>（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。</li>\n<li>本文主要为 Linux 所写，但在<a href=\"#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F\">仅限 OS X 系统</a>章节和<a href=\"#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F\">仅限 Windows 系统</a>章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。</li>\n<li>本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。</li>\n<li>除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。</li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code>，<code>pacman</code>，<br><code>pip</code> 或 <code>brew</code>（以及其它合适的包管理器）来安装依赖的程序。</li>\n<li>遇到问题的话，请尝试使用 <a href=\"http://explainshell.com/\">Explainshell</a> 去获取相关命令、参数、管道等内容的解释。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p>学习 Bash 的基础知识。具体地，在命令行中输入 <code>man bash</code> 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你<em>只</em>学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。</p>\n</li>\n<li><p>熟悉至少一个基于文本的编辑器。通常而言 Vim （<code>vi</code>） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。</p>\n</li>\n<li><p>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。你可以用 <code>type 命令</code> 来判断这个命令到底是可执行文件、shell 内置命令还是别名。</p>\n</li>\n<li><p>学会使用 <code>&gt;</code> 和 <code>&lt;</code> 来重定向输出和输入，学会使用 <code>|</code> 来重定向管道。明白 <code>&gt;</code> 会覆盖了输出文件而 <code>&gt;&gt;</code> 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。</p>\n</li>\n<li><p>学会使用通配符 <code>*</code> （或许再算上 <code>?</code> 和 <code>[</code>…<code>]</code>） 和引用以及引用中 <code>&#39;</code> 和 <code>&quot;</code> 的区别（后文中有一些具体的例子）。</p>\n</li>\n<li><p>熟悉 Bash 中的任务管理工具：<code>&amp;</code>，<strong>ctrl-z</strong>，<strong>ctrl-c</strong>，<code>jobs</code>，<code>fg</code>，<code>bg</code>，<code>kill</code> 等。</p>\n</li>\n<li><p>学会使用 <code>ssh</code> 进行远程命令行登录，最好知道如何使用 <code>ssh-agent</code>，<code>ssh-add</code> 等命令来实现基础的无密码认证登录。</p>\n</li>\n<li><p>学会基本的文件管理工具：<code>ls</code> 和 <code>ls -l</code> （了解 <code>ls -l</code> 中每一列代表的意义），<code>less</code>，<code>head</code>，<code>tail</code> 和 <code>tail -f</code> （甚至 <code>less +F</code>），<code>ln</code> 和 <code>ln -s</code> （了解硬链接与软链接的区别），<code>chown</code>，<code>chmod</code>，<code>du</code> （硬盘使用情况概述：<code>du -hs *</code>）。 关于文件系统的管理，学习 <code>df</code>，<code>mount</code>，<code>fdisk</code>，<code>mkfs</code>，<code>lsblk</code>。知道 inode 是什么（与 <code>ls -i</code> 和 <code>df -i</code> 等命令相关）。</p>\n</li>\n<li><p>学习基本的网络管理工具：<code>ip</code> 或 <code>ifconfig</code>，<code>dig</code>。</p>\n</li>\n<li><p>学习并使用一种版本控制管理系统，例如 <code>git</code>。</p>\n</li>\n<li><p>熟悉正则表达式，学会使用 <code>grep</code>／<code>egrep</code>，它们的参数中 <code>-i</code>，<code>-o</code>，<code>-v</code>，<code>-A</code>，<code>-B</code> 和 <code>-C</code> 这些是很常用并值得认真学习的。</p>\n</li>\n<li><p>学会使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code> 或 <code>pacman</code> （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 <code>pip</code> 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 <code>pip</code> 来安装会很方便）。</p>\n</li>\n</ul>\n<h2 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h2><ul>\n<li><p>在 Bash 中，可以通过按 <strong>Tab</strong> 键实现自动补全参数，使用 <strong>ctrl-r</strong> 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 <strong>ctrl-r</strong> 会向后查找匹配项，按下 <strong>Enter</strong> 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。</p>\n</li>\n<li><p>在 Bash 中，可以按下 <strong>ctrl-w</strong> 删除你键入的最后一个单词，<strong>ctrl-u</strong> 可以删除行内光标所在位置之前的内容，<strong>alt-b</strong> 和 <strong>alt-f</strong> 可以以单词为单位移动光标，<strong>ctrl-a</strong> 可以将光标移至行首，<strong>ctrl-e</strong> 可以将光标移至行尾，<strong>ctrl-k</strong> 可以删除光标至行尾的所有内容，<strong>ctrl-l</strong> 可以清屏。键入 <code>man readline</code> 可以查看 Bash 中的默认快捷键。内容有很多，例如 <strong>alt-.</strong> 循环地移向前一个参数，而 <strong>alt-</strong>* 可以展开通配符。</p>\n</li>\n<li><p>你喜欢的话，可以执行 <code>set -o vi</code> 来使用 vi 风格的快捷键，而执行 <code>set -o emacs</code> 可以把它改回来。</p>\n</li>\n<li><p>为了便于编辑长命令，在设置你的默认编辑器后（例如 <code>export EDITOR=vim</code>），<strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 <strong>escape-v</strong>。</p>\n</li>\n<li><p>键入 <code>history</code> 查看命令行历史记录，再用 <code>!n</code>（<code>n</code> 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 <code>!$</code>， 它用于指代上次键入的参数，而 <code>!!</code> 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 <strong>ctrl-r</strong> 和 <strong>alt-.</strong> 来实现。</p>\n</li>\n<li><p><code>cd</code> 命令可以切换工作路径，输入 <code>cd ~</code> 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 <code>~</code>（例如 <code>~/.bashrc</code>）。在 <code>sh</code> 脚本里则用环境变量 <code>$HOME</code> 指代 home 目录的路径。</p>\n</li>\n<li><p>回到前一个工作路径：<code>cd -</code>。</p>\n</li>\n<li><p>如果你输入命令的时候中途改了主意，按下 <strong>alt-#</strong> 在行首添加 <code>#</code> 把它当做注释再按下回车执行（或者依次按下 <strong>ctrl-a</strong>， **#**， <strong>enter</strong>）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。</p>\n</li>\n<li><p>使用 <code>xargs</code> （ 或 <code>parallel</code>）。他们非常给力。注意到你可以控制每行参数个数（<code>-L</code>）和最大并行数（<code>-P</code>）。如果你不确定它们是否会按你想的那样工作，先使用 <code>xargs echo</code> 查看一下。此外，使用 <code>-I&#123;&#125;</code> 会很方便。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">&#x27;*.py&#x27;</span> | xargs grep some_function</span><br><span class=\"line\"><span class=\"built_in\">cat</span> hosts | xargs -I&#123;&#125; ssh root@&#123;&#125; hostname</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p><code>pstree -p</code> 以一种优雅的方式展示进程树。</p>\n</li>\n<li><p>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（<code>-f</code> 参数通常有用）。</p>\n</li>\n<li><p>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code> 停止一个进程。使用 <code>man 7 signal</code> 查看详细列表。</p>\n</li>\n<li><p>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行。</p>\n</li>\n<li><p>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 <code>-u</code> 则检查 UDP 端口）或者 <code>lsof -iTCP -sTCP:LISTEN -P -n</code> (这也可以在 OS X 上运行)。</p>\n</li>\n<li><p><code>lsof</code> 来查看开启的套接字和文件。</p>\n</li>\n<li><p>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</p>\n</li>\n<li><p>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 创建了一个新的命令别名 <code>ll</code>。</p>\n</li>\n<li><p>可以把别名、shell 选项和常用函数保存在 <code>~/.bashrc</code>。这样做的话你就可以在所有 shell 会话中使用你的设定。</p>\n</li>\n<li><p>把环境变量的设定以及登陆时要执行的命令保存在 <code>~/.bash_profile</code>。而对于从图形界面启动的 shell 和 <code>cron</code> 启动的 shell，则需要单独配置文件。</p>\n</li>\n<li><p>要想在几台电脑中同步你的配置文件（例如 <code>.bashrc</code> 和 <code>.bash_profile</code>），可以借助 Git。</p>\n</li>\n<li><p>当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 <code>&quot;$FOO&quot;</code>。尽量使用 <code>-0</code> 或 <code>-print0</code> 选项以便用 NULL 来分隔文件名，例如 <code>locate -0 pattern | xargs -0 ls -al</code> 或 <code>find / -print0 -type d | xargs -0 ls -al</code>。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 <code>IFS=$&#39;\\n&#39;</code> 把内部字段分隔符设为换行符。</p>\n</li>\n<li><p>在 Bash 脚本中，使用 <code>set -x</code> 去调试输出（或者使用它的变体 <code>set -v</code>，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 <code>set -e</code> 令脚本在发生错误时退出而不是继续运行；使用 <code>set -u</code> 来检查是否使用了未赋值的变量；试试 <code>set -o pipefail</code>，它可以监测管道中的错误。当牵扯到很多脚本时，使用 <code>trap</code> 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -euo pipefail</span><br><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;echo &#x27;error: Script failed: see failed command above&#x27;&quot;</span> ERR</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Bash 脚本中，子 shell（使用括号 <code>(...)</code>）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># do something in current dir</span></span><br><span class=\"line\">(<span class=\"built_in\">cd</span> /some/other/dir &amp;&amp; other-command)</span><br><span class=\"line\"><span class=\"comment\"># continue in original dir</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Bash 中，变量有许多的扩展方式。<code>$&#123;name:?error message&#125;</code> 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 <code>input_file=$&#123;1:?usage: $0 input_file&#125;</code>。在变量为空时使用默认值：<code>$&#123;name:-default&#125;</code>。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 <code>output_file=$&#123;2:-logfile&#125;</code>，如果省略了 $2，它的值就为空，于是 <code>output_file</code> 就会被设为 <code>logfile</code>。数学表达式：<code>i=$(( (i + 1) % 5 ))</code>。序列：<code>&#123;1..10&#125;</code>。截断字符串：<code>$&#123;var%suffix&#125;</code> 和 <code>$&#123;var#prefix&#125;</code>。例如，假设 <code>var=foo.pdf</code>，那么 <code>echo $&#123;var%.pdf&#125;.txt</code> 将输出 <code>foo.txt</code>。</p>\n</li>\n<li><p>使用括号扩展（<code>&#123;</code>…<code>&#125;</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.&#123;txt,pdf&#125; some-dir</code>（同时移动两个文件），<code>cp somefile&#123;,.bak&#125;</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-&#123;a,b,c&#125;/subtest-&#123;1,2,3&#125;</code>（会被扩展成所有可能的组合，并创建一个目录树）。</p>\n</li>\n<li><p>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff /etc/hosts &lt;(ssh somehost <span class=\"built_in\">cat</span> /etc/hosts)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"comment\"># 在这里写代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>了解 Bash 中的“here documents”，例如 <code>cat &lt;&lt;EOF ...</code>。</p>\n</li>\n<li><p>在 Bash 中，同时重定向标准输出和标准错误：<code>some-command &gt;logfile 2&gt;&amp;1</code> 或者 <code>some-command &amp;&gt;logfile</code>。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 <code>&lt;/dev/null</code> 是一个好习惯。</p>\n</li>\n<li><p>使用 <code>man ascii</code> 查看具有十六进制和十进制值的ASCII表。<code>man unicode</code>，<code>man utf-8</code>，以及 <code>man latin1</code> 有助于你去了解通用的编码信息。</p>\n</li>\n<li><p>使用 <code>screen</code> 或 <a href=\"https://tmux.github.io/\"><code>tmux</code></a> 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 <code>byobu</code> 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 <a href=\"https://github.com/bogner/dtach\"><code>dtach</code></a>。</p>\n</li>\n<li><p>ssh 中，了解如何使用 <code>-L</code> 或 <code>-D</code>（偶尔需要用 <code>-R</code>）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。</p>\n</li>\n<li><p>对 ssh 设置做一些小优化可能是很有用的，例如这个 <code>~/.ssh/config</code> 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCPKeepAlive=yes</span><br><span class=\"line\">ServerAliveInterval=15</span><br><span class=\"line\">ServerAliveCountMax=6</span><br><span class=\"line\">Compression=yes</span><br><span class=\"line\">ControlMaster auto</span><br><span class=\"line\">ControlPath /tmp/%r@%h:%p</span><br><span class=\"line\">ControlPersist yes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 <code>StrictHostKeyChecking=no</code>，<code>ForwardAgent=yes</code>。</p>\n</li>\n<li><p>考虑使用 <a href=\"https://mosh.org/\"><code>mosh</code></a> 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。</p>\n</li>\n<li><p>获取八进制形式的文件访问权限（修改系统设置时通常需要，但 <code>ls</code> 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">&#x27;%A %a %n&#x27;</span> /etc/timezone</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <a href=\"https://github.com/mooz/percol\"><code>percol</code></a> 或者 <a href=\"https://github.com/junegunn/fzf\"><code>fzf</code></a> 可以交互式地从另一个命令输出中选取值。</p>\n</li>\n<li><p>使用 <code>fpp</code>（<a href=\"https://github.com/facebook/PathPicker\">PathPicker</a>）可以与基于另一个命令(例如 <code>git</code>）输出的文件交互。</p>\n</li>\n<li><p>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：<br><code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或<code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</p>\n</li>\n<li><p>以其他用户的身份执行命令，使用 <code>sudo</code>。默认以 root 用户的身份执行；使用 <code>-u</code> 来指定其他用户。使用 <code>-i</code> 来以该用户登录（需要输入_你自己的_密码）。</p>\n</li>\n<li><p>将 shell 切换为其他用户，使用 <code>su username</code> 或者 <code>su - username</code>。加入 <code>-</code> 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。</p>\n</li>\n<li><p>了解命令行的 <a href=\"https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong\">128K 限制</a>。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 <code>find</code> 或 <code>xargs</code> 通常可以解决。）</p>\n</li>\n<li><p>当你需要一个基本的计算器时，可以使用 <code>python</code> 解释器（当然你要用 python 的时候也是这样）。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 2+3</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"文件及数据处理\"><a href=\"#文件及数据处理\" class=\"headerlink\" title=\"文件及数据处理\"></a>文件及数据处理</h2><ul>\n<li><p>在当前目录下通过文件名查找一个文件，使用类似于这样的命令：<code>find . -iname &#39;*something*&#39;</code>。在所有路径下通过文件名查找文件，使用 <code>locate something</code> （但注意到 <code>updatedb</code> 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/ggreer/the_silver_searcher\"><code>ag</code></a> 在源代码或数据文件里检索（<code>grep -r</code> 同样可以做到，但相比之下 <code>ag</code> 更加先进）。</p>\n</li>\n<li><p>将 HTML 转为文本：<code>lynx -dump -stdin</code>。</p>\n</li>\n<li><p>Markdown，HTML，以及所有文档格式之间的转换，试试 <a href=\"http://pandoc.org/\"><code>pandoc</code></a>。</p>\n</li>\n<li><p>当你要处理棘手的 XML 时候，<code>xmlstarlet</code> 算是上古时代流传下来的神器。</p>\n</li>\n<li><p>使用 <a href=\"http://stedolan.github.io/jq/\"><code>jq</code></a> 处理 JSON。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/0k/shyaml\"><code>shyaml</code></a> 处理 YAML。</p>\n</li>\n<li><p>要处理 Excel 或 CSV 文件的话，<a href=\"https://github.com/onyxfish/csvkit\">csvkit</a> 提供了 <code>in2csv</code>，<code>csvcut</code>，<code>csvjoin</code>，<code>csvgrep</code> 等方便易用的工具。</p>\n</li>\n<li><p>当你要处理 Amazon S3 相关的工作的时候，<a href=\"https://github.com/s3tools/s3cmd\"><code>s3cmd</code></a> 是一个很方便的工具而 <a href=\"https://github.com/bloomreach/s4cmd\"><code>s4cmd</code></a> 的效率更高。Amazon 官方提供的 <a href=\"https://github.com/aws/aws-cli\"><code>aws</code></a> 以及  <a href=\"https://github.com/donnemartin/saws\"><code>saws</code></a> 是其他 AWS 相关工作的基础，值得学习。</p>\n</li>\n<li><p>了解如何使用 <code>sort</code> 和 <code>uniq</code>，包括 uniq 的 <code>-u</code> 参数和 <code>-d</code> 参数，具体内容在后文单行脚本节中。另外可以了解一下 <code>comm</code>。</p>\n</li>\n<li><p>了解如何使用 <code>cut</code>，<code>paste</code> 和 <code>join</code> 来更改文件。很多人都会使用 <code>cut</code>，但遗忘了 <code>join</code>。</p>\n</li>\n<li><p>了解如何运用 <code>wc</code> 去计算新行数（<code>-l</code>），字符数（<code>-m</code>），单词数（<code>-w</code>）以及字节数（<code>-c</code>）。</p>\n</li>\n<li><p>了解如何使用 <code>tee</code> 将标准输入复制到文件甚至标准输出，例如 <code>ls -al | tee file.txt</code>。</p>\n</li>\n<li><p>要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 <a href=\"https://www.gnu.org/software/datamash/\"><code>datamash</code></a>。</p>\n</li>\n<li><p>注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 <code>LANG</code> 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降<em>许多倍</em>。某些情况下（例如集合运算）你可以放心的使用 <code>export LC_ALL=C</code> 来忽略掉国际化并按照字节来判断顺序。</p>\n</li>\n<li><p>你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 <code>TZ=Pacific/Fiji date</code> 可以获取斐济的时间。</p>\n</li>\n<li><p>了解如何使用 <code>awk</code> 和 <code>sed</code> 来进行简单的数据处理。 参阅 <a href=\"#one-liners\">One-liners</a> 获取示例。</p>\n</li>\n<li><p>替换一个或多个文件中出现的字符串：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl -pi.bak -e <span class=\"string\">&#x27;s/old-string/new-string/g&#x27;</span> my-files-*.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <a href=\"https://github.com/jlevy/repren\"><code>repren</code></a> 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 <code>rename</code> 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文件、目录和内容全部重命名 foo -&gt; bar:</span></span><br><span class=\"line\">repren --full --preserve-case --from foo --to bar .</span><br><span class=\"line\"><span class=\"comment\"># 还原所有备份文件 whatever.bak -&gt; whatever:</span></span><br><span class=\"line\">repren --renames --from <span class=\"string\">&#x27;(.*)\\.bak&#x27;</span> --to <span class=\"string\">&#x27;\\1&#x27;</span> *.bak</span><br><span class=\"line\"><span class=\"comment\"># 用 rename 实现上述功能（若可用）:</span></span><br><span class=\"line\">rename <span class=\"string\">&#x27;s/\\.bak$//&#x27;</span> *.bak</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据 man 页面的描述，<code>rsync</code> 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 <code>rsync</code> 代替 <code>scp</code> 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的<a href=\"https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html\">最快方法</a>之一：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; <span class=\"built_in\">rmdir</span> some-dir</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若要在复制文件时获取当前进度，可使用 <code>pv</code>，<a href=\"https://github.com/dmerejkowsky/pycp\"><code>pycp</code></a>，<a href=\"https://github.com/Xfennec/progress\"><code>progress</code></a>，<code>rsync --progress</code>。若所执行的复制为block块拷贝，可以使用 <code>dd status=progress</code>。</p>\n</li>\n<li><p>使用 <code>shuf</code> 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。</p>\n</li>\n<li><p>了解 <code>sort</code> 的参数。显示数字时，使用 <code>-n</code> 或者 <code>-h</code> 来显示更易读的数（例如 <code>du -h</code> 的输出）。明白排序时关键字的工作原理（<code>-t</code> 和 <code>-k</code>）。例如，注意到你需要 <code>-k1，1</code> 来仅按第一个域来排序，而 <code>-k1</code> 意味着按整行排序。稳定排序（<code>sort -s</code>）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 <code>sort -k1，1 | sort -s -k2，2</code>。</p>\n</li>\n<li><p>如果你想在 Bash 命令行中写 tab 制表符，按下 <strong>ctrl-v</strong> <strong>[Tab]</strong> 或键入 <code>$&#39;\\t&#39;</code> （后者可能更好，因为你可以复制粘贴它）。</p>\n</li>\n<li><p>标准的源代码对比及合并工具是 <code>diff</code> 和 <code>patch</code>。使用 <code>diffstat</code> 查看变更总览数据。注意到 <code>diff -r</code> 对整个文件夹有效。使用 <code>diff -r tree1 tree2 | diffstat</code> 查看变更的统计数据。<code>vimdiff</code> 用于比对并编辑文件。</p>\n</li>\n<li><p>对于二进制文件，使用 <code>hd</code>，<code>hexdump</code> 或者 <code>xxd</code> 使其以十六进制显示，使用 <code>bvi</code>，<code>hexedit</code> 或者 <code>biew</code> 来进行二进制编辑。</p>\n</li>\n<li><p>同样对于二进制文件，<code>strings</code>（包括 <code>grep</code> 等工具）可以帮助在二进制文件中查找特定比特。</p>\n</li>\n<li><p>制作二进制差分文件（Delta 压缩），使用 <code>xdelta3</code>。</p>\n</li>\n<li><p>使用 <code>iconv</code> 更改文本编码。需要更高级的功能，可以使用 <code>uconv</code>，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uconv -f utf-8 -t utf-8 -x <span class=\"string\">&#x27;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; &#x27;</span> &lt; input.txt &gt; output.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拆分文件可以使用 <code>split</code>（按大小拆分）和 <code>csplit</code>（按模式拆分）。</p>\n</li>\n<li><p>操作日期和时间表达式，可以用 <a href=\"http://www.fresse.org/dateutils/\"><code>dateutils</code></a> 中的 <code>dateadd</code>、<code>datediff</code>、<code>strptime</code> 等工具。</p>\n</li>\n<li><p>使用 <code>zless</code>、<code>zmore</code>、<code>zcat</code> 和 <code>zgrep</code> 对压缩过的文件进行操作。</p>\n</li>\n<li><p>文件属性可以通过 <code>chattr</code> 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：<code>sudo chattr +i /critical/directory/or/file</code></p>\n</li>\n<li><p>使用 <code>getfacl</code> 和 <code>setfacl</code> 以保存和恢复文件权限。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl -R /some/path &gt; permissions.txt</span><br><span class=\"line\">setfacl --restore=permissions.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了高效地创建空文件，请使用 <code>truncate</code>（创建<a href=\"https://zh.wikipedia.org/wiki/%E7%A8%80%E7%96%8F%E6%96%87%E4%BB%B6\">稀疏文件</a>），<code>fallocate</code>（用于 ext4，xfs，btrf 和 ocfs2 文件系统），<code>xfs_mkfile</code>（适用于几乎所有的文件系统，包含在 xfsprogs 包中），<code>mkfile</code>（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。</p>\n</li>\n</ul>\n<h2 id=\"系统调试\"><a href=\"#系统调试\" class=\"headerlink\" title=\"系统调试\"></a>系统调试</h2><ul>\n<li><p><code>curl</code> 和 <code>curl -I</code> 可以被轻松地应用于 web 调试中，它们的好兄弟 <code>wget</code> 也是如此，或者也可以试试更潮的 <a href=\"https://github.com/jkbrzt/httpie\"><code>httpie</code></a>。</p>\n</li>\n<li><p>获取 CPU 和硬盘的使用状态，通常使用使用 <code>top</code>（<code>htop</code> 更佳），<code>iostat</code> 和 <code>iotop</code>。而 <code>iostat -mxz 15</code> 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。</p>\n</li>\n<li><p>使用 <code>netstat</code> 和 <code>ss</code> 查看网络连接的细节。</p>\n</li>\n<li><p><code>dstat</code> 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 <a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>，它会在一个终端窗口中向你提供一些系统级的数据。</p>\n</li>\n<li><p>若要了解内存状态，运行并理解 <code>free</code> 和 <code>vmstat</code> 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。</p>\n</li>\n<li><p>Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 <code>kill -3 &lt;pid&gt;</code> 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 <code>jps</code>，<code>jstat</code>，<code>jstack</code>，<code>jmap</code> 很有用。<a href=\"https://github.com/aragozin/jvm-tools\">SJK tools</a> 更高级。</p>\n</li>\n<li><p>使用 <a href=\"http://www.bitwizard.nl/mtr/\"><code>mtr</code></a> 去跟踪路由，用于确定网络问题。</p>\n</li>\n<li><p>用 <a href=\"https://dev.yorhel.nl/ncdu\"><code>ncdu</code></a> 来查看磁盘使用情况，它比寻常的命令，如 <code>du -sh *</code>，更节省时间。</p>\n</li>\n<li><p>查找正在使用带宽的套接字连接或进程，使用 <a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code>iftop</code></a> 或 <a href=\"https://github.com/raboof/nethogs\"><code>nethogs</code></a>。</p>\n</li>\n<li><p><code>ab</code> 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 <code>siege</code>。</p>\n</li>\n<li><p><a href=\"https://wireshark.org/\"><code>wireshark</code></a>，<a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code>tshark</code></a> 和 <a href=\"http://ngrep.sourceforge.net/\"><code>ngrep</code></a> 可用于复杂的网络调试。</p>\n</li>\n<li><p>了解 <code>strace</code> 和 <code>ltrace</code>。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（<code>-c</code>）和附加到一个运行的进程参数 （<code>-p</code>）。</p>\n</li>\n<li><p>了解使用 <code>ldd</code> 来检查共享库。但是<a href=\"http://www.catonmat.net/blog/ldd-arbitrary-code-execution/\">永远不要在不信任的文件上运行</a>。</p>\n</li>\n<li><p>了解如何运用 <code>gdb</code> 连接到一个运行着的进程并获取它的堆栈轨迹。</p>\n</li>\n<li><p>学会使用 <code>/proc</code>。它在调试正在出现的问题的时候有时会效果惊人。比如：<code>/proc/cpuinfo</code>，<code>/proc/meminfo</code>，<code>/proc/cmdline</code>，<code>/proc/xxx/cwd</code>，<code>/proc/xxx/exe</code>，<code>/proc/xxx/fd/</code>，<code>/proc/xxx/smaps</code>（这里的 <code>xxx</code> 表示进程的 id 或 pid）。</p>\n</li>\n<li><p>当调试一些之前出现的问题的时候，<a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code>sar</code></a> 非常有用。它展示了 cpu、内存以及网络等的历史数据。</p>\n</li>\n<li><p>关于更深层次的系统分析以及性能分析，看看 <code>stap</code>（<a href=\"https://sourceware.org/systemtap/wiki\">SystemTap</a>），<a href=\"https://en.wikipedia.org/wiki/Perf_(Linux)\"><code>perf</code></a>，以及<a href=\"https://github.com/draios/sysdig\"><code>sysdig</code></a>。</p>\n</li>\n<li><p>查看你当前使用的系统，使用 <code>uname</code>，<code>uname -a</code>（Unix／kernel 信息）或者 <code>lsb_release -a</code>（Linux 发行版信息）。</p>\n</li>\n<li><p>无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 <code>dmesg</code>。</p>\n</li>\n<li><p>如果你删除了一个文件，但通过 <code>du</code> 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：<br><code>lsof | grep deleted | grep &quot;filename-of-my-big-file&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"单行脚本\"><a href=\"#单行脚本\" class=\"headerlink\" title=\"单行脚本\"></a>单行脚本</h2><p>一些命令组合的例子：</p>\n<ul>\n<li><p>当你需要对文本文件做集合交、并、差运算时，<code>sort</code> 和 <code>uniq</code> 会是你的好帮手。具体例子请参照代码后面的，此处假设 <code>a</code> 与 <code>b</code> 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 <code>/tmp</code> 在一个小的根分区上时你可能需要 <code>-T</code> 参数，但是实际上 <code>sort</code> 并不被内存大小约束），参阅前文中关于 <code>LC_ALL</code> 和 <code>sort</code> 的 <code>-u</code> 参数的部分。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sort</span> a b | <span class=\"built_in\">uniq</span> &gt; c   <span class=\"comment\"># c 是 a 并 b</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> a b | <span class=\"built_in\">uniq</span> -d &gt; c   <span class=\"comment\"># c 是 a 交 b</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> a b b | <span class=\"built_in\">uniq</span> -u &gt; c   <span class=\"comment\"># c 是 a - b</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>grep . *</code>（每行都会附上文件名）或者 <code>head -100 *</code>（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 <code>/sys</code>、<code>/proc</code>、<code>/etc</code>）时特别好用。</p>\n</li>\n<li><p>计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123; x += $3 &#125; END &#123; print x &#125;&#x27;</span> myfile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果你想在文件树上查看大小&#x2F;日期，这可能看起来像递归版的 <code>ls -l</code> 但比 <code>ls -lR</code> 更易于理解：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -<span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 <code>acct_id</code> 参数在 URI 中。如果你想计算出每个 <code>acct_id</code> 值有多少次请求，使用如下代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -o <span class=\"string\">&#x27;acct_id=[0-9]+&#x27;</span> access.log | <span class=\"built_in\">cut</span> -d= -f2 | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span> -c | <span class=\"built_in\">sort</span> -rn</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要持续监测文件改动，可以使用 <code>watch</code>，例如检查某个文件夹中文件的改变，可以用 <code>watch -d -n 2 &#39;ls -rtlh | tail&#39;</code>；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 <code>watch -d -n 2 ifconfig</code>。</p>\n</li>\n<li><p>运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">taocl</span></span>() &#123;</span><br><span class=\"line\">  curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|</span><br><span class=\"line\">    pandoc -f markdown -t html |</span><br><span class=\"line\">    iconv -f <span class=\"string\">&#x27;utf-8&#x27;</span> -t <span class=\"string\">&#x27;unicode&#x27;</span> |</span><br><span class=\"line\">    xmlstarlet fo --html --dropdtd |</span><br><span class=\"line\">    xmlstarlet sel -t -v <span class=\"string\">&quot;(html/body/ul/li[count(p)&gt;0])[<span class=\"variable\">$RANDOM</span> mod last()+1]&quot;</span> |</span><br><span class=\"line\">    xmlstarlet unesc | <span class=\"built_in\">fmt</span> -80</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"冷门但有用\"><a href=\"#冷门但有用\" class=\"headerlink\" title=\"冷门但有用\"></a>冷门但有用</h2><ul>\n<li><p><code>expr</code>：计算表达式或正则匹配</p>\n</li>\n<li><p><code>m4</code>：简单的宏处理器</p>\n</li>\n<li><p><code>yes</code>：多次打印字符串</p>\n</li>\n<li><p><code>cal</code>：漂亮的日历</p>\n</li>\n<li><p><code>env</code>：执行一个命令（脚本文件中很有用）</p>\n</li>\n<li><p><code>printenv</code>：打印环境变量（调试时或在写脚本文件时很有用）</p>\n</li>\n<li><p><code>look</code>：查找以特定字符串开头的单词或行</p>\n</li>\n<li><p><code>cut</code>，<code>paste</code> 和 <code>join</code>：数据修改</p>\n</li>\n<li><p><code>fmt</code>：格式化文本段落</p>\n</li>\n<li><p><code>pr</code>：将文本格式化成页／列形式</p>\n</li>\n<li><p><code>fold</code>：包裹文本中的几行</p>\n</li>\n<li><p><code>column</code>：将文本格式化成多个对齐、定宽的列或表格</p>\n</li>\n<li><p><code>expand</code> 和 <code>unexpand</code>：制表符与空格之间转换</p>\n</li>\n<li><p><code>nl</code>：添加行号</p>\n</li>\n<li><p><code>seq</code>：打印数字</p>\n</li>\n<li><p><code>bc</code>：计算器</p>\n</li>\n<li><p><code>factor</code>：分解因数</p>\n</li>\n<li><p><a href=\"https://gnupg.org/\"><code>gpg</code></a>：加密并签名文件</p>\n</li>\n<li><p><code>toe</code>：terminfo 入口列表</p>\n</li>\n<li><p><code>nc</code>：网络调试及数据传输</p>\n</li>\n<li><p><code>socat</code>：套接字代理，与 <code>netcat</code> 类似</p>\n</li>\n<li><p><a href=\"https://github.com/mattthias/slurm\"><code>slurm</code></a>：网络流量可视化</p>\n</li>\n<li><p><code>dd</code>：文件或设备间传输数据</p>\n</li>\n<li><p><code>file</code>：确定文件类型</p>\n</li>\n<li><p><code>tree</code>：以树的形式显示路径和文件，类似于递归的 <code>ls</code></p>\n</li>\n<li><p><code>stat</code>：文件信息</p>\n</li>\n<li><p><code>time</code>：执行命令，并计算执行时间</p>\n</li>\n<li><p><code>timeout</code>：在指定时长范围内执行命令，并在规定时间结束后停止进程</p>\n</li>\n<li><p><code>lockfile</code>：使文件只能通过 <code>rm -f</code> 移除</p>\n</li>\n<li><p><code>logrotate</code>： 切换、压缩以及发送日志文件</p>\n</li>\n<li><p><code>watch</code>：重复运行同一个命令，展示结果并／或高亮有更改的部分</p>\n</li>\n<li><p><a href=\"https://github.com/joh/when-changed\"><code>when-changed</code></a>：当检测到文件更改时执行指定命令。参阅 <code>inotifywait</code> 和 <code>entr</code>。</p>\n</li>\n<li><p><code>tac</code>：反向输出文件</p>\n</li>\n<li><p><code>shuf</code>：文件中随机选取几行</p>\n</li>\n<li><p><code>comm</code>：一行一行的比较排序过的文件</p>\n</li>\n<li><p><code>strings</code>：从二进制文件中抽取文本</p>\n</li>\n<li><p><code>tr</code>：转换字母</p>\n</li>\n<li><p><code>iconv</code> 或 <code>uconv</code>：文本编码转换</p>\n</li>\n<li><p><code>split</code> 和 <code>csplit</code>：分割文件</p>\n</li>\n<li><p><code>sponge</code>：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 <code>grep -v something some-file | sponge some-file</code></p>\n</li>\n<li><p><code>units</code>：将一种计量单位转换为另一种等效的计量单位（参阅 <code>/usr/share/units/definitions.units</code>）</p>\n</li>\n<li><p><code>apg</code>：随机生成密码</p>\n</li>\n<li><p><code>xz</code>：高比例的文件压缩</p>\n</li>\n<li><p><code>ldd</code>：动态库信息</p>\n</li>\n<li><p><code>nm</code>：提取 obj 文件中的符号</p>\n</li>\n<li><p><code>ab</code> 或 <a href=\"https://github.com/wg/wrk\"><code>wrk</code></a>：web 服务器性能分析</p>\n</li>\n<li><p><code>strace</code>：调试系统调用</p>\n</li>\n<li><p><a href=\"http://www.bitwizard.nl/mtr/\"><code>mtr</code></a>：更好的网络调试跟踪工具</p>\n</li>\n<li><p><code>cssh</code>：可视化的并发 shell</p>\n</li>\n<li><p><code>rsync</code>：通过 ssh 或本地文件系统同步文件和文件夹</p>\n</li>\n<li><p><a href=\"https://wireshark.org/\"><code>wireshark</code></a> 和 <a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code>tshark</code></a>：抓包和网络调试工具</p>\n</li>\n<li><p><a href=\"http://ngrep.sourceforge.net/\"><code>ngrep</code></a>：网络层的 grep</p>\n</li>\n<li><p><code>host</code> 和 <code>dig</code>：DNS 查找</p>\n</li>\n<li><p><code>lsof</code>：列出当前系统打开文件的工具以及查看端口信息</p>\n</li>\n<li><p><code>dstat</code>：系统状态查看</p>\n</li>\n<li><p><a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>：高层次的多子系统总览</p>\n</li>\n<li><p><code>iostat</code>：硬盘使用状态</p>\n</li>\n<li><p><code>mpstat</code>： CPU 使用状态</p>\n</li>\n<li><p><code>vmstat</code>： 内存使用状态</p>\n</li>\n<li><p><code>htop</code>：top 的加强版</p>\n</li>\n<li><p><code>last</code>：登入记录</p>\n</li>\n<li><p><code>w</code>：查看处于登录状态的用户</p>\n</li>\n<li><p><code>id</code>：用户&#x2F;组 ID 信息</p>\n</li>\n<li><p><a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code>sar</code></a>：系统历史数据</p>\n</li>\n<li><p><a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code>iftop</code></a> 或 <a href=\"https://github.com/raboof/nethogs\"><code>nethogs</code></a>：套接字及进程的网络利用情况</p>\n</li>\n<li><p><code>ss</code>：套接字数据</p>\n</li>\n<li><p><code>dmesg</code>：引导及系统错误信息</p>\n</li>\n<li><p><code>sysctl</code>： 在内核运行时动态地查看和修改内核的运行参数</p>\n</li>\n<li><p><code>hdparm</code>：SATA&#x2F;ATA 磁盘更改及性能分析</p>\n</li>\n<li><p><code>lsblk</code>：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息</p>\n</li>\n<li><p><code>lshw</code>，<code>lscpu</code>，<code>lspci</code>，<code>lsusb</code> 和 <code>dmidecode</code>：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等</p>\n</li>\n<li><p><code>lsmod</code> 和 <code>modinfo</code>：列出内核模块，并显示其细节</p>\n</li>\n<li><p><code>fortune</code>，<code>ddate</code> 和 <code>sl</code>：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”</p>\n</li>\n</ul>\n<h2 id=\"仅限-OS-X-系统\"><a href=\"#仅限-OS-X-系统\" class=\"headerlink\" title=\"仅限 OS X 系统\"></a>仅限 OS X 系统</h2><p>以下是<em>仅限于</em> OS X 系统的技巧。</p>\n<ul>\n<li><p>用 <code>brew</code> （Homebrew）或者 <code>port</code> （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。</p>\n</li>\n<li><p>用 <code>pbcopy</code> 复制任何命令的输出到桌面应用，用 <code>pbpaste</code> 粘贴输入。</p>\n</li>\n<li><p>若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 <strong>alt-b</strong>、<strong>alt-f</strong> 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。</p>\n</li>\n<li><p>用 <code>open</code> 或者 <code>open -a /Applications/Whatever.app</code> 使用桌面应用打开文件。</p>\n</li>\n<li><p>Spotlight：用 <code>mdfind</code> 搜索文件，用 <code>mdls</code> 列出元数据（例如照片的 EXIF 信息）。</p>\n</li>\n<li><p>注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 <code>ps</code>，<code>ls</code>，<code>tail</code>，<code>awk</code>，<code>sed</code>）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 <code>gawk</code> 和 <code>gsed</code> 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 <code>perl</code> ）或者经过仔细的测试。</p>\n</li>\n<li><p>用 <code>sw_vers</code> 获取 OS X 的版本信息。</p>\n</li>\n</ul>\n<h2 id=\"仅限-Windows-系统\"><a href=\"#仅限-Windows-系统\" class=\"headerlink\" title=\"仅限 Windows 系统\"></a>仅限 Windows 系统</h2><p>以下是<em>仅限于</em> Windows 系统的技巧。</p>\n<h3 id=\"在-Windows-下获取-Unix-工具\"><a href=\"#在-Windows-下获取-Unix-工具\" class=\"headerlink\" title=\"在 Windows 下获取 Unix 工具\"></a>在 Windows 下获取 Unix 工具</h3><ul>\n<li><p>可以安装 <a href=\"https://cygwin.com/\">Cygwin</a> 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。</p>\n</li>\n<li><p>在 Windows 10 上，你可以使用 <a href=\"https://msdn.microsoft.com/commandline/wsl/about\">Bash on Ubuntu on Windows</a>，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。</p>\n</li>\n<li><p>如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 <a href=\"http://www.mingw.org/\">MinGW</a> 以及它的 <a href=\"http://www.mingw.org/wiki/msys\">MSYS</a> 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。</p>\n</li>\n<li><p>另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 <a href=\"https://github.com/dthree/cash\">Cash</a>。注意在此环境下只有很少的 Unix 命令和命令行可用。</p>\n</li>\n</ul>\n<h3 id=\"实用-Windows-命令行工具\"><a href=\"#实用-Windows-命令行工具\" class=\"headerlink\" title=\"实用 Windows 命令行工具\"></a>实用 Windows 命令行工具</h3><ul>\n<li><p>可以使用 <code>wmic</code> 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。</p>\n</li>\n<li><p>Windows 实用的原生命令行网络工具包括 <code>ping</code>，<code>ipconfig</code>，<code>tracert</code>，和 <code>netstat</code>。</p>\n</li>\n<li><p>可以使用 <code>Rundll32</code> 命令来实现<a href=\"http://www.thewindowsclub.com/rundll32-shortcut-commands-windows\">许多有用的 Windows 任务</a> 。</p>\n</li>\n</ul>\n<h3 id=\"Cygwin-技巧\"><a href=\"#Cygwin-技巧\" class=\"headerlink\" title=\"Cygwin 技巧\"></a>Cygwin 技巧</h3><ul>\n<li><p>通过 Cygwin 的包管理器来安装额外的 Unix 程序。</p>\n</li>\n<li><p>使用 <code>mintty</code> 作为你的命令行窗口。</p>\n</li>\n<li><p>要访问 Windows 剪贴板，可以通过 <code>/dev/clipboard</code>。</p>\n</li>\n<li><p>运行 <code>cygstart</code> 以通过默认程序打开一个文件。</p>\n</li>\n<li><p>要访问 Windows 注册表，可以使用 <code>regtool</code>。</p>\n</li>\n<li><p>注意 Windows 驱动器路径 <code>C:\\</code> 在 Cygwin 中用 <code>/cygdrive/c</code> 代表，而 Cygwin 的 <code>/</code> 代表 Windows 中的 <code>C:\\cygwin</code>。要转换 Cygwin 和 Windows 风格的路径可以用 <code>cygpath</code>。这在需要调用 Windows 程序的脚本里很有用。</p>\n</li>\n<li><p>学会使用 <code>wmic</code>，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。</p>\n</li>\n<li><p>要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 <a href=\"https://github.com/dthree/cash\">Cash</a>。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。</p>\n</li>\n<li><p>要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 <a href=\"http://www.mingw.org/\">MinGW</a> 以及它的 <a href=\"http://www.mingw.org/wiki/msys\">MSYS</a> 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"命令行的艺术\"><a href=\"#命令行的艺术\" class=\"headerlink\" title=\"命令行的艺术\"></a>命令行的艺术</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80\">基础</a></li>\n<li><a href=\"#%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8\">日常使用</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86\">文件及数据处理</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95\">系统调试</a></li>\n<li><a href=\"#%E5%8D%95%E8%A1%8C%E8%84%9A%E6%9C%AC\">单行脚本</a></li>\n<li><a href=\"#%E5%86%B7%E9%97%A8%E4%BD%86%E6%9C%89%E7%94%A8\">冷门但有用</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F\">仅限 OS X 系统</a></li>\n<li><a href=\"#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F\">仅限 Windows 系统</a></li>\n</ul>\n<p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>涵盖范围：</p>\n<ul>\n<li>这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到<em>覆盖面广</em>（涉及所有重要的内容），<em>具体</em>（给出具体的最常用的例子），以及<em>简洁</em>（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。</li>\n<li>本文主要为 Linux 所写，但在<a href=\"#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F\">仅限 OS X 系统</a>章节和<a href=\"#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F\">仅限 Windows 系统</a>章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。</li>\n<li>本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。</li>\n<li>除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。</li>\n</ul>\n<p>注意事项：</p>\n<ul>\n<li>为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code>，<code>pacman</code>，<br><code>pip</code> 或 <code>brew</code>（以及其它合适的包管理器）来安装依赖的程序。</li>\n<li>遇到问题的话，请尝试使用 <a href=\"http://explainshell.com/\">Explainshell</a> 去获取相关命令、参数、管道等内容的解释。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p>学习 Bash 的基础知识。具体地，在命令行中输入 <code>man bash</code> 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你<em>只</em>学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。</p>\n</li>\n<li><p>熟悉至少一个基于文本的编辑器。通常而言 Vim （<code>vi</code>） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。</p>\n</li>\n<li><p>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。你可以用 <code>type 命令</code> 来判断这个命令到底是可执行文件、shell 内置命令还是别名。</p>\n</li>\n<li><p>学会使用 <code>&gt;</code> 和 <code>&lt;</code> 来重定向输出和输入，学会使用 <code>|</code> 来重定向管道。明白 <code>&gt;</code> 会覆盖了输出文件而 <code>&gt;&gt;</code> 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。</p>\n</li>\n<li><p>学会使用通配符 <code>*</code> （或许再算上 <code>?</code> 和 <code>[</code>…<code>]</code>） 和引用以及引用中 <code>&#39;</code> 和 <code>&quot;</code> 的区别（后文中有一些具体的例子）。</p>\n</li>\n<li><p>熟悉 Bash 中的任务管理工具：<code>&amp;</code>，<strong>ctrl-z</strong>，<strong>ctrl-c</strong>，<code>jobs</code>，<code>fg</code>，<code>bg</code>，<code>kill</code> 等。</p>\n</li>\n<li><p>学会使用 <code>ssh</code> 进行远程命令行登录，最好知道如何使用 <code>ssh-agent</code>，<code>ssh-add</code> 等命令来实现基础的无密码认证登录。</p>\n</li>\n<li><p>学会基本的文件管理工具：<code>ls</code> 和 <code>ls -l</code> （了解 <code>ls -l</code> 中每一列代表的意义），<code>less</code>，<code>head</code>，<code>tail</code> 和 <code>tail -f</code> （甚至 <code>less +F</code>），<code>ln</code> 和 <code>ln -s</code> （了解硬链接与软链接的区别），<code>chown</code>，<code>chmod</code>，<code>du</code> （硬盘使用情况概述：<code>du -hs *</code>）。 关于文件系统的管理，学习 <code>df</code>，<code>mount</code>，<code>fdisk</code>，<code>mkfs</code>，<code>lsblk</code>。知道 inode 是什么（与 <code>ls -i</code> 和 <code>df -i</code> 等命令相关）。</p>\n</li>\n<li><p>学习基本的网络管理工具：<code>ip</code> 或 <code>ifconfig</code>，<code>dig</code>。</p>\n</li>\n<li><p>学习并使用一种版本控制管理系统，例如 <code>git</code>。</p>\n</li>\n<li><p>熟悉正则表达式，学会使用 <code>grep</code>／<code>egrep</code>，它们的参数中 <code>-i</code>，<code>-o</code>，<code>-v</code>，<code>-A</code>，<code>-B</code> 和 <code>-C</code> 这些是很常用并值得认真学习的。</p>\n</li>\n<li><p>学会使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code> 或 <code>pacman</code> （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 <code>pip</code> 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 <code>pip</code> 来安装会很方便）。</p>\n</li>\n</ul>\n<h2 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h2><ul>\n<li><p>在 Bash 中，可以通过按 <strong>Tab</strong> 键实现自动补全参数，使用 <strong>ctrl-r</strong> 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 <strong>ctrl-r</strong> 会向后查找匹配项，按下 <strong>Enter</strong> 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。</p>\n</li>\n<li><p>在 Bash 中，可以按下 <strong>ctrl-w</strong> 删除你键入的最后一个单词，<strong>ctrl-u</strong> 可以删除行内光标所在位置之前的内容，<strong>alt-b</strong> 和 <strong>alt-f</strong> 可以以单词为单位移动光标，<strong>ctrl-a</strong> 可以将光标移至行首，<strong>ctrl-e</strong> 可以将光标移至行尾，<strong>ctrl-k</strong> 可以删除光标至行尾的所有内容，<strong>ctrl-l</strong> 可以清屏。键入 <code>man readline</code> 可以查看 Bash 中的默认快捷键。内容有很多，例如 <strong>alt-.</strong> 循环地移向前一个参数，而 <strong>alt-</strong>* 可以展开通配符。</p>\n</li>\n<li><p>你喜欢的话，可以执行 <code>set -o vi</code> 来使用 vi 风格的快捷键，而执行 <code>set -o emacs</code> 可以把它改回来。</p>\n</li>\n<li><p>为了便于编辑长命令，在设置你的默认编辑器后（例如 <code>export EDITOR=vim</code>），<strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 <strong>escape-v</strong>。</p>\n</li>\n<li><p>键入 <code>history</code> 查看命令行历史记录，再用 <code>!n</code>（<code>n</code> 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 <code>!$</code>， 它用于指代上次键入的参数，而 <code>!!</code> 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 <strong>ctrl-r</strong> 和 <strong>alt-.</strong> 来实现。</p>\n</li>\n<li><p><code>cd</code> 命令可以切换工作路径，输入 <code>cd ~</code> 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 <code>~</code>（例如 <code>~/.bashrc</code>）。在 <code>sh</code> 脚本里则用环境变量 <code>$HOME</code> 指代 home 目录的路径。</p>\n</li>\n<li><p>回到前一个工作路径：<code>cd -</code>。</p>\n</li>\n<li><p>如果你输入命令的时候中途改了主意，按下 <strong>alt-#</strong> 在行首添加 <code>#</code> 把它当做注释再按下回车执行（或者依次按下 <strong>ctrl-a</strong>， **#**， <strong>enter</strong>）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。</p>\n</li>\n<li><p>使用 <code>xargs</code> （ 或 <code>parallel</code>）。他们非常给力。注意到你可以控制每行参数个数（<code>-L</code>）和最大并行数（<code>-P</code>）。如果你不确定它们是否会按你想的那样工作，先使用 <code>xargs echo</code> 查看一下。此外，使用 <code>-I&#123;&#125;</code> 会很方便。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">&#x27;*.py&#x27;</span> | xargs grep some_function</span><br><span class=\"line\"><span class=\"built_in\">cat</span> hosts | xargs -I&#123;&#125; ssh root@&#123;&#125; hostname</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p><code>pstree -p</code> 以一种优雅的方式展示进程树。</p>\n</li>\n<li><p>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（<code>-f</code> 参数通常有用）。</p>\n</li>\n<li><p>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code> 停止一个进程。使用 <code>man 7 signal</code> 查看详细列表。</p>\n</li>\n<li><p>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行。</p>\n</li>\n<li><p>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 <code>-u</code> 则检查 UDP 端口）或者 <code>lsof -iTCP -sTCP:LISTEN -P -n</code> (这也可以在 OS X 上运行)。</p>\n</li>\n<li><p><code>lsof</code> 来查看开启的套接字和文件。</p>\n</li>\n<li><p>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</p>\n</li>\n<li><p>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 创建了一个新的命令别名 <code>ll</code>。</p>\n</li>\n<li><p>可以把别名、shell 选项和常用函数保存在 <code>~/.bashrc</code>。这样做的话你就可以在所有 shell 会话中使用你的设定。</p>\n</li>\n<li><p>把环境变量的设定以及登陆时要执行的命令保存在 <code>~/.bash_profile</code>。而对于从图形界面启动的 shell 和 <code>cron</code> 启动的 shell，则需要单独配置文件。</p>\n</li>\n<li><p>要想在几台电脑中同步你的配置文件（例如 <code>.bashrc</code> 和 <code>.bash_profile</code>），可以借助 Git。</p>\n</li>\n<li><p>当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 <code>&quot;$FOO&quot;</code>。尽量使用 <code>-0</code> 或 <code>-print0</code> 选项以便用 NULL 来分隔文件名，例如 <code>locate -0 pattern | xargs -0 ls -al</code> 或 <code>find / -print0 -type d | xargs -0 ls -al</code>。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 <code>IFS=$&#39;\\n&#39;</code> 把内部字段分隔符设为换行符。</p>\n</li>\n<li><p>在 Bash 脚本中，使用 <code>set -x</code> 去调试输出（或者使用它的变体 <code>set -v</code>，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 <code>set -e</code> 令脚本在发生错误时退出而不是继续运行；使用 <code>set -u</code> 来检查是否使用了未赋值的变量；试试 <code>set -o pipefail</code>，它可以监测管道中的错误。当牵扯到很多脚本时，使用 <code>trap</code> 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -euo pipefail</span><br><span class=\"line\"><span class=\"built_in\">trap</span> <span class=\"string\">&quot;echo &#x27;error: Script failed: see failed command above&#x27;&quot;</span> ERR</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Bash 脚本中，子 shell（使用括号 <code>(...)</code>）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># do something in current dir</span></span><br><span class=\"line\">(<span class=\"built_in\">cd</span> /some/other/dir &amp;&amp; other-command)</span><br><span class=\"line\"><span class=\"comment\"># continue in original dir</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Bash 中，变量有许多的扩展方式。<code>$&#123;name:?error message&#125;</code> 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 <code>input_file=$&#123;1:?usage: $0 input_file&#125;</code>。在变量为空时使用默认值：<code>$&#123;name:-default&#125;</code>。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 <code>output_file=$&#123;2:-logfile&#125;</code>，如果省略了 $2，它的值就为空，于是 <code>output_file</code> 就会被设为 <code>logfile</code>。数学表达式：<code>i=$(( (i + 1) % 5 ))</code>。序列：<code>&#123;1..10&#125;</code>。截断字符串：<code>$&#123;var%suffix&#125;</code> 和 <code>$&#123;var#prefix&#125;</code>。例如，假设 <code>var=foo.pdf</code>，那么 <code>echo $&#123;var%.pdf&#125;.txt</code> 将输出 <code>foo.txt</code>。</p>\n</li>\n<li><p>使用括号扩展（<code>&#123;</code>…<code>&#125;</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.&#123;txt,pdf&#125; some-dir</code>（同时移动两个文件），<code>cp somefile&#123;,.bak&#125;</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-&#123;a,b,c&#125;/subtest-&#123;1,2,3&#125;</code>（会被扩展成所有可能的组合，并创建一个目录树）。</p>\n</li>\n<li><p>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff /etc/hosts &lt;(ssh somehost <span class=\"built_in\">cat</span> /etc/hosts)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      <span class=\"comment\"># 在这里写代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>了解 Bash 中的“here documents”，例如 <code>cat &lt;&lt;EOF ...</code>。</p>\n</li>\n<li><p>在 Bash 中，同时重定向标准输出和标准错误：<code>some-command &gt;logfile 2&gt;&amp;1</code> 或者 <code>some-command &amp;&gt;logfile</code>。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 <code>&lt;/dev/null</code> 是一个好习惯。</p>\n</li>\n<li><p>使用 <code>man ascii</code> 查看具有十六进制和十进制值的ASCII表。<code>man unicode</code>，<code>man utf-8</code>，以及 <code>man latin1</code> 有助于你去了解通用的编码信息。</p>\n</li>\n<li><p>使用 <code>screen</code> 或 <a href=\"https://tmux.github.io/\"><code>tmux</code></a> 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 <code>byobu</code> 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 <a href=\"https://github.com/bogner/dtach\"><code>dtach</code></a>。</p>\n</li>\n<li><p>ssh 中，了解如何使用 <code>-L</code> 或 <code>-D</code>（偶尔需要用 <code>-R</code>）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。</p>\n</li>\n<li><p>对 ssh 设置做一些小优化可能是很有用的，例如这个 <code>~/.ssh/config</code> 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCPKeepAlive=yes</span><br><span class=\"line\">ServerAliveInterval=15</span><br><span class=\"line\">ServerAliveCountMax=6</span><br><span class=\"line\">Compression=yes</span><br><span class=\"line\">ControlMaster auto</span><br><span class=\"line\">ControlPath /tmp/%r@%h:%p</span><br><span class=\"line\">ControlPersist yes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 <code>StrictHostKeyChecking=no</code>，<code>ForwardAgent=yes</code>。</p>\n</li>\n<li><p>考虑使用 <a href=\"https://mosh.org/\"><code>mosh</code></a> 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。</p>\n</li>\n<li><p>获取八进制形式的文件访问权限（修改系统设置时通常需要，但 <code>ls</code> 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stat</span> -c <span class=\"string\">&#x27;%A %a %n&#x27;</span> /etc/timezone</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <a href=\"https://github.com/mooz/percol\"><code>percol</code></a> 或者 <a href=\"https://github.com/junegunn/fzf\"><code>fzf</code></a> 可以交互式地从另一个命令输出中选取值。</p>\n</li>\n<li><p>使用 <code>fpp</code>（<a href=\"https://github.com/facebook/PathPicker\">PathPicker</a>）可以与基于另一个命令(例如 <code>git</code>）输出的文件交互。</p>\n</li>\n<li><p>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：<br><code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或<code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</p>\n</li>\n<li><p>以其他用户的身份执行命令，使用 <code>sudo</code>。默认以 root 用户的身份执行；使用 <code>-u</code> 来指定其他用户。使用 <code>-i</code> 来以该用户登录（需要输入_你自己的_密码）。</p>\n</li>\n<li><p>将 shell 切换为其他用户，使用 <code>su username</code> 或者 <code>su - username</code>。加入 <code>-</code> 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。</p>\n</li>\n<li><p>了解命令行的 <a href=\"https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong\">128K 限制</a>。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 <code>find</code> 或 <code>xargs</code> 通常可以解决。）</p>\n</li>\n<li><p>当你需要一个基本的计算器时，可以使用 <code>python</code> 解释器（当然你要用 python 的时候也是这样）。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 2+3</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"文件及数据处理\"><a href=\"#文件及数据处理\" class=\"headerlink\" title=\"文件及数据处理\"></a>文件及数据处理</h2><ul>\n<li><p>在当前目录下通过文件名查找一个文件，使用类似于这样的命令：<code>find . -iname &#39;*something*&#39;</code>。在所有路径下通过文件名查找文件，使用 <code>locate something</code> （但注意到 <code>updatedb</code> 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/ggreer/the_silver_searcher\"><code>ag</code></a> 在源代码或数据文件里检索（<code>grep -r</code> 同样可以做到，但相比之下 <code>ag</code> 更加先进）。</p>\n</li>\n<li><p>将 HTML 转为文本：<code>lynx -dump -stdin</code>。</p>\n</li>\n<li><p>Markdown，HTML，以及所有文档格式之间的转换，试试 <a href=\"http://pandoc.org/\"><code>pandoc</code></a>。</p>\n</li>\n<li><p>当你要处理棘手的 XML 时候，<code>xmlstarlet</code> 算是上古时代流传下来的神器。</p>\n</li>\n<li><p>使用 <a href=\"http://stedolan.github.io/jq/\"><code>jq</code></a> 处理 JSON。</p>\n</li>\n<li><p>使用 <a href=\"https://github.com/0k/shyaml\"><code>shyaml</code></a> 处理 YAML。</p>\n</li>\n<li><p>要处理 Excel 或 CSV 文件的话，<a href=\"https://github.com/onyxfish/csvkit\">csvkit</a> 提供了 <code>in2csv</code>，<code>csvcut</code>，<code>csvjoin</code>，<code>csvgrep</code> 等方便易用的工具。</p>\n</li>\n<li><p>当你要处理 Amazon S3 相关的工作的时候，<a href=\"https://github.com/s3tools/s3cmd\"><code>s3cmd</code></a> 是一个很方便的工具而 <a href=\"https://github.com/bloomreach/s4cmd\"><code>s4cmd</code></a> 的效率更高。Amazon 官方提供的 <a href=\"https://github.com/aws/aws-cli\"><code>aws</code></a> 以及  <a href=\"https://github.com/donnemartin/saws\"><code>saws</code></a> 是其他 AWS 相关工作的基础，值得学习。</p>\n</li>\n<li><p>了解如何使用 <code>sort</code> 和 <code>uniq</code>，包括 uniq 的 <code>-u</code> 参数和 <code>-d</code> 参数，具体内容在后文单行脚本节中。另外可以了解一下 <code>comm</code>。</p>\n</li>\n<li><p>了解如何使用 <code>cut</code>，<code>paste</code> 和 <code>join</code> 来更改文件。很多人都会使用 <code>cut</code>，但遗忘了 <code>join</code>。</p>\n</li>\n<li><p>了解如何运用 <code>wc</code> 去计算新行数（<code>-l</code>），字符数（<code>-m</code>），单词数（<code>-w</code>）以及字节数（<code>-c</code>）。</p>\n</li>\n<li><p>了解如何使用 <code>tee</code> 将标准输入复制到文件甚至标准输出，例如 <code>ls -al | tee file.txt</code>。</p>\n</li>\n<li><p>要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 <a href=\"https://www.gnu.org/software/datamash/\"><code>datamash</code></a>。</p>\n</li>\n<li><p>注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 <code>LANG</code> 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降<em>许多倍</em>。某些情况下（例如集合运算）你可以放心的使用 <code>export LC_ALL=C</code> 来忽略掉国际化并按照字节来判断顺序。</p>\n</li>\n<li><p>你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 <code>TZ=Pacific/Fiji date</code> 可以获取斐济的时间。</p>\n</li>\n<li><p>了解如何使用 <code>awk</code> 和 <code>sed</code> 来进行简单的数据处理。 参阅 <a href=\"#one-liners\">One-liners</a> 获取示例。</p>\n</li>\n<li><p>替换一个或多个文件中出现的字符串：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl -pi.bak -e <span class=\"string\">&#x27;s/old-string/new-string/g&#x27;</span> my-files-*.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <a href=\"https://github.com/jlevy/repren\"><code>repren</code></a> 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 <code>rename</code> 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文件、目录和内容全部重命名 foo -&gt; bar:</span></span><br><span class=\"line\">repren --full --preserve-case --from foo --to bar .</span><br><span class=\"line\"><span class=\"comment\"># 还原所有备份文件 whatever.bak -&gt; whatever:</span></span><br><span class=\"line\">repren --renames --from <span class=\"string\">&#x27;(.*)\\.bak&#x27;</span> --to <span class=\"string\">&#x27;\\1&#x27;</span> *.bak</span><br><span class=\"line\"><span class=\"comment\"># 用 rename 实现上述功能（若可用）:</span></span><br><span class=\"line\">rename <span class=\"string\">&#x27;s/\\.bak$//&#x27;</span> *.bak</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据 man 页面的描述，<code>rsync</code> 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 <code>rsync</code> 代替 <code>scp</code> 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的<a href=\"https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html\">最快方法</a>之一：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; <span class=\"built_in\">rmdir</span> some-dir</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若要在复制文件时获取当前进度，可使用 <code>pv</code>，<a href=\"https://github.com/dmerejkowsky/pycp\"><code>pycp</code></a>，<a href=\"https://github.com/Xfennec/progress\"><code>progress</code></a>，<code>rsync --progress</code>。若所执行的复制为block块拷贝，可以使用 <code>dd status=progress</code>。</p>\n</li>\n<li><p>使用 <code>shuf</code> 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。</p>\n</li>\n<li><p>了解 <code>sort</code> 的参数。显示数字时，使用 <code>-n</code> 或者 <code>-h</code> 来显示更易读的数（例如 <code>du -h</code> 的输出）。明白排序时关键字的工作原理（<code>-t</code> 和 <code>-k</code>）。例如，注意到你需要 <code>-k1，1</code> 来仅按第一个域来排序，而 <code>-k1</code> 意味着按整行排序。稳定排序（<code>sort -s</code>）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 <code>sort -k1，1 | sort -s -k2，2</code>。</p>\n</li>\n<li><p>如果你想在 Bash 命令行中写 tab 制表符，按下 <strong>ctrl-v</strong> <strong>[Tab]</strong> 或键入 <code>$&#39;\\t&#39;</code> （后者可能更好，因为你可以复制粘贴它）。</p>\n</li>\n<li><p>标准的源代码对比及合并工具是 <code>diff</code> 和 <code>patch</code>。使用 <code>diffstat</code> 查看变更总览数据。注意到 <code>diff -r</code> 对整个文件夹有效。使用 <code>diff -r tree1 tree2 | diffstat</code> 查看变更的统计数据。<code>vimdiff</code> 用于比对并编辑文件。</p>\n</li>\n<li><p>对于二进制文件，使用 <code>hd</code>，<code>hexdump</code> 或者 <code>xxd</code> 使其以十六进制显示，使用 <code>bvi</code>，<code>hexedit</code> 或者 <code>biew</code> 来进行二进制编辑。</p>\n</li>\n<li><p>同样对于二进制文件，<code>strings</code>（包括 <code>grep</code> 等工具）可以帮助在二进制文件中查找特定比特。</p>\n</li>\n<li><p>制作二进制差分文件（Delta 压缩），使用 <code>xdelta3</code>。</p>\n</li>\n<li><p>使用 <code>iconv</code> 更改文本编码。需要更高级的功能，可以使用 <code>uconv</code>，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uconv -f utf-8 -t utf-8 -x <span class=\"string\">&#x27;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; &#x27;</span> &lt; input.txt &gt; output.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拆分文件可以使用 <code>split</code>（按大小拆分）和 <code>csplit</code>（按模式拆分）。</p>\n</li>\n<li><p>操作日期和时间表达式，可以用 <a href=\"http://www.fresse.org/dateutils/\"><code>dateutils</code></a> 中的 <code>dateadd</code>、<code>datediff</code>、<code>strptime</code> 等工具。</p>\n</li>\n<li><p>使用 <code>zless</code>、<code>zmore</code>、<code>zcat</code> 和 <code>zgrep</code> 对压缩过的文件进行操作。</p>\n</li>\n<li><p>文件属性可以通过 <code>chattr</code> 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：<code>sudo chattr +i /critical/directory/or/file</code></p>\n</li>\n<li><p>使用 <code>getfacl</code> 和 <code>setfacl</code> 以保存和恢复文件权限。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getfacl -R /some/path &gt; permissions.txt</span><br><span class=\"line\">setfacl --restore=permissions.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了高效地创建空文件，请使用 <code>truncate</code>（创建<a href=\"https://zh.wikipedia.org/wiki/%E7%A8%80%E7%96%8F%E6%96%87%E4%BB%B6\">稀疏文件</a>），<code>fallocate</code>（用于 ext4，xfs，btrf 和 ocfs2 文件系统），<code>xfs_mkfile</code>（适用于几乎所有的文件系统，包含在 xfsprogs 包中），<code>mkfile</code>（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。</p>\n</li>\n</ul>\n<h2 id=\"系统调试\"><a href=\"#系统调试\" class=\"headerlink\" title=\"系统调试\"></a>系统调试</h2><ul>\n<li><p><code>curl</code> 和 <code>curl -I</code> 可以被轻松地应用于 web 调试中，它们的好兄弟 <code>wget</code> 也是如此，或者也可以试试更潮的 <a href=\"https://github.com/jkbrzt/httpie\"><code>httpie</code></a>。</p>\n</li>\n<li><p>获取 CPU 和硬盘的使用状态，通常使用使用 <code>top</code>（<code>htop</code> 更佳），<code>iostat</code> 和 <code>iotop</code>。而 <code>iostat -mxz 15</code> 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。</p>\n</li>\n<li><p>使用 <code>netstat</code> 和 <code>ss</code> 查看网络连接的细节。</p>\n</li>\n<li><p><code>dstat</code> 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 <a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>，它会在一个终端窗口中向你提供一些系统级的数据。</p>\n</li>\n<li><p>若要了解内存状态，运行并理解 <code>free</code> 和 <code>vmstat</code> 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。</p>\n</li>\n<li><p>Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 <code>kill -3 &lt;pid&gt;</code> 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 <code>jps</code>，<code>jstat</code>，<code>jstack</code>，<code>jmap</code> 很有用。<a href=\"https://github.com/aragozin/jvm-tools\">SJK tools</a> 更高级。</p>\n</li>\n<li><p>使用 <a href=\"http://www.bitwizard.nl/mtr/\"><code>mtr</code></a> 去跟踪路由，用于确定网络问题。</p>\n</li>\n<li><p>用 <a href=\"https://dev.yorhel.nl/ncdu\"><code>ncdu</code></a> 来查看磁盘使用情况，它比寻常的命令，如 <code>du -sh *</code>，更节省时间。</p>\n</li>\n<li><p>查找正在使用带宽的套接字连接或进程，使用 <a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code>iftop</code></a> 或 <a href=\"https://github.com/raboof/nethogs\"><code>nethogs</code></a>。</p>\n</li>\n<li><p><code>ab</code> 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 <code>siege</code>。</p>\n</li>\n<li><p><a href=\"https://wireshark.org/\"><code>wireshark</code></a>，<a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code>tshark</code></a> 和 <a href=\"http://ngrep.sourceforge.net/\"><code>ngrep</code></a> 可用于复杂的网络调试。</p>\n</li>\n<li><p>了解 <code>strace</code> 和 <code>ltrace</code>。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（<code>-c</code>）和附加到一个运行的进程参数 （<code>-p</code>）。</p>\n</li>\n<li><p>了解使用 <code>ldd</code> 来检查共享库。但是<a href=\"http://www.catonmat.net/blog/ldd-arbitrary-code-execution/\">永远不要在不信任的文件上运行</a>。</p>\n</li>\n<li><p>了解如何运用 <code>gdb</code> 连接到一个运行着的进程并获取它的堆栈轨迹。</p>\n</li>\n<li><p>学会使用 <code>/proc</code>。它在调试正在出现的问题的时候有时会效果惊人。比如：<code>/proc/cpuinfo</code>，<code>/proc/meminfo</code>，<code>/proc/cmdline</code>，<code>/proc/xxx/cwd</code>，<code>/proc/xxx/exe</code>，<code>/proc/xxx/fd/</code>，<code>/proc/xxx/smaps</code>（这里的 <code>xxx</code> 表示进程的 id 或 pid）。</p>\n</li>\n<li><p>当调试一些之前出现的问题的时候，<a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code>sar</code></a> 非常有用。它展示了 cpu、内存以及网络等的历史数据。</p>\n</li>\n<li><p>关于更深层次的系统分析以及性能分析，看看 <code>stap</code>（<a href=\"https://sourceware.org/systemtap/wiki\">SystemTap</a>），<a href=\"https://en.wikipedia.org/wiki/Perf_(Linux)\"><code>perf</code></a>，以及<a href=\"https://github.com/draios/sysdig\"><code>sysdig</code></a>。</p>\n</li>\n<li><p>查看你当前使用的系统，使用 <code>uname</code>，<code>uname -a</code>（Unix／kernel 信息）或者 <code>lsb_release -a</code>（Linux 发行版信息）。</p>\n</li>\n<li><p>无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 <code>dmesg</code>。</p>\n</li>\n<li><p>如果你删除了一个文件，但通过 <code>du</code> 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：<br><code>lsof | grep deleted | grep &quot;filename-of-my-big-file&quot;</code></p>\n</li>\n</ul>\n<h2 id=\"单行脚本\"><a href=\"#单行脚本\" class=\"headerlink\" title=\"单行脚本\"></a>单行脚本</h2><p>一些命令组合的例子：</p>\n<ul>\n<li><p>当你需要对文本文件做集合交、并、差运算时，<code>sort</code> 和 <code>uniq</code> 会是你的好帮手。具体例子请参照代码后面的，此处假设 <code>a</code> 与 <code>b</code> 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 <code>/tmp</code> 在一个小的根分区上时你可能需要 <code>-T</code> 参数，但是实际上 <code>sort</code> 并不被内存大小约束），参阅前文中关于 <code>LC_ALL</code> 和 <code>sort</code> 的 <code>-u</code> 参数的部分。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sort</span> a b | <span class=\"built_in\">uniq</span> &gt; c   <span class=\"comment\"># c 是 a 并 b</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> a b | <span class=\"built_in\">uniq</span> -d &gt; c   <span class=\"comment\"># c 是 a 交 b</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> a b b | <span class=\"built_in\">uniq</span> -u &gt; c   <span class=\"comment\"># c 是 a - b</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>grep . *</code>（每行都会附上文件名）或者 <code>head -100 *</code>（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 <code>/sys</code>、<code>/proc</code>、<code>/etc</code>）时特别好用。</p>\n</li>\n<li><p>计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">&#x27;&#123; x += $3 &#125; END &#123; print x &#125;&#x27;</span> myfile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果你想在文件树上查看大小&#x2F;日期，这可能看起来像递归版的 <code>ls -l</code> 但比 <code>ls -lR</code> 更易于理解：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">type</span> f -<span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 <code>acct_id</code> 参数在 URI 中。如果你想计算出每个 <code>acct_id</code> 值有多少次请求，使用如下代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -o <span class=\"string\">&#x27;acct_id=[0-9]+&#x27;</span> access.log | <span class=\"built_in\">cut</span> -d= -f2 | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span> -c | <span class=\"built_in\">sort</span> -rn</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要持续监测文件改动，可以使用 <code>watch</code>，例如检查某个文件夹中文件的改变，可以用 <code>watch -d -n 2 &#39;ls -rtlh | tail&#39;</code>；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 <code>watch -d -n 2 ifconfig</code>。</p>\n</li>\n<li><p>运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">taocl</span></span>() &#123;</span><br><span class=\"line\">  curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|</span><br><span class=\"line\">    pandoc -f markdown -t html |</span><br><span class=\"line\">    iconv -f <span class=\"string\">&#x27;utf-8&#x27;</span> -t <span class=\"string\">&#x27;unicode&#x27;</span> |</span><br><span class=\"line\">    xmlstarlet fo --html --dropdtd |</span><br><span class=\"line\">    xmlstarlet sel -t -v <span class=\"string\">&quot;(html/body/ul/li[count(p)&gt;0])[<span class=\"variable\">$RANDOM</span> mod last()+1]&quot;</span> |</span><br><span class=\"line\">    xmlstarlet unesc | <span class=\"built_in\">fmt</span> -80</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"冷门但有用\"><a href=\"#冷门但有用\" class=\"headerlink\" title=\"冷门但有用\"></a>冷门但有用</h2><ul>\n<li><p><code>expr</code>：计算表达式或正则匹配</p>\n</li>\n<li><p><code>m4</code>：简单的宏处理器</p>\n</li>\n<li><p><code>yes</code>：多次打印字符串</p>\n</li>\n<li><p><code>cal</code>：漂亮的日历</p>\n</li>\n<li><p><code>env</code>：执行一个命令（脚本文件中很有用）</p>\n</li>\n<li><p><code>printenv</code>：打印环境变量（调试时或在写脚本文件时很有用）</p>\n</li>\n<li><p><code>look</code>：查找以特定字符串开头的单词或行</p>\n</li>\n<li><p><code>cut</code>，<code>paste</code> 和 <code>join</code>：数据修改</p>\n</li>\n<li><p><code>fmt</code>：格式化文本段落</p>\n</li>\n<li><p><code>pr</code>：将文本格式化成页／列形式</p>\n</li>\n<li><p><code>fold</code>：包裹文本中的几行</p>\n</li>\n<li><p><code>column</code>：将文本格式化成多个对齐、定宽的列或表格</p>\n</li>\n<li><p><code>expand</code> 和 <code>unexpand</code>：制表符与空格之间转换</p>\n</li>\n<li><p><code>nl</code>：添加行号</p>\n</li>\n<li><p><code>seq</code>：打印数字</p>\n</li>\n<li><p><code>bc</code>：计算器</p>\n</li>\n<li><p><code>factor</code>：分解因数</p>\n</li>\n<li><p><a href=\"https://gnupg.org/\"><code>gpg</code></a>：加密并签名文件</p>\n</li>\n<li><p><code>toe</code>：terminfo 入口列表</p>\n</li>\n<li><p><code>nc</code>：网络调试及数据传输</p>\n</li>\n<li><p><code>socat</code>：套接字代理，与 <code>netcat</code> 类似</p>\n</li>\n<li><p><a href=\"https://github.com/mattthias/slurm\"><code>slurm</code></a>：网络流量可视化</p>\n</li>\n<li><p><code>dd</code>：文件或设备间传输数据</p>\n</li>\n<li><p><code>file</code>：确定文件类型</p>\n</li>\n<li><p><code>tree</code>：以树的形式显示路径和文件，类似于递归的 <code>ls</code></p>\n</li>\n<li><p><code>stat</code>：文件信息</p>\n</li>\n<li><p><code>time</code>：执行命令，并计算执行时间</p>\n</li>\n<li><p><code>timeout</code>：在指定时长范围内执行命令，并在规定时间结束后停止进程</p>\n</li>\n<li><p><code>lockfile</code>：使文件只能通过 <code>rm -f</code> 移除</p>\n</li>\n<li><p><code>logrotate</code>： 切换、压缩以及发送日志文件</p>\n</li>\n<li><p><code>watch</code>：重复运行同一个命令，展示结果并／或高亮有更改的部分</p>\n</li>\n<li><p><a href=\"https://github.com/joh/when-changed\"><code>when-changed</code></a>：当检测到文件更改时执行指定命令。参阅 <code>inotifywait</code> 和 <code>entr</code>。</p>\n</li>\n<li><p><code>tac</code>：反向输出文件</p>\n</li>\n<li><p><code>shuf</code>：文件中随机选取几行</p>\n</li>\n<li><p><code>comm</code>：一行一行的比较排序过的文件</p>\n</li>\n<li><p><code>strings</code>：从二进制文件中抽取文本</p>\n</li>\n<li><p><code>tr</code>：转换字母</p>\n</li>\n<li><p><code>iconv</code> 或 <code>uconv</code>：文本编码转换</p>\n</li>\n<li><p><code>split</code> 和 <code>csplit</code>：分割文件</p>\n</li>\n<li><p><code>sponge</code>：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 <code>grep -v something some-file | sponge some-file</code></p>\n</li>\n<li><p><code>units</code>：将一种计量单位转换为另一种等效的计量单位（参阅 <code>/usr/share/units/definitions.units</code>）</p>\n</li>\n<li><p><code>apg</code>：随机生成密码</p>\n</li>\n<li><p><code>xz</code>：高比例的文件压缩</p>\n</li>\n<li><p><code>ldd</code>：动态库信息</p>\n</li>\n<li><p><code>nm</code>：提取 obj 文件中的符号</p>\n</li>\n<li><p><code>ab</code> 或 <a href=\"https://github.com/wg/wrk\"><code>wrk</code></a>：web 服务器性能分析</p>\n</li>\n<li><p><code>strace</code>：调试系统调用</p>\n</li>\n<li><p><a href=\"http://www.bitwizard.nl/mtr/\"><code>mtr</code></a>：更好的网络调试跟踪工具</p>\n</li>\n<li><p><code>cssh</code>：可视化的并发 shell</p>\n</li>\n<li><p><code>rsync</code>：通过 ssh 或本地文件系统同步文件和文件夹</p>\n</li>\n<li><p><a href=\"https://wireshark.org/\"><code>wireshark</code></a> 和 <a href=\"https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html\"><code>tshark</code></a>：抓包和网络调试工具</p>\n</li>\n<li><p><a href=\"http://ngrep.sourceforge.net/\"><code>ngrep</code></a>：网络层的 grep</p>\n</li>\n<li><p><code>host</code> 和 <code>dig</code>：DNS 查找</p>\n</li>\n<li><p><code>lsof</code>：列出当前系统打开文件的工具以及查看端口信息</p>\n</li>\n<li><p><code>dstat</code>：系统状态查看</p>\n</li>\n<li><p><a href=\"https://github.com/nicolargo/glances\"><code>glances</code></a>：高层次的多子系统总览</p>\n</li>\n<li><p><code>iostat</code>：硬盘使用状态</p>\n</li>\n<li><p><code>mpstat</code>： CPU 使用状态</p>\n</li>\n<li><p><code>vmstat</code>： 内存使用状态</p>\n</li>\n<li><p><code>htop</code>：top 的加强版</p>\n</li>\n<li><p><code>last</code>：登入记录</p>\n</li>\n<li><p><code>w</code>：查看处于登录状态的用户</p>\n</li>\n<li><p><code>id</code>：用户&#x2F;组 ID 信息</p>\n</li>\n<li><p><a href=\"http://sebastien.godard.pagesperso-orange.fr/\"><code>sar</code></a>：系统历史数据</p>\n</li>\n<li><p><a href=\"http://www.ex-parrot.com/~pdw/iftop/\"><code>iftop</code></a> 或 <a href=\"https://github.com/raboof/nethogs\"><code>nethogs</code></a>：套接字及进程的网络利用情况</p>\n</li>\n<li><p><code>ss</code>：套接字数据</p>\n</li>\n<li><p><code>dmesg</code>：引导及系统错误信息</p>\n</li>\n<li><p><code>sysctl</code>： 在内核运行时动态地查看和修改内核的运行参数</p>\n</li>\n<li><p><code>hdparm</code>：SATA&#x2F;ATA 磁盘更改及性能分析</p>\n</li>\n<li><p><code>lsblk</code>：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息</p>\n</li>\n<li><p><code>lshw</code>，<code>lscpu</code>，<code>lspci</code>，<code>lsusb</code> 和 <code>dmidecode</code>：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等</p>\n</li>\n<li><p><code>lsmod</code> 和 <code>modinfo</code>：列出内核模块，并显示其细节</p>\n</li>\n<li><p><code>fortune</code>，<code>ddate</code> 和 <code>sl</code>：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”</p>\n</li>\n</ul>\n<h2 id=\"仅限-OS-X-系统\"><a href=\"#仅限-OS-X-系统\" class=\"headerlink\" title=\"仅限 OS X 系统\"></a>仅限 OS X 系统</h2><p>以下是<em>仅限于</em> OS X 系统的技巧。</p>\n<ul>\n<li><p>用 <code>brew</code> （Homebrew）或者 <code>port</code> （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。</p>\n</li>\n<li><p>用 <code>pbcopy</code> 复制任何命令的输出到桌面应用，用 <code>pbpaste</code> 粘贴输入。</p>\n</li>\n<li><p>若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 <strong>alt-b</strong>、<strong>alt-f</strong> 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。</p>\n</li>\n<li><p>用 <code>open</code> 或者 <code>open -a /Applications/Whatever.app</code> 使用桌面应用打开文件。</p>\n</li>\n<li><p>Spotlight：用 <code>mdfind</code> 搜索文件，用 <code>mdls</code> 列出元数据（例如照片的 EXIF 信息）。</p>\n</li>\n<li><p>注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 <code>ps</code>，<code>ls</code>，<code>tail</code>，<code>awk</code>，<code>sed</code>）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 <code>gawk</code> 和 <code>gsed</code> 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 <code>perl</code> ）或者经过仔细的测试。</p>\n</li>\n<li><p>用 <code>sw_vers</code> 获取 OS X 的版本信息。</p>\n</li>\n</ul>\n<h2 id=\"仅限-Windows-系统\"><a href=\"#仅限-Windows-系统\" class=\"headerlink\" title=\"仅限 Windows 系统\"></a>仅限 Windows 系统</h2><p>以下是<em>仅限于</em> Windows 系统的技巧。</p>\n<h3 id=\"在-Windows-下获取-Unix-工具\"><a href=\"#在-Windows-下获取-Unix-工具\" class=\"headerlink\" title=\"在 Windows 下获取 Unix 工具\"></a>在 Windows 下获取 Unix 工具</h3><ul>\n<li><p>可以安装 <a href=\"https://cygwin.com/\">Cygwin</a> 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。</p>\n</li>\n<li><p>在 Windows 10 上，你可以使用 <a href=\"https://msdn.microsoft.com/commandline/wsl/about\">Bash on Ubuntu on Windows</a>，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。</p>\n</li>\n<li><p>如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 <a href=\"http://www.mingw.org/\">MinGW</a> 以及它的 <a href=\"http://www.mingw.org/wiki/msys\">MSYS</a> 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。</p>\n</li>\n<li><p>另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 <a href=\"https://github.com/dthree/cash\">Cash</a>。注意在此环境下只有很少的 Unix 命令和命令行可用。</p>\n</li>\n</ul>\n<h3 id=\"实用-Windows-命令行工具\"><a href=\"#实用-Windows-命令行工具\" class=\"headerlink\" title=\"实用 Windows 命令行工具\"></a>实用 Windows 命令行工具</h3><ul>\n<li><p>可以使用 <code>wmic</code> 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。</p>\n</li>\n<li><p>Windows 实用的原生命令行网络工具包括 <code>ping</code>，<code>ipconfig</code>，<code>tracert</code>，和 <code>netstat</code>。</p>\n</li>\n<li><p>可以使用 <code>Rundll32</code> 命令来实现<a href=\"http://www.thewindowsclub.com/rundll32-shortcut-commands-windows\">许多有用的 Windows 任务</a> 。</p>\n</li>\n</ul>\n<h3 id=\"Cygwin-技巧\"><a href=\"#Cygwin-技巧\" class=\"headerlink\" title=\"Cygwin 技巧\"></a>Cygwin 技巧</h3><ul>\n<li><p>通过 Cygwin 的包管理器来安装额外的 Unix 程序。</p>\n</li>\n<li><p>使用 <code>mintty</code> 作为你的命令行窗口。</p>\n</li>\n<li><p>要访问 Windows 剪贴板，可以通过 <code>/dev/clipboard</code>。</p>\n</li>\n<li><p>运行 <code>cygstart</code> 以通过默认程序打开一个文件。</p>\n</li>\n<li><p>要访问 Windows 注册表，可以使用 <code>regtool</code>。</p>\n</li>\n<li><p>注意 Windows 驱动器路径 <code>C:\\</code> 在 Cygwin 中用 <code>/cygdrive/c</code> 代表，而 Cygwin 的 <code>/</code> 代表 Windows 中的 <code>C:\\cygwin</code>。要转换 Cygwin 和 Windows 风格的路径可以用 <code>cygpath</code>。这在需要调用 Windows 程序的脚本里很有用。</p>\n</li>\n<li><p>学会使用 <code>wmic</code>，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。</p>\n</li>\n<li><p>要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 <a href=\"https://github.com/dthree/cash\">Cash</a>。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。</p>\n</li>\n<li><p>要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 <a href=\"http://www.mingw.org/\">MinGW</a> 以及它的 <a href=\"http://www.mingw.org/wiki/msys\">MSYS</a> 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clt9z55mb0007kogpdqp13v4q","category_id":"clt9z55ma0004kogp2uleadv1","_id":"clt9z55me000fkogpe504ftjr"},{"post_id":"clt9z55m60001kogp9cpk2tyd","category_id":"clt9z55ma0004kogp2uleadv1","_id":"clt9z55mf000kkogp4zcqg2gj"},{"post_id":"clt9z55mc0008kogp29ve2lge","category_id":"clt9z55ma0004kogp2uleadv1","_id":"clt9z55mf000nkogpf7g26eo6"},{"post_id":"clt9z55md000ckogpe0kv81i3","category_id":"clt9z55ma0004kogp2uleadv1","_id":"clt9z55mg000skogp0achcplx"},{"post_id":"clt9z55m80003kogp7b912zey","category_id":"clt9z55ma0004kogp2uleadv1","_id":"clt9z55mh000vkogpac7qa27u"},{"post_id":"clt9z55ma0006kogpaqpg0gdc","category_id":"clt9z55ma0004kogp2uleadv1","_id":"clt9z55mh000ykogp3spbgl6m"},{"post_id":"clt9z55me000ekogp2ljw9v6m","category_id":"clt9z55mf000okogp1kww581h","_id":"clt9z55mi0010kogp1dz0c2jr"},{"post_id":"clt9z55mh000ukogph0tz9fun","category_id":"clt9z55mf000okogp1kww581h","_id":"clt9z55mi0013kogp3uohbitm"},{"post_id":"clt9z55mf000jkogp84vk8pui","category_id":"clt9z55mh000wkogpfx6n5aek","_id":"clt9z55mi0016kogp2kfn59tr"},{"post_id":"clt9z55mf000mkogp59vi46ux","category_id":"clt9z55mf000okogp1kww581h","_id":"clt9z55mi0018kogp4ndrg47r"},{"post_id":"clt9z55mg000rkogp90mu7bf7","category_id":"clt9z55mi0015kogp0wr36vuu","_id":"clt9z55mj001ckogpfii44p8c"}],"PostTag":[{"post_id":"clt9z55mb0007kogpdqp13v4q","tag_id":"clt9z55ma0005kogpha0oemys","_id":"clt9z55md000bkogpa2hd57kg"},{"post_id":"clt9z55m60001kogp9cpk2tyd","tag_id":"clt9z55ma0005kogpha0oemys","_id":"clt9z55me000dkogp9yve9utj"},{"post_id":"clt9z55mc0008kogp29ve2lge","tag_id":"clt9z55ma0005kogpha0oemys","_id":"clt9z55me000ikogphzkm696v"},{"post_id":"clt9z55md000ckogpe0kv81i3","tag_id":"clt9z55ma0005kogpha0oemys","_id":"clt9z55mf000lkogp6z4620o7"},{"post_id":"clt9z55m80003kogp7b912zey","tag_id":"clt9z55ma0005kogpha0oemys","_id":"clt9z55mg000qkogpf5ty8e78"},{"post_id":"clt9z55ma0006kogpaqpg0gdc","tag_id":"clt9z55ma0005kogpha0oemys","_id":"clt9z55mh000tkogp69fucst2"},{"post_id":"clt9z55me000ekogp2ljw9v6m","tag_id":"clt9z55mg000pkogp5qik9hpt","_id":"clt9z55mh000zkogp9uaafozk"},{"post_id":"clt9z55mf000jkogp84vk8pui","tag_id":"clt9z55mh000xkogp4s2c05jr","_id":"clt9z55mi0014kogp3vs18as4"},{"post_id":"clt9z55mf000mkogp59vi46ux","tag_id":"clt9z55mi0012kogpafi88xpt","_id":"clt9z55mj001akogp48oo345i"},{"post_id":"clt9z55mf000mkogp59vi46ux","tag_id":"clt9z55mg000pkogp5qik9hpt","_id":"clt9z55mj001bkogpg1jn4k1k"},{"post_id":"clt9z55mh000ukogph0tz9fun","tag_id":"clt9z55mj0019kogp3r0u3zm0","_id":"clt9z55mj001dkogpca66fxrn"}],"Tag":[{"name":"随笔","_id":"clt9z55ma0005kogpha0oemys"},{"name":"linux","_id":"clt9z55mg000pkogp5qik9hpt"},{"name":"Python","_id":"clt9z55mh000xkogp4s2c05jr"},{"name":"windows","_id":"clt9z55mi0012kogpafi88xpt"},{"name":"linux 转载精选","_id":"clt9z55mj0019kogp3r0u3zm0"}]}}